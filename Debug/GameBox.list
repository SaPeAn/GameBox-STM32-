
GameBox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e48  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000924  08005f58  08005f58  00006f58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800687c  0800687c  000081d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800687c  0800687c  0000787c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006884  08006884  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006884  08006884  00007884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006888  08006888  00007888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800688c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000958  200001d8  08006a60  000081d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000b30  08006a60  00008b30  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016a77  00000000  00000000  000081fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a83  00000000  00000000  0001ec74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000a4eb  00000000  00000000  000226f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001040  00000000  00000000  0002cbe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015d7  00000000  00000000  0002dc28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a181  00000000  00000000  0002f1ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a691  00000000  00000000  00049380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093834  00000000  00000000  00063a11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f7245  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003fd0  00000000  00000000  000f7288  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000049  00000000  00000000  000fb258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	08005f40 	.word	0x08005f40

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	08005f40 	.word	0x08005f40

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <randinit>:
  return val;
}

void randinit(void)
{
  srand((uint8)timestamp);
 8000a88:	4b01      	ldr	r3, [pc, #4]	@ (8000a90 <randinit+0x8>)
 8000a8a:	7818      	ldrb	r0, [r3, #0]
 8000a8c:	f002 bbd8 	b.w	8003240 <srand>
 8000a90:	200001f8 	.word	0x200001f8

08000a94 <commoninit>:
/*----------------------------------------------------------------------------*/

/*-------------------------------INITIALIZATION-------------------------------*/

void commoninit(void)
{
 8000a94:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(SHUTDOWN_GPIO_Port, SHUTDOWN_Pin, SET);
 8000a96:	2201      	movs	r2, #1
 8000a98:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a9c:	4809      	ldr	r0, [pc, #36]	@ (8000ac4 <commoninit+0x30>)
 8000a9e:	f001 fae5 	bl	800206c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SOUND_OUT_GPIO_Port, SOUND_OUT_Pin, RESET);
 8000aa2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	4807      	ldr	r0, [pc, #28]	@ (8000ac8 <commoninit+0x34>)
 8000aaa:	f001 fadf 	bl	800206c <HAL_GPIO_WritePin>

extern TIM_HandleTypeDef htim1;
void BrightPWMgen(uint8 duty_cycle)
{
	uint16 dutyCycle = duty_cycle * 255;
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutyCycle);
 8000aae:	f64d 3224 	movw	r2, #56100	@ 0xdb24
 8000ab2:	4806      	ldr	r0, [pc, #24]	@ (8000acc <commoninit+0x38>)
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ab4:	2100      	movs	r1, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutyCycle);
 8000ab6:	6803      	ldr	r3, [r0, #0]
 8000ab8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000aba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000abe:	f002 b98b 	b.w	8002dd8 <HAL_TIM_PWM_Start>
 8000ac2:	bf00      	nop
 8000ac4:	40011000 	.word	0x40011000
 8000ac8:	40010800 	.word	0x40010800
 8000acc:	20000678 	.word	0x20000678

08000ad0 <initbuttons>:
  B1 = CreateBtn(BTN_1_GPIO_Port, BTN_1_Pin, &timestamp);
 8000ad0:	2040      	movs	r0, #64	@ 0x40
  B2 = CreateBtn(BTN_2_GPIO_Port, BTN_2_Pin, &timestamp);
 8000ad2:	2180      	movs	r1, #128	@ 0x80
  B3 = CreateBtn(BTN_3_GPIO_Port, BTN_3_Pin, &timestamp);
 8000ad4:	2210      	movs	r2, #16
  B1 = CreateBtn(BTN_1_GPIO_Port, BTN_1_Pin, &timestamp);
 8000ad6:	2300      	movs	r3, #0
{
 8000ad8:	b430      	push	{r4, r5}
  B4 = CreateBtn(BTN_4_GPIO_Port, BTN_4_Pin, &timestamp);
 8000ada:	2520      	movs	r5, #32
  B1 = CreateBtn(BTN_1_GPIO_Port, BTN_1_Pin, &timestamp);
 8000adc:	4c0f      	ldr	r4, [pc, #60]	@ (8000b1c <initbuttons+0x4c>)
 8000ade:	6060      	str	r0, [r4, #4]
  B2 = CreateBtn(BTN_2_GPIO_Port, BTN_2_Pin, &timestamp);
 8000ae0:	480f      	ldr	r0, [pc, #60]	@ (8000b20 <initbuttons+0x50>)
  B1 = CreateBtn(BTN_1_GPIO_Port, BTN_1_Pin, &timestamp);
 8000ae2:	e9c4 3303 	strd	r3, r3, [r4, #12]
  B2 = CreateBtn(BTN_2_GPIO_Port, BTN_2_Pin, &timestamp);
 8000ae6:	6041      	str	r1, [r0, #4]
  B3 = CreateBtn(BTN_3_GPIO_Port, BTN_3_Pin, &timestamp);
 8000ae8:	490e      	ldr	r1, [pc, #56]	@ (8000b24 <initbuttons+0x54>)
  B2 = CreateBtn(BTN_2_GPIO_Port, BTN_2_Pin, &timestamp);
 8000aea:	e9c0 3303 	strd	r3, r3, [r0, #12]
  B3 = CreateBtn(BTN_3_GPIO_Port, BTN_3_Pin, &timestamp);
 8000aee:	604a      	str	r2, [r1, #4]
  B4 = CreateBtn(BTN_4_GPIO_Port, BTN_4_Pin, &timestamp);
 8000af0:	4a0d      	ldr	r2, [pc, #52]	@ (8000b28 <initbuttons+0x58>)
  B3 = CreateBtn(BTN_3_GPIO_Port, BTN_3_Pin, &timestamp);
 8000af2:	e9c1 3303 	strd	r3, r3, [r1, #12]
  B4 = CreateBtn(BTN_4_GPIO_Port, BTN_4_Pin, &timestamp);
 8000af6:	e9c2 3303 	strd	r3, r3, [r2, #12]
  B1 = CreateBtn(BTN_1_GPIO_Port, BTN_1_Pin, &timestamp);
 8000afa:	7523      	strb	r3, [r4, #20]
  B2 = CreateBtn(BTN_2_GPIO_Port, BTN_2_Pin, &timestamp);
 8000afc:	7503      	strb	r3, [r0, #20]
  B3 = CreateBtn(BTN_3_GPIO_Port, BTN_3_Pin, &timestamp);
 8000afe:	750b      	strb	r3, [r1, #20]
  B4 = CreateBtn(BTN_4_GPIO_Port, BTN_4_Pin, &timestamp);
 8000b00:	7513      	strb	r3, [r2, #20]
  B1 = CreateBtn(BTN_1_GPIO_Port, BTN_1_Pin, &timestamp);
 8000b02:	4b0a      	ldr	r3, [pc, #40]	@ (8000b2c <initbuttons+0x5c>)
  B4 = CreateBtn(BTN_4_GPIO_Port, BTN_4_Pin, &timestamp);
 8000b04:	6055      	str	r5, [r2, #4]
  B1 = CreateBtn(BTN_1_GPIO_Port, BTN_1_Pin, &timestamp);
 8000b06:	6023      	str	r3, [r4, #0]
  B2 = CreateBtn(BTN_2_GPIO_Port, BTN_2_Pin, &timestamp);
 8000b08:	6003      	str	r3, [r0, #0]
  B3 = CreateBtn(BTN_3_GPIO_Port, BTN_3_Pin, &timestamp);
 8000b0a:	600b      	str	r3, [r1, #0]
  B4 = CreateBtn(BTN_4_GPIO_Port, BTN_4_Pin, &timestamp);
 8000b0c:	6013      	str	r3, [r2, #0]
  B1 = CreateBtn(BTN_1_GPIO_Port, BTN_1_Pin, &timestamp);
 8000b0e:	4b08      	ldr	r3, [pc, #32]	@ (8000b30 <initbuttons+0x60>)
 8000b10:	60a3      	str	r3, [r4, #8]
  B2 = CreateBtn(BTN_2_GPIO_Port, BTN_2_Pin, &timestamp);
 8000b12:	6083      	str	r3, [r0, #8]
  B3 = CreateBtn(BTN_3_GPIO_Port, BTN_3_Pin, &timestamp);
 8000b14:	608b      	str	r3, [r1, #8]
  B4 = CreateBtn(BTN_4_GPIO_Port, BTN_4_Pin, &timestamp);
 8000b16:	6093      	str	r3, [r2, #8]
}
 8000b18:	bc30      	pop	{r4, r5}
 8000b1a:	4770      	bx	lr
 8000b1c:	20000248 	.word	0x20000248
 8000b20:	20000230 	.word	0x20000230
 8000b24:	20000218 	.word	0x20000218
 8000b28:	20000200 	.word	0x20000200
 8000b2c:	40010c00 	.word	0x40010c00
 8000b30:	200001f8 	.word	0x200001f8

08000b34 <LCD_printstr8x5>:
  LCD_senddata(char_8x5[ch], 5);
  LCD_setpagecolumn(pg, cl + 5);
  LCD_writebyte(0x00);
}

uint8 LCD_printstr8x5(const uint8 *str, uint8 pg, uint8 cl) {
 8000b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b38:	460c      	mov	r4, r1
 8000b3a:	4605      	mov	r5, r0
  uint8 str_null[] = "NULL";
 8000b3c:	4b29      	ldr	r3, [pc, #164]	@ (8000be4 <LCD_printstr8x5+0xb0>)
uint8 LCD_printstr8x5(const uint8 *str, uint8 pg, uint8 cl) {
 8000b3e:	b082      	sub	sp, #8
  uint8 str_null[] = "NULL";
 8000b40:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000b44:	f88d 1004 	strb.w	r1, [sp, #4]
 8000b48:	9000      	str	r0, [sp, #0]
uint8 LCD_printstr8x5(const uint8 *str, uint8 pg, uint8 cl) {
 8000b4a:	4621      	mov	r1, r4
 8000b4c:	4614      	mov	r4, r2
  if (str == NULL) str = str_null;
 8000b4e:	2d00      	cmp	r5, #0
 8000b50:	d044      	beq.n	8000bdc <LCD_printstr8x5+0xa8>
  uint8 i = 0;
  while (str[i]) {
 8000b52:	782b      	ldrb	r3, [r5, #0]
 8000b54:	b353      	cbz	r3, 8000bac <LCD_printstr8x5+0x78>
    if (cl > 123 && str[i] != '\n') {
 8000b56:	2c7b      	cmp	r4, #123	@ 0x7b
 8000b58:	f04f 0001 	mov.w	r0, #1
  bufpg = pg;
 8000b5c:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 8000be8 <LCD_printstr8x5+0xb4>
  LCD_senddata(char_8x5[ch], 5);
 8000b60:	4f22      	ldr	r7, [pc, #136]	@ (8000bec <LCD_printstr8x5+0xb8>)
 8000b62:	4e23      	ldr	r6, [pc, #140]	@ (8000bf0 <LCD_printstr8x5+0xbc>)
  bufcl++;
 8000b64:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8000bf4 <LCD_printstr8x5+0xc0>
    if (cl > 123 && str[i] != '\n') {
 8000b68:	d92e      	bls.n	8000bc8 <LCD_printstr8x5+0x94>
 8000b6a:	2b0a      	cmp	r3, #10
 8000b6c:	d032      	beq.n	8000bd4 <LCD_printstr8x5+0xa0>
      pg++;
 8000b6e:	f04f 0c00 	mov.w	ip, #0
 8000b72:	2406      	movs	r4, #6
 8000b74:	3101      	adds	r1, #1
 8000b76:	b2c9      	uxtb	r1, r1
  LCD_senddata(char_8x5[ch], 5);
 8000b78:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8000b7c:	443a      	add	r2, r7
 8000b7e:	eb0c 1cc1 	add.w	ip, ip, r1, lsl #7
 8000b82:	f102 3eff 	add.w	lr, r2, #4294967295
  bufpg = pg;
 8000b86:	f888 1000 	strb.w	r1, [r8]
  LCDbuf_upload();
  LCDbuf_erase();
}

void LCD_senddata(const uint8* byte, uint8 N) {
  for (uint8 i = 0; i < N; i++) {
 8000b8a:	44b4      	add	ip, r6
 8000b8c:	3204      	adds	r2, #4
 8000b8e:	e001      	b.n	8000b94 <LCD_printstr8x5+0x60>
 8000b90:	4572      	cmp	r2, lr
 8000b92:	d00f      	beq.n	8000bb4 <LCD_printstr8x5+0x80>
    dispbuffer[bufpg][bufcl + i] |= byte[i];
 8000b94:	f89c 3000 	ldrb.w	r3, [ip]
 8000b98:	f81e af01 	ldrb.w	sl, [lr, #1]!
    if (bufcl > 127) bufpg++;
    if (bufpg > 7) return;
 8000b9c:	2907      	cmp	r1, #7
    dispbuffer[bufpg][bufcl + i] |= byte[i];
 8000b9e:	ea43 030a 	orr.w	r3, r3, sl
 8000ba2:	f80c 3b01 	strb.w	r3, [ip], #1
    if (bufpg > 7) return;
 8000ba6:	d9f3      	bls.n	8000b90 <LCD_printstr8x5+0x5c>
  bufcl++;
 8000ba8:	4b12      	ldr	r3, [pc, #72]	@ (8000bf4 <LCD_printstr8x5+0xc0>)
 8000baa:	701c      	strb	r4, [r3, #0]
    if (pg > 7) return 0;
 8000bac:	2000      	movs	r0, #0
}
 8000bae:	b002      	add	sp, #8
 8000bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  bufcl++;
 8000bb4:	f889 4000 	strb.w	r4, [r9]
  while (str[i]) {
 8000bb8:	5c2b      	ldrb	r3, [r5, r0]
 8000bba:	1c42      	adds	r2, r0, #1
 8000bbc:	b2d2      	uxtb	r2, r2
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d0f5      	beq.n	8000bae <LCD_printstr8x5+0x7a>
    if (cl > 123 && str[i] != '\n') {
 8000bc2:	2c7b      	cmp	r4, #123	@ 0x7b
 8000bc4:	4610      	mov	r0, r2
 8000bc6:	d8d0      	bhi.n	8000b6a <LCD_printstr8x5+0x36>
    if(str[i] == '\n') {cl = 0; pg++; i++; continue;}
 8000bc8:	2b0a      	cmp	r3, #10
 8000bca:	d003      	beq.n	8000bd4 <LCD_printstr8x5+0xa0>
  bufcl++;
 8000bcc:	1da2      	adds	r2, r4, #6
    dispbuffer[bufpg][bufcl + i] |= byte[i];
 8000bce:	46a4      	mov	ip, r4
 8000bd0:	b2d4      	uxtb	r4, r2
 8000bd2:	e7d1      	b.n	8000b78 <LCD_printstr8x5+0x44>
    if(str[i] == '\n') {cl = 0; pg++; i++; continue;}
 8000bd4:	3101      	adds	r1, #1
 8000bd6:	2400      	movs	r4, #0
 8000bd8:	b2c9      	uxtb	r1, r1
 8000bda:	e7ed      	b.n	8000bb8 <LCD_printstr8x5+0x84>
 8000bdc:	234e      	movs	r3, #78	@ 0x4e
  if (str == NULL) str = str_null;
 8000bde:	466d      	mov	r5, sp
 8000be0:	e7b9      	b.n	8000b56 <LCD_printstr8x5+0x22>
 8000be2:	bf00      	nop
 8000be4:	08005f68 	.word	0x08005f68
 8000be8:	20000261 	.word	0x20000261
 8000bec:	08005f70 	.word	0x08005f70
 8000bf0:	20000264 	.word	0x20000264
 8000bf4:	20000260 	.word	0x20000260

08000bf8 <LCDbuf_upload>:
  }
}
/*----------------------------------------------------------------------------*/

/*------------------------WORKING THROUGH THE BUFFER--------------------------*/
void LCDbuf_upload(void) {
 8000bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bfa:	24b0      	movs	r4, #176	@ 0xb0
 8000bfc:	4d14      	ldr	r5, [pc, #80]	@ (8000c50 <LCDbuf_upload+0x58>)
  DISP_INIT_SEND_COM;
 8000bfe:	4f15      	ldr	r7, [pc, #84]	@ (8000c54 <LCDbuf_upload+0x5c>)
  HAL_SPI_Transmit(&hspi2, data, N, 10);
 8000c00:	4e15      	ldr	r6, [pc, #84]	@ (8000c58 <LCDbuf_upload+0x60>)
void LCDbuf_upload(void) {
 8000c02:	b083      	sub	sp, #12
	for(uint8_t j = 0; j < 8; j++)
	  {
		uint8_t tmp_arr[] = {(0xB0 + j), 0x10, 0x00};
 8000c04:	2200      	movs	r2, #0
 8000c06:	2310      	movs	r3, #16
  DISP_INIT_SEND_COM;
 8000c08:	2102      	movs	r1, #2
 8000c0a:	4638      	mov	r0, r7
		uint8_t tmp_arr[] = {(0xB0 + j), 0x10, 0x00};
 8000c0c:	f88d 4004 	strb.w	r4, [sp, #4]
 8000c10:	f88d 3005 	strb.w	r3, [sp, #5]
 8000c14:	f88d 2006 	strb.w	r2, [sp, #6]
  DISP_INIT_SEND_COM;
 8000c18:	f001 fa28 	bl	800206c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, data, N, 10);
 8000c1c:	230a      	movs	r3, #10
 8000c1e:	2203      	movs	r2, #3
 8000c20:	a901      	add	r1, sp, #4
 8000c22:	4630      	mov	r0, r6
 8000c24:	f001 ff34 	bl	8002a90 <HAL_SPI_Transmit>
	for(uint8_t j = 0; j < 8; j++)
 8000c28:	3401      	adds	r4, #1
  DISP_INIT_SEND_DAT;
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	2102      	movs	r1, #2
 8000c2e:	4638      	mov	r0, r7
 8000c30:	f001 fa1c 	bl	800206c <HAL_GPIO_WritePin>
	for(uint8_t j = 0; j < 8; j++)
 8000c34:	b2e4      	uxtb	r4, r4
	    lcd_sendcommands(tmp_arr, 3);
	    HAL_SPI_Transmit(&hspi2, dispbuffer[j], 128, 10);
 8000c36:	4629      	mov	r1, r5
 8000c38:	230a      	movs	r3, #10
 8000c3a:	2280      	movs	r2, #128	@ 0x80
 8000c3c:	4630      	mov	r0, r6
 8000c3e:	f001 ff27 	bl	8002a90 <HAL_SPI_Transmit>
	for(uint8_t j = 0; j < 8; j++)
 8000c42:	2cb8      	cmp	r4, #184	@ 0xb8
 8000c44:	f105 0580 	add.w	r5, r5, #128	@ 0x80
 8000c48:	d1dc      	bne.n	8000c04 <LCDbuf_upload+0xc>
	  }
}
 8000c4a:	b003      	add	sp, #12
 8000c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000264 	.word	0x20000264
 8000c54:	40010800 	.word	0x40010800
 8000c58:	200006c0 	.word	0x200006c0

08000c5c <LCD_bufupload_buferase>:
void LCD_bufupload_buferase(void) {
 8000c5c:	b508      	push	{r3, lr}
  LCDbuf_upload();
 8000c5e:	f7ff ffcb 	bl	8000bf8 <LCDbuf_upload>
}
 8000c62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

void LCDbuf_erase(void) {
  for (uint8 j = 0; j < 8; j++)
    for (uint8 i = 0; i < 128; i++) dispbuffer[j][i] = 0;
 8000c66:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4801      	ldr	r0, [pc, #4]	@ (8000c74 <LCD_bufupload_buferase+0x18>)
 8000c6e:	f003 b896 	b.w	8003d9e <memset>
 8000c72:	bf00      	nop
 8000c74:	20000264 	.word	0x20000264

08000c78 <LCD_init>:
{
 8000c78:	b510      	push	{r4, lr}
	DISP_RESET_OFF;
 8000c7a:	4c1e      	ldr	r4, [pc, #120]	@ (8000cf4 <LCD_init+0x7c>)
{
 8000c7c:	b084      	sub	sp, #16
	DISP_RESET_OFF;
 8000c7e:	4620      	mov	r0, r4
 8000c80:	2201      	movs	r2, #1
 8000c82:	2104      	movs	r1, #4
 8000c84:	f001 f9f2 	bl	800206c <HAL_GPIO_WritePin>
	DISP_INIT_SEND_DAT;
 8000c88:	2201      	movs	r2, #1
 8000c8a:	2102      	movs	r1, #2
 8000c8c:	4620      	mov	r0, r4
 8000c8e:	f001 f9ed 	bl	800206c <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8000c92:	2002      	movs	r0, #2
 8000c94:	f000 fcc6 	bl	8001624 <HAL_Delay>
	DISP_RESET_ON;
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2104      	movs	r1, #4
 8000c9c:	4620      	mov	r0, r4
 8000c9e:	f001 f9e5 	bl	800206c <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8000ca2:	2002      	movs	r0, #2
 8000ca4:	f000 fcbe 	bl	8001624 <HAL_Delay>
	DISP_RESET_OFF;
 8000ca8:	4620      	mov	r0, r4
 8000caa:	2201      	movs	r2, #1
 8000cac:	2104      	movs	r1, #4
 8000cae:	f001 f9dd 	bl	800206c <HAL_GPIO_WritePin>
	DISP_INIT_SEND_COM;
 8000cb2:	4620      	mov	r0, r4
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2102      	movs	r1, #2
 8000cb8:	f001 f9d8 	bl	800206c <HAL_GPIO_WritePin>
	uint8_t init_data_array[13] = {
 8000cbc:	46ec      	mov	ip, sp
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf8 <LCD_init+0x80>)
 8000cc0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cc2:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
	HAL_SPI_Transmit(&hspi2, init_data_array, 13, 20);
 8000cc6:	4669      	mov	r1, sp
	uint8_t init_data_array[13] = {
 8000cc8:	f88c 3000 	strb.w	r3, [ip]
	HAL_SPI_Transmit(&hspi2, init_data_array, 13, 20);
 8000ccc:	220d      	movs	r2, #13
 8000cce:	2314      	movs	r3, #20
 8000cd0:	480a      	ldr	r0, [pc, #40]	@ (8000cfc <LCD_init+0x84>)
 8000cd2:	f001 fedd 	bl	8002a90 <HAL_SPI_Transmit>
  LCDbuf_upload();
 8000cd6:	f7ff ff8f 	bl	8000bf8 <LCDbuf_upload>
    for (uint8 i = 0; i < 128; i++) dispbuffer[j][i] = 0;
 8000cda:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cde:	2100      	movs	r1, #0
 8000ce0:	4807      	ldr	r0, [pc, #28]	@ (8000d00 <LCD_init+0x88>)
 8000ce2:	f003 f85c 	bl	8003d9e <memset>
	DISP_INIT_SEND_DAT;
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	2102      	movs	r1, #2
 8000cea:	4620      	mov	r0, r4
 8000cec:	f001 f9be 	bl	800206c <HAL_GPIO_WritePin>
}
 8000cf0:	b004      	add	sp, #16
 8000cf2:	bd10      	pop	{r4, pc}
 8000cf4:	40010800 	.word	0x40010800
 8000cf8:	08005f58 	.word	0x08005f58
 8000cfc:	200006c0 	.word	0x200006c0
 8000d00:	20000264 	.word	0x20000264

08000d04 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
	for (int i = 0; i < len; i++)
 8000d04:	1e10      	subs	r0, r2, #0
 8000d06:	dd29      	ble.n	8000d5c <_write+0x58>
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d08:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000d0c:	eb01 0c00 	add.w	ip, r1, r0
 8000d10:	f8d3 2e80 	ldr.w	r2, [r3, #3712]	@ 0xe80
	{
		ITM_SendChar(*ptr++);
 8000d14:	3101      	adds	r1, #1
 8000d16:	07d2      	lsls	r2, r2, #31
 8000d18:	d51d      	bpl.n	8000d56 <_write+0x52>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d1a:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	@ 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d1e:	07d2      	lsls	r2, r2, #31
 8000d20:	d519      	bpl.n	8000d56 <_write+0x52>
{
 8000d22:	b500      	push	{lr}
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d24:	681a      	ldr	r2, [r3, #0]
		ITM_SendChar(*ptr++);
 8000d26:	f811 ec01 	ldrb.w	lr, [r1, #-1]
 8000d2a:	b91a      	cbnz	r2, 8000d34 <_write+0x30>
    {
      __NOP();
 8000d2c:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	2a00      	cmp	r2, #0
 8000d32:	d0fb      	beq.n	8000d2c <_write+0x28>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d34:	f883 e000 	strb.w	lr, [r3]
	for (int i = 0; i < len; i++)
 8000d38:	4561      	cmp	r1, ip
 8000d3a:	d00a      	beq.n	8000d52 <_write+0x4e>
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d3c:	f8d3 2e80 	ldr.w	r2, [r3, #3712]	@ 0xe80
		ITM_SendChar(*ptr++);
 8000d40:	3101      	adds	r1, #1
 8000d42:	07d2      	lsls	r2, r2, #31
 8000d44:	d5f8      	bpl.n	8000d38 <_write+0x34>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d46:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	@ 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d4a:	07d2      	lsls	r2, r2, #31
 8000d4c:	d4ea      	bmi.n	8000d24 <_write+0x20>
	for (int i = 0; i < len; i++)
 8000d4e:	4561      	cmp	r1, ip
 8000d50:	d1f4      	bne.n	8000d3c <_write+0x38>
	}
	return len;
}
 8000d52:	f85d fb04 	ldr.w	pc, [sp], #4
	for (int i = 0; i < len; i++)
 8000d56:	4561      	cmp	r1, ip
 8000d58:	d1da      	bne.n	8000d10 <_write+0xc>
 8000d5a:	4770      	bx	lr
}
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop

08000d60 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d60:	2300      	movs	r3, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000d62:	2005      	movs	r0, #5
 8000d64:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
{
 8000d68:	b530      	push	{r4, r5, lr}
 8000d6a:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000d6c:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000d70:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d72:	2402      	movs	r4, #2
 8000d74:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d78:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d7c:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8000d80:	e9cd 3308 	strd	r3, r3, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d84:	e9cd 3301 	strd	r3, r3, [sp, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d88:	930c      	str	r3, [sp, #48]	@ 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d8a:	9305      	str	r3, [sp, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d8c:	9300      	str	r3, [sp, #0]
 8000d8e:	9303      	str	r3, [sp, #12]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d90:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d94:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000d96:	e9cd 220d 	strd	r2, r2, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d9a:	9411      	str	r4, [sp, #68]	@ 0x44
 8000d9c:	9112      	str	r1, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d9e:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000da0:	f001 f96e 	bl	8002080 <HAL_RCC_OscConfig>
 8000da4:	b108      	cbz	r0, 8000daa <SystemClock_Config+0x4a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000da6:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <SystemClock_Config+0x48>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000daa:	4603      	mov	r3, r0
 8000dac:	220f      	movs	r2, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dae:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000db0:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000db2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000db6:	4621      	mov	r1, r4
 8000db8:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dba:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dbc:	9205      	str	r2, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dbe:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dc0:	f001 fb74 	bl	80024ac <HAL_RCC_ClockConfig>
 8000dc4:	b108      	cbz	r0, 8000dca <SystemClock_Config+0x6a>
 8000dc6:	b672      	cpsid	i
  while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <SystemClock_Config+0x68>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8000dca:	2403      	movs	r4, #3
 8000dcc:	f44f 7580 	mov.w	r5, #256	@ 0x100
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000dd0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dd4:	4668      	mov	r0, sp
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8000dd6:	e9cd 4500 	strd	r4, r5, [sp]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000dda:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ddc:	f001 fc16 	bl	800260c <HAL_RCCEx_PeriphCLKConfig>
 8000de0:	b108      	cbz	r0, 8000de6 <SystemClock_Config+0x86>
 8000de2:	b672      	cpsid	i
  while (1)
 8000de4:	e7fe      	b.n	8000de4 <SystemClock_Config+0x84>
}
 8000de6:	b015      	add	sp, #84	@ 0x54
 8000de8:	bd30      	pop	{r4, r5, pc}
 8000dea:	bf00      	nop

08000dec <main>:
{
 8000dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	2400      	movs	r4, #0
{
 8000df2:	b09c      	sub	sp, #112	@ 0x70
  HAL_Init();
 8000df4:	f000 fbfe 	bl	80015f4 <HAL_Init>
  SystemClock_Config();
 8000df8:	f7ff ffb2 	bl	8000d60 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	e9cd 4414 	strd	r4, r4, [sp, #80]	@ 0x50
 8000e00:	e9cd 4416 	strd	r4, r4, [sp, #88]	@ 0x58
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e04:	4da5      	ldr	r5, [pc, #660]	@ (800109c <main+0x2b0>)
  HAL_GPIO_WritePin(SHUTDOWN_GPIO_Port, SHUTDOWN_Pin, GPIO_PIN_SET);
 8000e06:	2201      	movs	r2, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e08:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(SHUTDOWN_GPIO_Port, SHUTDOWN_Pin, GPIO_PIN_SET);
 8000e0a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0e:	f043 0310 	orr.w	r3, r3, #16
 8000e12:	61ab      	str	r3, [r5, #24]
 8000e14:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(SHUTDOWN_GPIO_Port, SHUTDOWN_Pin, GPIO_PIN_SET);
 8000e16:	48a2      	ldr	r0, [pc, #648]	@ (80010a0 <main+0x2b4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e18:	f003 0310 	and.w	r3, r3, #16
 8000e1c:	9302      	str	r3, [sp, #8]
 8000e1e:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e20:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e22:	4617      	mov	r7, r2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e24:	f043 0320 	orr.w	r3, r3, #32
 8000e28:	61ab      	str	r3, [r5, #24]
 8000e2a:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2c:	f04f 0802 	mov.w	r8, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e30:	f003 0320 	and.w	r3, r3, #32
 8000e34:	9303      	str	r3, [sp, #12]
 8000e36:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e38:	69ab      	ldr	r3, [r5, #24]
  hadc1.Instance = ADC1;
 8000e3a:	4e9a      	ldr	r6, [pc, #616]	@ (80010a4 <main+0x2b8>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3c:	f043 0304 	orr.w	r3, r3, #4
 8000e40:	61ab      	str	r3, [r5, #24]
 8000e42:	69ab      	ldr	r3, [r5, #24]
 8000e44:	f003 0304 	and.w	r3, r3, #4
 8000e48:	9304      	str	r3, [sp, #16]
 8000e4a:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4c:	69ab      	ldr	r3, [r5, #24]
 8000e4e:	f043 0308 	orr.w	r3, r3, #8
 8000e52:	61ab      	str	r3, [r5, #24]
 8000e54:	69ab      	ldr	r3, [r5, #24]
 8000e56:	f003 0308 	and.w	r3, r3, #8
 8000e5a:	9305      	str	r3, [sp, #20]
 8000e5c:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(SHUTDOWN_GPIO_Port, SHUTDOWN_Pin, GPIO_PIN_SET);
 8000e5e:	f001 f905 	bl	800206c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DISP_RS_Pin|DISP_RSE_Pin|SOUND_OUT_Pin, GPIO_PIN_RESET);
 8000e62:	4622      	mov	r2, r4
 8000e64:	f241 0106 	movw	r1, #4102	@ 0x1006
 8000e68:	488f      	ldr	r0, [pc, #572]	@ (80010a8 <main+0x2bc>)
 8000e6a:	f001 f8ff 	bl	800206c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000e6e:	2311      	movs	r3, #17
 8000e70:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
  HAL_GPIO_Init(SHUTDOWN_GPIO_Port, &GPIO_InitStruct);
 8000e74:	488a      	ldr	r0, [pc, #552]	@ (80010a0 <main+0x2b4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000e76:	e9cd 1314 	strd	r1, r3, [sp, #80]	@ 0x50
  HAL_GPIO_Init(SHUTDOWN_GPIO_Port, &GPIO_InitStruct);
 8000e7a:	a914      	add	r1, sp, #80	@ 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7c:	e9cd 4816 	strd	r4, r8, [sp, #88]	@ 0x58
  HAL_GPIO_Init(SHUTDOWN_GPIO_Port, &GPIO_InitStruct);
 8000e80:	f000 ffd8 	bl	8001e34 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DISP_RS_Pin|DISP_RSE_Pin|SOUND_OUT_Pin;
 8000e84:	f241 0306 	movw	r3, #4102	@ 0x1006
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e88:	4887      	ldr	r0, [pc, #540]	@ (80010a8 <main+0x2bc>)
 8000e8a:	a914      	add	r1, sp, #80	@ 0x50
  GPIO_InitStruct.Pin = DISP_RS_Pin|DISP_RSE_Pin|SOUND_OUT_Pin;
 8000e8c:	9314      	str	r3, [sp, #80]	@ 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	e9cd 7415 	strd	r7, r4, [sp, #84]	@ 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e92:	f8cd 805c 	str.w	r8, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e96:	f000 ffcd 	bl	8001e34 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = JOYSTICK_BTN_Pin;
 8000e9a:	2208      	movs	r2, #8
 8000e9c:	2300      	movs	r3, #0
  HAL_GPIO_Init(JOYSTICK_BTN_GPIO_Port, &GPIO_InitStruct);
 8000e9e:	4882      	ldr	r0, [pc, #520]	@ (80010a8 <main+0x2bc>)
 8000ea0:	a914      	add	r1, sp, #80	@ 0x50
  GPIO_InitStruct.Pin = JOYSTICK_BTN_Pin;
 8000ea2:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ea6:	9716      	str	r7, [sp, #88]	@ 0x58
  HAL_GPIO_Init(JOYSTICK_BTN_GPIO_Port, &GPIO_InitStruct);
 8000ea8:	f000 ffc4 	bl	8001e34 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BTN_3_Pin|BTN_4_Pin|BTN_1_Pin|BTN_2_Pin;
 8000eac:	22f0      	movs	r2, #240	@ 0xf0
 8000eae:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb0:	487e      	ldr	r0, [pc, #504]	@ (80010ac <main+0x2c0>)
 8000eb2:	a914      	add	r1, sp, #80	@ 0x50
  GPIO_InitStruct.Pin = BTN_3_Pin|BTN_4_Pin|BTN_1_Pin|BTN_2_Pin;
 8000eb4:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eb8:	9716      	str	r7, [sp, #88]	@ 0x58
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eba:	f000 ffbb 	bl	8001e34 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ebe:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ec0:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ec2:	433b      	orrs	r3, r7
 8000ec4:	616b      	str	r3, [r5, #20]
 8000ec6:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ec8:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000eca:	403b      	ands	r3, r7
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ecc:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ece:	9301      	str	r3, [sp, #4]
 8000ed0:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ed2:	f000 fe3d 	bl	8001b50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ed6:	200b      	movs	r0, #11
 8000ed8:	f000 fe76 	bl	8001bc8 <HAL_NVIC_EnableIRQ>
  hadc1.Instance = ADC1;
 8000edc:	4b74      	ldr	r3, [pc, #464]	@ (80010b0 <main+0x2c4>)
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ede:	f44f 2160 	mov.w	r1, #917504	@ 0xe0000
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ee2:	f44f 7280 	mov.w	r2, #256	@ 0x100
  hadc1.Instance = ADC1;
 8000ee6:	6033      	str	r3, [r6, #0]
  hadc1.Init.NbrOfConversion = 3;
 8000ee8:	2303      	movs	r3, #3
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000eea:	4630      	mov	r0, r6
  ADC_ChannelConfTypeDef sConfig = {0};
 8000eec:	e9cd 4414 	strd	r4, r4, [sp, #80]	@ 0x50
 8000ef0:	9416      	str	r4, [sp, #88]	@ 0x58
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ef2:	7334      	strb	r4, [r6, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ef4:	7534      	strb	r4, [r6, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ef6:	6074      	str	r4, [r6, #4]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ef8:	61f1      	str	r1, [r6, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000efa:	60b2      	str	r2, [r6, #8]
  hadc1.Init.NbrOfConversion = 3;
 8000efc:	6133      	str	r3, [r6, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000efe:	f000 fd71 	bl	80019e4 <HAL_ADC_Init>
 8000f02:	b108      	cbz	r0, 8000f08 <main+0x11c>
 8000f04:	b672      	cpsid	i
  while (1)
 8000f06:	e7fe      	b.n	8000f06 <main+0x11a>
  sConfig.Channel = ADC_CHANNEL_0;
 8000f08:	2400      	movs	r4, #0
 8000f0a:	2501      	movs	r5, #1
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000f0c:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f0e:	4630      	mov	r0, r6
 8000f10:	a914      	add	r1, sp, #80	@ 0x50
  sConfig.Channel = ADC_CHANNEL_0;
 8000f12:	e9cd 4514 	strd	r4, r5, [sp, #80]	@ 0x50
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000f16:	9316      	str	r3, [sp, #88]	@ 0x58
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f18:	f000 fbd6 	bl	80016c8 <HAL_ADC_ConfigChannel>
 8000f1c:	b108      	cbz	r0, 8000f22 <main+0x136>
 8000f1e:	b672      	cpsid	i
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <main+0x134>
  sConfig.Channel = ADC_CHANNEL_9;
 8000f22:	2209      	movs	r2, #9
 8000f24:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f26:	4630      	mov	r0, r6
 8000f28:	a914      	add	r1, sp, #80	@ 0x50
  sConfig.Channel = ADC_CHANNEL_9;
 8000f2a:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f2e:	f000 fbcb 	bl	80016c8 <HAL_ADC_ConfigChannel>
 8000f32:	b108      	cbz	r0, 8000f38 <main+0x14c>
 8000f34:	b672      	cpsid	i
  while (1)
 8000f36:	e7fe      	b.n	8000f36 <main+0x14a>
  sConfig.Channel = ADC_CHANNEL_8;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	2208      	movs	r2, #8
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f3c:	4630      	mov	r0, r6
 8000f3e:	a914      	add	r1, sp, #80	@ 0x50
  sConfig.Channel = ADC_CHANNEL_8;
 8000f40:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f44:	f000 fbc0 	bl	80016c8 <HAL_ADC_ConfigChannel>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	b108      	cbz	r0, 8000f50 <main+0x164>
 8000f4c:	b672      	cpsid	i
  while (1)
 8000f4e:	e7fe      	b.n	8000f4e <main+0x162>
  hspi2.Instance = SPI2;
 8000f50:	4858      	ldr	r0, [pc, #352]	@ (80010b4 <main+0x2c8>)
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000f52:	f44f 2180 	mov.w	r1, #262144	@ 0x40000
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000f56:	2208      	movs	r2, #8
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f58:	f44f 7482 	mov.w	r4, #260	@ 0x104
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f5c:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f60:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f64:	e9c0 3308 	strd	r3, r3, [r0, #32]
 8000f68:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000f6a:	230a      	movs	r3, #10
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000f6c:	e9c0 1206 	strd	r1, r2, [r0, #24]
  hspi2.Instance = SPI2;
 8000f70:	4a51      	ldr	r2, [pc, #324]	@ (80010b8 <main+0x2cc>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f72:	6044      	str	r4, [r0, #4]
  hspi2.Instance = SPI2;
 8000f74:	6002      	str	r2, [r0, #0]
  hspi2.Init.CRCPolynomial = 10;
 8000f76:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f78:	f001 fd2c 	bl	80029d4 <HAL_SPI_Init>
 8000f7c:	4604      	mov	r4, r0
 8000f7e:	b108      	cbz	r0, 8000f84 <main+0x198>
 8000f80:	b672      	cpsid	i
  while (1)
 8000f82:	e7fe      	b.n	8000f82 <main+0x196>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f84:	4601      	mov	r1, r0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f86:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f8a:	e9cd 000d 	strd	r0, r0, [sp, #52]	@ 0x34
 8000f8e:	e9cd 000f 	strd	r0, r0, [sp, #60]	@ 0x3c
 8000f92:	e9cd 0011 	strd	r0, r0, [sp, #68]	@ 0x44
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f96:	9008      	str	r0, [sp, #32]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f98:	9006      	str	r0, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f9a:	900c      	str	r0, [sp, #48]	@ 0x30
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f9c:	900b      	str	r0, [sp, #44]	@ 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f9e:	9007      	str	r0, [sp, #28]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fa0:	2220      	movs	r2, #32
 8000fa2:	a814      	add	r0, sp, #80	@ 0x50
 8000fa4:	f002 fefb 	bl	8003d9e <memset>
  htim1.Init.Period = 65535;
 8000fa8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  htim1.Instance = TIM1;
 8000fac:	4d43      	ldr	r5, [pc, #268]	@ (80010bc <main+0x2d0>)
  htim1.Init.Period = 65535;
 8000fae:	60eb      	str	r3, [r5, #12]
  htim1.Instance = TIM1;
 8000fb0:	4b43      	ldr	r3, [pc, #268]	@ (80010c0 <main+0x2d4>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fb2:	4628      	mov	r0, r5
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb4:	e9c5 4401 	strd	r4, r4, [r5, #4]
  htim1.Init.RepetitionCounter = 0;
 8000fb8:	e9c5 4404 	strd	r4, r4, [r5, #16]
 8000fbc:	61ac      	str	r4, [r5, #24]
  htim1.Instance = TIM1;
 8000fbe:	602b      	str	r3, [r5, #0]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fc0:	f001 fff8 	bl	8002fb4 <HAL_TIM_Base_Init>
 8000fc4:	b108      	cbz	r0, 8000fca <main+0x1de>
 8000fc6:	b672      	cpsid	i
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <main+0x1dc>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fce:	4628      	mov	r0, r5
 8000fd0:	a908      	add	r1, sp, #32
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fd2:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fd4:	f001 ff02 	bl	8002ddc <HAL_TIM_ConfigClockSource>
 8000fd8:	b108      	cbz	r0, 8000fde <main+0x1f2>
 8000fda:	b672      	cpsid	i
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <main+0x1f0>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fde:	4628      	mov	r0, r5
 8000fe0:	f002 f816 	bl	8003010 <HAL_TIM_PWM_Init>
 8000fe4:	b108      	cbz	r0, 8000fea <main+0x1fe>
 8000fe6:	b672      	cpsid	i
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <main+0x1fc>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fea:	2600      	movs	r6, #0
 8000fec:	2700      	movs	r7, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fee:	4628      	mov	r0, r5
 8000ff0:	a906      	add	r1, sp, #24
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ff2:	e9cd 6706 	strd	r6, r7, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ff6:	f002 f8c7 	bl	8003188 <HAL_TIMEx_MasterConfigSynchronization>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	b108      	cbz	r0, 8001002 <main+0x216>
 8000ffe:	b672      	cpsid	i
  while (1)
 8001000:	e7fe      	b.n	8001000 <main+0x214>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001002:	2360      	movs	r3, #96	@ 0x60
  sConfigOC.Pulse = 45000;
 8001004:	f64a 74c8 	movw	r4, #45000	@ 0xafc8
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001008:	4628      	mov	r0, r5
 800100a:	a90c      	add	r1, sp, #48	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800100c:	e9cd 6710 	strd	r6, r7, [sp, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001010:	e9cd 220e 	strd	r2, r2, [sp, #56]	@ 0x38
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001014:	e9cd 340c 	strd	r3, r4, [sp, #48]	@ 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001018:	9212      	str	r2, [sp, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800101a:	f002 f855 	bl	80030c8 <HAL_TIM_PWM_ConfigChannel>
 800101e:	b108      	cbz	r0, 8001024 <main+0x238>
 8001020:	b672      	cpsid	i
  while (1)
 8001022:	e7fe      	b.n	8001022 <main+0x236>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001024:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001026:	2400      	movs	r4, #0
 8001028:	f44f 5500 	mov.w	r5, #8192	@ 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800102c:	4823      	ldr	r0, [pc, #140]	@ (80010bc <main+0x2d0>)
 800102e:	a914      	add	r1, sp, #80	@ 0x50
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001030:	e9cd 4518 	strd	r4, r5, [sp, #96]	@ 0x60
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001034:	e9cd 3315 	strd	r3, r3, [sp, #84]	@ 0x54
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001038:	9314      	str	r3, [sp, #80]	@ 0x50
  sBreakDeadTimeConfig.DeadTime = 0;
 800103a:	9317      	str	r3, [sp, #92]	@ 0x5c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800103c:	931b      	str	r3, [sp, #108]	@ 0x6c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800103e:	f002 f8d5 	bl	80031ec <HAL_TIMEx_ConfigBreakDeadTime>
 8001042:	4604      	mov	r4, r0
 8001044:	b108      	cbz	r0, 800104a <main+0x25e>
 8001046:	b672      	cpsid	i
  while (1)
 8001048:	e7fe      	b.n	8001048 <main+0x25c>
  HAL_TIM_MspPostInit(&htim1);
 800104a:	481c      	ldr	r0, [pc, #112]	@ (80010bc <main+0x2d0>)
 800104c:	f000 f9f0 	bl	8001430 <HAL_TIM_MspPostInit>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001050:	f44f 7382 	mov.w	r3, #260	@ 0x104
  hspi1.Instance = SPI1;
 8001054:	481b      	ldr	r0, [pc, #108]	@ (80010c4 <main+0x2d8>)
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001056:	f44f 2180 	mov.w	r1, #262144	@ 0x40000
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800105a:	2208      	movs	r2, #8
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800105c:	6043      	str	r3, [r0, #4]
  hspi1.Init.CRCPolynomial = 10;
 800105e:	230a      	movs	r3, #10
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001060:	e9c0 1206 	strd	r1, r2, [r0, #24]
  hspi1.Instance = SPI1;
 8001064:	4a18      	ldr	r2, [pc, #96]	@ (80010c8 <main+0x2dc>)
  hspi1.Init.CRCPolynomial = 10;
 8001066:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001068:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800106c:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001070:	e9c0 4408 	strd	r4, r4, [r0, #32]
 8001074:	6284      	str	r4, [r0, #40]	@ 0x28
  hspi1.Instance = SPI1;
 8001076:	6002      	str	r2, [r0, #0]
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001078:	f001 fcac 	bl	80029d4 <HAL_SPI_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	b108      	cbz	r0, 8001084 <main+0x298>
 8001080:	b672      	cpsid	i
  while (1)
 8001082:	e7fe      	b.n	8001082 <main+0x296>
  hrtc.Init.AsynchPrediv = 32768;
 8001084:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
  hrtc.Instance = RTC;
 8001088:	4810      	ldr	r0, [pc, #64]	@ (80010cc <main+0x2e0>)
 800108a:	4c11      	ldr	r4, [pc, #68]	@ (80010d0 <main+0x2e4>)
  hrtc.Init.AsynchPrediv = 32768;
 800108c:	6083      	str	r3, [r0, #8]
 800108e:	e9c0 4200 	strd	r4, r2, [r0]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001092:	f001 fba3 	bl	80027dc <HAL_RTC_Init>
 8001096:	b1e8      	cbz	r0, 80010d4 <main+0x2e8>
 8001098:	b672      	cpsid	i
  while (1)
 800109a:	e7fe      	b.n	800109a <main+0x2ae>
 800109c:	40021000 	.word	0x40021000
 80010a0:	40011000 	.word	0x40011000
 80010a4:	200007c8 	.word	0x200007c8
 80010a8:	40010800 	.word	0x40010800
 80010ac:	40010c00 	.word	0x40010c00
 80010b0:	40012400 	.word	0x40012400
 80010b4:	200006c0 	.word	0x200006c0
 80010b8:	40003800 	.word	0x40003800
 80010bc:	20000678 	.word	0x20000678
 80010c0:	40012c00 	.word	0x40012c00
 80010c4:	20000718 	.word	0x20000718
 80010c8:	40013000 	.word	0x40013000
 80010cc:	20000770 	.word	0x20000770
 80010d0:	40002800 	.word	0x40002800
  commoninit();
 80010d4:	f7ff fcde 	bl	8000a94 <commoninit>
  randinit();
 80010d8:	f7ff fcd6 	bl	8000a88 <randinit>
  LCD_init();
 80010dc:	f7ff fdcc 	bl	8000c78 <LCD_init>
  LCD_bufupload_buferase();
 80010e0:	f7ff fdbc 	bl	8000c5c <LCD_bufupload_buferase>
  initbuttons();
 80010e4:	f7ff fcf4 	bl	8000ad0 <initbuttons>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_data.array, 3);
 80010e8:	2203      	movs	r2, #3
 80010ea:	490e      	ldr	r1, [pc, #56]	@ (8001124 <main+0x338>)
 80010ec:	480e      	ldr	r0, [pc, #56]	@ (8001128 <main+0x33c>)
 80010ee:	f000 fbc5 	bl	800187c <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_data.array, 3);
 80010f2:	2203      	movs	r2, #3
 80010f4:	490b      	ldr	r1, [pc, #44]	@ (8001124 <main+0x338>)
 80010f6:	480c      	ldr	r0, [pc, #48]	@ (8001128 <main+0x33c>)
 80010f8:	f000 fbc0 	bl	800187c <HAL_ADC_Start_DMA>
	sprintf(str, "%u", utime);
 80010fc:	4d0b      	ldr	r5, [pc, #44]	@ (800112c <main+0x340>)
	uint32 utime = (uint32_t)((RTC->CNTH << 16) | RTC->CNTL);
 80010fe:	69a2      	ldr	r2, [r4, #24]
 8001100:	69e3      	ldr	r3, [r4, #28]
	sprintf(str, "%u", utime);
 8001102:	4629      	mov	r1, r5
 8001104:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8001108:	a814      	add	r0, sp, #80	@ 0x50
 800110a:	f002 fde5 	bl	8003cd8 <siprintf>
	LCD_printstr8x5(str, 1, 10);
 800110e:	220a      	movs	r2, #10
 8001110:	2101      	movs	r1, #1
 8001112:	a814      	add	r0, sp, #80	@ 0x50
 8001114:	f7ff fd0e 	bl	8000b34 <LCD_printstr8x5>
    LCD_bufupload_buferase();
 8001118:	f7ff fda0 	bl	8000c5c <LCD_bufupload_buferase>
    HAL_Delay(200);
 800111c:	20c8      	movs	r0, #200	@ 0xc8
 800111e:	f000 fa81 	bl	8001624 <HAL_Delay>
  while (1)
 8001122:	e7ec      	b.n	80010fe <main+0x312>
 8001124:	2000066c 	.word	0x2000066c
 8001128:	200007c8 	.word	0x200007c8
 800112c:	08006470 	.word	0x08006470

08001130 <HAL_IncTick>:
{
 8001130:	b538      	push	{r3, r4, r5, lr}
  uwTick += uwTickFreq;
 8001132:	490f      	ldr	r1, [pc, #60]	@ (8001170 <HAL_IncTick+0x40>)
  timestamp++;
 8001134:	4c0f      	ldr	r4, [pc, #60]	@ (8001174 <HAL_IncTick+0x44>)
  uwTick += uwTickFreq;
 8001136:	4a10      	ldr	r2, [pc, #64]	@ (8001178 <HAL_IncTick+0x48>)
  timestamp++;
 8001138:	6823      	ldr	r3, [r4, #0]
  uwTick += uwTickFreq;
 800113a:	6808      	ldr	r0, [r1, #0]
 800113c:	7812      	ldrb	r2, [r2, #0]
  if( ((timestamp - timer_adc) > 20) && adc_complete_fl )
 800113e:	4d0f      	ldr	r5, [pc, #60]	@ (800117c <HAL_IncTick+0x4c>)
  timestamp++;
 8001140:	3301      	adds	r3, #1
  uwTick += uwTickFreq;
 8001142:	4402      	add	r2, r0
  timestamp++;
 8001144:	6023      	str	r3, [r4, #0]
  uwTick += uwTickFreq;
 8001146:	600a      	str	r2, [r1, #0]
  SchedPeriodIncr();
 8001148:	f000 f844 	bl	80011d4 <SchedPeriodIncr>
  if( ((timestamp - timer_adc) > 20) && adc_complete_fl )
 800114c:	6824      	ldr	r4, [r4, #0]
 800114e:	682b      	ldr	r3, [r5, #0]
 8001150:	1ae3      	subs	r3, r4, r3
 8001152:	2b14      	cmp	r3, #20
 8001154:	d902      	bls.n	800115c <HAL_IncTick+0x2c>
 8001156:	4b0a      	ldr	r3, [pc, #40]	@ (8001180 <HAL_IncTick+0x50>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	b903      	cbnz	r3, 800115e <HAL_IncTick+0x2e>
}
 800115c:	bd38      	pop	{r3, r4, r5, pc}
    timer_adc = timestamp;
 800115e:	602c      	str	r4, [r5, #0]
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_data.array, 3);
 8001160:	2203      	movs	r2, #3
}
 8001162:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_data.array, 3);
 8001166:	4907      	ldr	r1, [pc, #28]	@ (8001184 <HAL_IncTick+0x54>)
 8001168:	4807      	ldr	r0, [pc, #28]	@ (8001188 <HAL_IncTick+0x58>)
 800116a:	f000 bb87 	b.w	800187c <HAL_ADC_Start_DMA>
 800116e:	bf00      	nop
 8001170:	200009e0 	.word	0x200009e0
 8001174:	200001f8 	.word	0x200001f8
 8001178:	20000004 	.word	0x20000004
 800117c:	20000664 	.word	0x20000664
 8001180:	20000668 	.word	0x20000668
 8001184:	2000066c 	.word	0x2000066c
 8001188:	200007c8 	.word	0x200007c8

0800118c <HAL_ADC_ConvCpltCallback>:
  if(hadc->Instance == ADC1)
 800118c:	4b0b      	ldr	r3, [pc, #44]	@ (80011bc <HAL_ADC_ConvCpltCallback+0x30>)
 800118e:	6802      	ldr	r2, [r0, #0]
 8001190:	429a      	cmp	r2, r3
 8001192:	d000      	beq.n	8001196 <HAL_ADC_ConvCpltCallback+0xa>
}
 8001194:	4770      	bx	lr
    adc_complete_fl = 1;
 8001196:	f04f 0c01 	mov.w	ip, #1
    joystick.ox = (uint8_t)(ADC_data.jox/16);
 800119a:	4b09      	ldr	r3, [pc, #36]	@ (80011c0 <HAL_ADC_ConvCpltCallback+0x34>)
 800119c:	4809      	ldr	r0, [pc, #36]	@ (80011c4 <HAL_ADC_ConvCpltCallback+0x38>)
 800119e:	8859      	ldrh	r1, [r3, #2]
    joystick.oy = (uint8_t)(ADC_data.joy/16);
 80011a0:	889a      	ldrh	r2, [r3, #4]
    joystick.ox = (uint8_t)(ADC_data.jox/16);
 80011a2:	0909      	lsrs	r1, r1, #4
    joystick.oy = (uint8_t)(ADC_data.joy/16);
 80011a4:	0912      	lsrs	r2, r2, #4
    Ubat = (uint8_t)(ADC_data.batlvl/16);
 80011a6:	881b      	ldrh	r3, [r3, #0]
    joystick.ox = (uint8_t)(ADC_data.jox/16);
 80011a8:	7041      	strb	r1, [r0, #1]
    joystick.oy = (uint8_t)(ADC_data.joy/16);
 80011aa:	7082      	strb	r2, [r0, #2]
    Ubat = (uint8_t)(ADC_data.batlvl/16);
 80011ac:	4906      	ldr	r1, [pc, #24]	@ (80011c8 <HAL_ADC_ConvCpltCallback+0x3c>)
    adc_complete_fl = 1;
 80011ae:	4a07      	ldr	r2, [pc, #28]	@ (80011cc <HAL_ADC_ConvCpltCallback+0x40>)
    Ubat = (uint8_t)(ADC_data.batlvl/16);
 80011b0:	091b      	lsrs	r3, r3, #4
 80011b2:	700b      	strb	r3, [r1, #0]
    adc_complete_fl = 1;
 80011b4:	f882 c000 	strb.w	ip, [r2]
}
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	40012400 	.word	0x40012400
 80011c0:	2000066c 	.word	0x2000066c
 80011c4:	200001fc 	.word	0x200001fc
 80011c8:	200001f4 	.word	0x200001f4
 80011cc:	20000668 	.word	0x20000668

080011d0 <Error_Handler>:
 80011d0:	b672      	cpsid	i
  while (1)
 80011d2:	e7fe      	b.n	80011d2 <Error_Handler+0x2>

080011d4 <SchedPeriodIncr>:
  }
}

void SchedPeriodIncr(void)
{
  for(uint8 i = 0; i < SchedulerRegistredEvents; i++) {
 80011d4:	4b07      	ldr	r3, [pc, #28]	@ (80011f4 <SchedPeriodIncr+0x20>)
 80011d6:	7819      	ldrb	r1, [r3, #0]
 80011d8:	b151      	cbz	r1, 80011f0 <SchedPeriodIncr+0x1c>
 80011da:	4b07      	ldr	r3, [pc, #28]	@ (80011f8 <SchedPeriodIncr+0x24>)
 80011dc:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    if(SchedulerEvent[i].run_flag) 
 80011e0:	7b1a      	ldrb	r2, [r3, #12]
 80011e2:	b112      	cbz	r2, 80011ea <SchedPeriodIncr+0x16>
      SchedulerEvent[i].eventcounter++;
 80011e4:	689a      	ldr	r2, [r3, #8]
 80011e6:	3201      	adds	r2, #1
 80011e8:	609a      	str	r2, [r3, #8]
  for(uint8 i = 0; i < SchedulerRegistredEvents; i++) {
 80011ea:	3310      	adds	r3, #16
 80011ec:	428b      	cmp	r3, r1
 80011ee:	d1f7      	bne.n	80011e0 <SchedPeriodIncr+0xc>
  }
}
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	200009d8 	.word	0x200009d8
 80011f8:	200007f8 	.word	0x200007f8

080011fc <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001238 <HAL_MspInit+0x3c>)
{
 80011fe:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001200:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001202:	490e      	ldr	r1, [pc, #56]	@ (800123c <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001204:	f042 0201 	orr.w	r2, r2, #1
 8001208:	619a      	str	r2, [r3, #24]
 800120a:	699a      	ldr	r2, [r3, #24]
 800120c:	f002 0201 	and.w	r2, r2, #1
 8001210:	9200      	str	r2, [sp, #0]
 8001212:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001214:	69da      	ldr	r2, [r3, #28]
 8001216:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800121a:	61da      	str	r2, [r3, #28]
 800121c:	69db      	ldr	r3, [r3, #28]
 800121e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001222:	9301      	str	r3, [sp, #4]
 8001224:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001226:	684b      	ldr	r3, [r1, #4]
 8001228:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800122c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001230:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001232:	b002      	add	sp, #8
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	40021000 	.word	0x40021000
 800123c:	40010000 	.word	0x40010000

08001240 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001240:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001242:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 8001244:	4b29      	ldr	r3, [pc, #164]	@ (80012ec <HAL_ADC_MspInit+0xac>)
 8001246:	6802      	ldr	r2, [r0, #0]
{
 8001248:	b088      	sub	sp, #32
  if(hadc->Instance==ADC1)
 800124a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124c:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001250:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(hadc->Instance==ADC1)
 8001254:	d001      	beq.n	800125a <HAL_ADC_MspInit+0x1a>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001256:	b008      	add	sp, #32
 8001258:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 800125a:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
 800125e:	699a      	ldr	r2, [r3, #24]
 8001260:	4605      	mov	r5, r0
 8001262:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001266:	619a      	str	r2, [r3, #24]
 8001268:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(BAT_LVL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800126a:	4821      	ldr	r0, [pc, #132]	@ (80012f0 <HAL_ADC_MspInit+0xb0>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800126c:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8001270:	9201      	str	r2, [sp, #4]
 8001272:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001274:	699a      	ldr	r2, [r3, #24]
    hdma_adc1.Instance = DMA1_Channel1;
 8001276:	4e1f      	ldr	r6, [pc, #124]	@ (80012f4 <HAL_ADC_MspInit+0xb4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001278:	f042 0204 	orr.w	r2, r2, #4
 800127c:	619a      	str	r2, [r3, #24]
 800127e:	699a      	ldr	r2, [r3, #24]
 8001280:	f002 0204 	and.w	r2, r2, #4
 8001284:	9202      	str	r2, [sp, #8]
 8001286:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001288:	699a      	ldr	r2, [r3, #24]
 800128a:	f042 0208 	orr.w	r2, r2, #8
 800128e:	619a      	str	r2, [r3, #24]
 8001290:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = BAT_LVL_CTRL_Pin;
 8001292:	2201      	movs	r2, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001294:	f003 0308 	and.w	r3, r3, #8
 8001298:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = BAT_LVL_CTRL_Pin;
 800129a:	2303      	movs	r3, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800129c:	9903      	ldr	r1, [sp, #12]
    HAL_GPIO_Init(BAT_LVL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800129e:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = BAT_LVL_CTRL_Pin;
 80012a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(BAT_LVL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80012a4:	f000 fdc6 	bl	8001e34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = JOYSTICK_OX_Pin|JOYSTICK_OY_Pin;
 80012a8:	2203      	movs	r2, #3
 80012aa:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ac:	4812      	ldr	r0, [pc, #72]	@ (80012f8 <HAL_ADC_MspInit+0xb8>)
 80012ae:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = JOYSTICK_OX_Pin|JOYSTICK_OY_Pin;
 80012b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b4:	f000 fdbe 	bl	8001e34 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 80012b8:	4910      	ldr	r1, [pc, #64]	@ (80012fc <HAL_ADC_MspInit+0xbc>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012ba:	2280      	movs	r2, #128	@ 0x80
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012c0:	e9c6 1400 	strd	r1, r4, [r6]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012c4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012c8:	4630      	mov	r0, r6
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80012ca:	e9c6 4406 	strd	r4, r4, [r6, #24]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012ce:	e9c6 2303 	strd	r2, r3, [r6, #12]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012d2:	60b4      	str	r4, [r6, #8]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012d4:	6171      	str	r1, [r6, #20]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012d6:	f000 fc9d 	bl	8001c14 <HAL_DMA_Init>
 80012da:	b918      	cbnz	r0, 80012e4 <HAL_ADC_MspInit+0xa4>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80012dc:	622e      	str	r6, [r5, #32]
 80012de:	6275      	str	r5, [r6, #36]	@ 0x24
}
 80012e0:	b008      	add	sp, #32
 80012e2:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80012e4:	f7ff ff74 	bl	80011d0 <Error_Handler>
 80012e8:	e7f8      	b.n	80012dc <HAL_ADC_MspInit+0x9c>
 80012ea:	bf00      	nop
 80012ec:	40012400 	.word	0x40012400
 80012f0:	40010800 	.word	0x40010800
 80012f4:	20000784 	.word	0x20000784
 80012f8:	40010c00 	.word	0x40010c00
 80012fc:	40020008 	.word	0x40020008

08001300 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8001300:	4b0c      	ldr	r3, [pc, #48]	@ (8001334 <HAL_RTC_MspInit+0x34>)
 8001302:	6802      	ldr	r2, [r0, #0]
 8001304:	429a      	cmp	r2, r3
 8001306:	d000      	beq.n	800130a <HAL_RTC_MspInit+0xa>
 8001308:	4770      	bx	lr
{
 800130a:	b500      	push	{lr}
 800130c:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800130e:	f000 feb1 	bl	8002074 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001312:	2001      	movs	r0, #1
    __HAL_RCC_BKP_CLK_ENABLE();
 8001314:	4b08      	ldr	r3, [pc, #32]	@ (8001338 <HAL_RTC_MspInit+0x38>)
    __HAL_RCC_RTC_ENABLE();
 8001316:	4909      	ldr	r1, [pc, #36]	@ (800133c <HAL_RTC_MspInit+0x3c>)
    __HAL_RCC_BKP_CLK_ENABLE();
 8001318:	69da      	ldr	r2, [r3, #28]
 800131a:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 800131e:	61da      	str	r2, [r3, #28]
 8001320:	69db      	ldr	r3, [r3, #28]
 8001322:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001326:	9301      	str	r3, [sp, #4]
 8001328:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_RTC_ENABLE();
 800132a:	f8c1 043c 	str.w	r0, [r1, #1084]	@ 0x43c

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800132e:	b003      	add	sp, #12
 8001330:	f85d fb04 	ldr.w	pc, [sp], #4
 8001334:	40002800 	.word	0x40002800
 8001338:	40021000 	.word	0x40021000
 800133c:	42420000 	.word	0x42420000

08001340 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001340:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001342:	2400      	movs	r4, #0
  if(hspi->Instance==SPI1)
 8001344:	4a2a      	ldr	r2, [pc, #168]	@ (80013f0 <HAL_SPI_MspInit+0xb0>)
 8001346:	6803      	ldr	r3, [r0, #0]
{
 8001348:	b089      	sub	sp, #36	@ 0x24
  if(hspi->Instance==SPI1)
 800134a:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134c:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001350:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(hspi->Instance==SPI1)
 8001354:	d004      	beq.n	8001360 <HAL_SPI_MspInit+0x20>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(hspi->Instance==SPI2)
 8001356:	4a27      	ldr	r2, [pc, #156]	@ (80013f4 <HAL_SPI_MspInit+0xb4>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d029      	beq.n	80013b0 <HAL_SPI_MspInit+0x70>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800135c:	b009      	add	sp, #36	@ 0x24
 800135e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001360:	4b25      	ldr	r3, [pc, #148]	@ (80013f8 <HAL_SPI_MspInit+0xb8>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8001362:	26b0      	movs	r6, #176	@ 0xb0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001364:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8001366:	2702      	movs	r7, #2
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001368:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800136c:	619a      	str	r2, [r3, #24]
 800136e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001370:	a904      	add	r1, sp, #16
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001372:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001376:	9200      	str	r2, [sp, #0]
 8001378:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137c:	481f      	ldr	r0, [pc, #124]	@ (80013fc <HAL_SPI_MspInit+0xbc>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137e:	f042 0204 	orr.w	r2, r2, #4
 8001382:	619a      	str	r2, [r3, #24]
 8001384:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8001386:	e9cd 6704 	strd	r6, r7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138a:	f003 0304 	and.w	r3, r3, #4
 800138e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001390:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001392:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001394:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001396:	f000 fd4d 	bl	8001e34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800139a:	2240      	movs	r2, #64	@ 0x40
 800139c:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139e:	4817      	ldr	r0, [pc, #92]	@ (80013fc <HAL_SPI_MspInit+0xbc>)
 80013a0:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a8:	f000 fd44 	bl	8001e34 <HAL_GPIO_Init>
}
 80013ac:	b009      	add	sp, #36	@ 0x24
 80013ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    GPIO_InitStruct.Pin = DISP_SPI_CS_Pin|DISP_SPI_SCK_Pin|DISP_SPI_MOSI_Pin;
 80013b0:	f44f 4430 	mov.w	r4, #45056	@ 0xb000
 80013b4:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013b6:	2603      	movs	r6, #3
    __HAL_RCC_SPI2_CLK_ENABLE();
 80013b8:	4b0f      	ldr	r3, [pc, #60]	@ (80013f8 <HAL_SPI_MspInit+0xb8>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ba:	4811      	ldr	r0, [pc, #68]	@ (8001400 <HAL_SPI_MspInit+0xc0>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 80013bc:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013be:	a904      	add	r1, sp, #16
    __HAL_RCC_SPI2_CLK_ENABLE();
 80013c0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80013c4:	61da      	str	r2, [r3, #28]
 80013c6:	69da      	ldr	r2, [r3, #28]
 80013c8:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80013cc:	9202      	str	r2, [sp, #8]
 80013ce:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d0:	699a      	ldr	r2, [r3, #24]
 80013d2:	f042 0208 	orr.w	r2, r2, #8
 80013d6:	619a      	str	r2, [r3, #24]
 80013d8:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = DISP_SPI_CS_Pin|DISP_SPI_SCK_Pin|DISP_SPI_MOSI_Pin;
 80013da:	e9cd 4504 	strd	r4, r5, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013de:	f003 0308 	and.w	r3, r3, #8
 80013e2:	9303      	str	r3, [sp, #12]
 80013e4:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013e6:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e8:	f000 fd24 	bl	8001e34 <HAL_GPIO_Init>
}
 80013ec:	b009      	add	sp, #36	@ 0x24
 80013ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013f0:	40013000 	.word	0x40013000
 80013f4:	40003800 	.word	0x40003800
 80013f8:	40021000 	.word	0x40021000
 80013fc:	40010800 	.word	0x40010800
 8001400:	40010c00 	.word	0x40010c00

08001404 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8001404:	4b09      	ldr	r3, [pc, #36]	@ (800142c <HAL_TIM_Base_MspInit+0x28>)
 8001406:	6802      	ldr	r2, [r0, #0]
 8001408:	429a      	cmp	r2, r3
 800140a:	d000      	beq.n	800140e <HAL_TIM_Base_MspInit+0xa>
 800140c:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800140e:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8001412:	699a      	ldr	r2, [r3, #24]
{
 8001414:	b082      	sub	sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001416:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800141a:	619a      	str	r2, [r3, #24]
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001422:	9301      	str	r3, [sp, #4]
 8001424:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001426:	b002      	add	sp, #8
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	40012c00 	.word	0x40012c00

08001430 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001430:	2300      	movs	r3, #0
{
 8001432:	b570      	push	{r4, r5, r6, lr}
  if(htim->Instance==TIM1)
 8001434:	4a12      	ldr	r2, [pc, #72]	@ (8001480 <HAL_TIM_MspPostInit+0x50>)
 8001436:	6801      	ldr	r1, [r0, #0]
{
 8001438:	b086      	sub	sp, #24
  if(htim->Instance==TIM1)
 800143a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001440:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(htim->Instance==TIM1)
 8001444:	d001      	beq.n	800144a <HAL_TIM_MspPostInit+0x1a>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001446:	b006      	add	sp, #24
 8001448:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800144a:	f44f 7480 	mov.w	r4, #256	@ 0x100
 800144e:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001450:	2602      	movs	r6, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001452:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001456:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 800145a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145c:	4809      	ldr	r0, [pc, #36]	@ (8001484 <HAL_TIM_MspPostInit+0x54>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800145e:	f042 0204 	orr.w	r2, r2, #4
 8001462:	619a      	str	r2, [r3, #24]
 8001464:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001466:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001468:	f003 0304 	and.w	r3, r3, #4
 800146c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800146e:	e9cd 4502 	strd	r4, r5, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001472:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001474:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001476:	f000 fcdd 	bl	8001e34 <HAL_GPIO_Init>
}
 800147a:	b006      	add	sp, #24
 800147c:	bd70      	pop	{r4, r5, r6, pc}
 800147e:	bf00      	nop
 8001480:	40012c00 	.word	0x40012c00
 8001484:	40010800 	.word	0x40010800

08001488 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001488:	e7fe      	b.n	8001488 <NMI_Handler>
 800148a:	bf00      	nop

0800148c <HardFault_Handler>:
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  	return;
    /* USER CODE END W1_HardFault_IRQn 0 */
  }
}
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop

08001490 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001490:	e7fe      	b.n	8001490 <MemManage_Handler>
 8001492:	bf00      	nop

08001494 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001494:	e7fe      	b.n	8001494 <BusFault_Handler>
 8001496:	bf00      	nop

08001498 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001498:	e7fe      	b.n	8001498 <UsageFault_Handler>
 800149a:	bf00      	nop

0800149c <SVC_Handler>:
}

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop

080014a0 <DebugMon_Handler>:
}

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop

080014a4 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop

080014a8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014a8:	f7ff be42 	b.w	8001130 <HAL_IncTick>

080014ac <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80014ac:	4801      	ldr	r0, [pc, #4]	@ (80014b4 <DMA1_Channel1_IRQHandler+0x8>)
 80014ae:	f000 bc2b 	b.w	8001d08 <HAL_DMA_IRQHandler>
 80014b2:	bf00      	nop
 80014b4:	20000784 	.word	0x20000784

080014b8 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80014b8:	2001      	movs	r0, #1
 80014ba:	4770      	bx	lr

080014bc <_kill>:

int _kill(int pid, int sig)
{
 80014bc:	b508      	push	{r3, lr}
	errno = EINVAL;
 80014be:	f002 fcc1 	bl	8003e44 <__errno>
 80014c2:	2216      	movs	r2, #22
 80014c4:	4603      	mov	r3, r0
	return -1;
}
 80014c6:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 80014ca:	601a      	str	r2, [r3, #0]
}
 80014cc:	bd08      	pop	{r3, pc}
 80014ce:	bf00      	nop

080014d0 <_exit>:

void _exit (int status)
{
 80014d0:	b508      	push	{r3, lr}
	errno = EINVAL;
 80014d2:	f002 fcb7 	bl	8003e44 <__errno>
 80014d6:	2316      	movs	r3, #22
 80014d8:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80014da:	e7fe      	b.n	80014da <_exit+0xa>

080014dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014dc:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014de:	1e16      	subs	r6, r2, #0
 80014e0:	dd07      	ble.n	80014f2 <_read+0x16>
 80014e2:	460c      	mov	r4, r1
 80014e4:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 80014e6:	f3af 8000 	nop.w
 80014ea:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ee:	42a5      	cmp	r5, r4
 80014f0:	d1f9      	bne.n	80014e6 <_read+0xa>
	}

return len;
}
 80014f2:	4630      	mov	r0, r6
 80014f4:	bd70      	pop	{r4, r5, r6, pc}
 80014f6:	bf00      	nop

080014f8 <_close>:
}

int _close(int file)
{
	return -1;
}
 80014f8:	f04f 30ff 	mov.w	r0, #4294967295
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop

08001500 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001500:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
	return 0;
}
 8001504:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001506:	604b      	str	r3, [r1, #4]
}
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop

0800150c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800150c:	2001      	movs	r0, #1
 800150e:	4770      	bx	lr

08001510 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001510:	2000      	movs	r0, #0
 8001512:	4770      	bx	lr

08001514 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001514:	490d      	ldr	r1, [pc, #52]	@ (800154c <_sbrk+0x38>)
{
 8001516:	4603      	mov	r3, r0
 8001518:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800151a:	4a0d      	ldr	r2, [pc, #52]	@ (8001550 <_sbrk+0x3c>)
 800151c:	4c0d      	ldr	r4, [pc, #52]	@ (8001554 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 800151e:	6808      	ldr	r0, [r1, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001520:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8001522:	b120      	cbz	r0, 800152e <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001524:	4403      	add	r3, r0
 8001526:	4293      	cmp	r3, r2
 8001528:	d807      	bhi.n	800153a <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800152a:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 800152c:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800152e:	4c0a      	ldr	r4, [pc, #40]	@ (8001558 <_sbrk+0x44>)
 8001530:	4620      	mov	r0, r4
  if (__sbrk_heap_end + incr > max_heap)
 8001532:	4403      	add	r3, r0
 8001534:	4293      	cmp	r3, r2
    __sbrk_heap_end = &_end;
 8001536:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8001538:	d9f7      	bls.n	800152a <_sbrk+0x16>
    errno = ENOMEM;
 800153a:	f002 fc83 	bl	8003e44 <__errno>
 800153e:	220c      	movs	r2, #12
 8001540:	4603      	mov	r3, r0
    return (void *)-1;
 8001542:	f04f 30ff 	mov.w	r0, #4294967295
    errno = ENOMEM;
 8001546:	601a      	str	r2, [r3, #0]
}
 8001548:	bd10      	pop	{r4, pc}
 800154a:	bf00      	nop
 800154c:	200009dc 	.word	0x200009dc
 8001550:	20005000 	.word	0x20005000
 8001554:	00000400 	.word	0x00000400
 8001558:	20000b30 	.word	0x20000b30

0800155c <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop

08001560 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001560:	480c      	ldr	r0, [pc, #48]	@ (8001594 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001562:	490d      	ldr	r1, [pc, #52]	@ (8001598 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001564:	4a0d      	ldr	r2, [pc, #52]	@ (800159c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001566:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001568:	e002      	b.n	8001570 <LoopCopyDataInit>

0800156a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800156a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800156c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800156e:	3304      	adds	r3, #4

08001570 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001570:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001572:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001574:	d3f9      	bcc.n	800156a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001576:	4a0a      	ldr	r2, [pc, #40]	@ (80015a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001578:	4c0a      	ldr	r4, [pc, #40]	@ (80015a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800157a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800157c:	e001      	b.n	8001582 <LoopFillZerobss>

0800157e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800157e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001580:	3204      	adds	r2, #4

08001582 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001582:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001584:	d3fb      	bcc.n	800157e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001586:	f7ff ffe9 	bl	800155c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800158a:	f002 fc61 	bl	8003e50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800158e:	f7ff fc2d 	bl	8000dec <main>
  bx lr
 8001592:	4770      	bx	lr
  ldr r0, =_sdata
 8001594:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001598:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800159c:	0800688c 	.word	0x0800688c
  ldr r2, =_sbss
 80015a0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80015a4:	20000b30 	.word	0x20000b30

080015a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015a8:	e7fe      	b.n	80015a8 <ADC1_2_IRQHandler>
	...

080015ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015ac:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015b2:	4a0d      	ldr	r2, [pc, #52]	@ (80015e8 <HAL_InitTick+0x3c>)
{
 80015b4:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015b6:	7811      	ldrb	r1, [r2, #0]
 80015b8:	4a0c      	ldr	r2, [pc, #48]	@ (80015ec <HAL_InitTick+0x40>)
 80015ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80015be:	6812      	ldr	r2, [r2, #0]
 80015c0:	fbb2 f0f3 	udiv	r0, r2, r3
 80015c4:	f000 fb0e 	bl	8001be4 <HAL_SYSTICK_Config>
 80015c8:	b908      	cbnz	r0, 80015ce <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ca:	2d0f      	cmp	r5, #15
 80015cc:	d901      	bls.n	80015d2 <HAL_InitTick+0x26>
    return HAL_ERROR;
 80015ce:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80015d0:	bd38      	pop	{r3, r4, r5, pc}
 80015d2:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015d4:	4602      	mov	r2, r0
 80015d6:	4629      	mov	r1, r5
 80015d8:	f04f 30ff 	mov.w	r0, #4294967295
 80015dc:	f000 fab8 	bl	8001b50 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015e0:	4b03      	ldr	r3, [pc, #12]	@ (80015f0 <HAL_InitTick+0x44>)
 80015e2:	4620      	mov	r0, r4
 80015e4:	601d      	str	r5, [r3, #0]
}
 80015e6:	bd38      	pop	{r3, r4, r5, pc}
 80015e8:	20000004 	.word	0x20000004
 80015ec:	20000000 	.word	0x20000000
 80015f0:	20000008 	.word	0x20000008

080015f4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015f4:	4a07      	ldr	r2, [pc, #28]	@ (8001614 <HAL_Init+0x20>)
{
 80015f6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015f8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015fa:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015fc:	f043 0310 	orr.w	r3, r3, #16
 8001600:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001602:	f000 fa93 	bl	8001b2c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001606:	200f      	movs	r0, #15
 8001608:	f7ff ffd0 	bl	80015ac <HAL_InitTick>
  HAL_MspInit();
 800160c:	f7ff fdf6 	bl	80011fc <HAL_MspInit>
}
 8001610:	2000      	movs	r0, #0
 8001612:	bd08      	pop	{r3, pc}
 8001614:	40022000 	.word	0x40022000

08001618 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001618:	4b01      	ldr	r3, [pc, #4]	@ (8001620 <HAL_GetTick+0x8>)
 800161a:	6818      	ldr	r0, [r3, #0]
}
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	200009e0 	.word	0x200009e0

08001624 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001624:	b538      	push	{r3, r4, r5, lr}
 8001626:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001628:	f7ff fff6 	bl	8001618 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800162c:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800162e:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8001630:	d002      	beq.n	8001638 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001632:	4b04      	ldr	r3, [pc, #16]	@ (8001644 <HAL_Delay+0x20>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001638:	f7ff ffee 	bl	8001618 <HAL_GetTick>
 800163c:	1b40      	subs	r0, r0, r5
 800163e:	42a0      	cmp	r0, r4
 8001640:	d3fa      	bcc.n	8001638 <HAL_Delay+0x14>
  {
  }
}
 8001642:	bd38      	pop	{r3, r4, r5, pc}
 8001644:	20000004 	.word	0x20000004

08001648 <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001648:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800164a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800164c:	f012 0f50 	tst.w	r2, #80	@ 0x50
 8001650:	d10f      	bne.n	8001672 <ADC_DMAConvCplt+0x2a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001652:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001654:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001656:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
{
 800165a:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800165c:	629a      	str	r2, [r3, #40]	@ 0x28
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800165e:	688a      	ldr	r2, [r1, #8]
 8001660:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 8001664:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 8001668:	d006      	beq.n	8001678 <ADC_DMAConvCplt+0x30>
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff fd8e 	bl	800118c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001670:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001672:	6a1b      	ldr	r3, [r3, #32]
 8001674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001676:	4718      	bx	r3
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001678:	7b1a      	ldrb	r2, [r3, #12]
 800167a:	2a00      	cmp	r2, #0
 800167c:	d1f5      	bne.n	800166a <ADC_DMAConvCplt+0x22>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800167e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001680:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001684:	629a      	str	r2, [r3, #40]	@ 0x28
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001686:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001688:	04d2      	lsls	r2, r2, #19
 800168a:	d4ee      	bmi.n	800166a <ADC_DMAConvCplt+0x22>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800168c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800168e:	f042 0201 	orr.w	r2, r2, #1
 8001692:	629a      	str	r2, [r3, #40]	@ 0x28
 8001694:	e7e9      	b.n	800166a <ADC_DMAConvCplt+0x22>
 8001696:	bf00      	nop

08001698 <HAL_ADC_ConvHalfCpltCallback>:
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop

0800169c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800169c:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800169e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80016a0:	f7ff fffa 	bl	8001698 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80016a4:	bd08      	pop	{r3, pc}
 80016a6:	bf00      	nop

080016a8 <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop

080016ac <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016ac:	6a40      	ldr	r0, [r0, #36]	@ 0x24
{
 80016ae:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80016b0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80016b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016b6:	6283      	str	r3, [r0, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80016b8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80016ba:	f043 0304 	orr.w	r3, r3, #4
 80016be:	62c3      	str	r3, [r0, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80016c0:	f7ff fff2 	bl	80016a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80016c4:	bd08      	pop	{r3, pc}
 80016c6:	bf00      	nop

080016c8 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 80016c8:	2200      	movs	r2, #0
{ 
 80016ca:	b530      	push	{r4, r5, lr}
 80016cc:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 80016ce:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80016d0:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 80016d4:	2a01      	cmp	r2, #1
 80016d6:	d066      	beq.n	80017a6 <HAL_ADC_ConfigChannel+0xde>
 80016d8:	4603      	mov	r3, r0
 80016da:	2001      	movs	r0, #1
 80016dc:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  if (sConfig->Rank < 7U)
 80016e0:	684c      	ldr	r4, [r1, #4]
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80016e2:	681a      	ldr	r2, [r3, #0]
  if (sConfig->Rank < 7U)
 80016e4:	2c06      	cmp	r4, #6
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80016e6:	6808      	ldr	r0, [r1, #0]
 80016e8:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
  if (sConfig->Rank < 7U)
 80016ec:	d92f      	bls.n	800174e <HAL_ADC_ConfigChannel+0x86>
  else if (sConfig->Rank < 13U)
 80016ee:	2c0c      	cmp	r4, #12
 80016f0:	d84b      	bhi.n	800178a <HAL_ADC_ConfigChannel+0xc2>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80016f2:	251f      	movs	r5, #31
 80016f4:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 80016f6:	f1ac 0c23 	sub.w	ip, ip, #35	@ 0x23
 80016fa:	fa05 f50c 	lsl.w	r5, r5, ip
 80016fe:	fa00 fe0c 	lsl.w	lr, r0, ip
 8001702:	ea24 0405 	bic.w	r4, r4, r5
 8001706:	ea44 040e 	orr.w	r4, r4, lr
 800170a:	6314      	str	r4, [r2, #48]	@ 0x30
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800170c:	2809      	cmp	r0, #9
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800170e:	6889      	ldr	r1, [r1, #8]
 8001710:	eb00 0440 	add.w	r4, r0, r0, lsl #1
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001714:	d92d      	bls.n	8001772 <HAL_ADC_ConfigChannel+0xaa>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001716:	f04f 0c07 	mov.w	ip, #7
 800171a:	3c1e      	subs	r4, #30
 800171c:	40a1      	lsls	r1, r4
 800171e:	fa0c fc04 	lsl.w	ip, ip, r4
 8001722:	68d4      	ldr	r4, [r2, #12]
 8001724:	ea24 040c 	bic.w	r4, r4, ip
 8001728:	4321      	orrs	r1, r4
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800172a:	f1a0 0410 	sub.w	r4, r0, #16
 800172e:	2c01      	cmp	r4, #1
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001730:	60d1      	str	r1, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001732:	d828      	bhi.n	8001786 <HAL_ADC_ConfigChannel+0xbe>
    if (hadc->Instance == ADC1)
 8001734:	492c      	ldr	r1, [pc, #176]	@ (80017e8 <HAL_ADC_ConfigChannel+0x120>)
 8001736:	428a      	cmp	r2, r1
 8001738:	d038      	beq.n	80017ac <HAL_ADC_ConfigChannel+0xe4>
      tmp_hal_status = HAL_ERROR;
 800173a:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800173c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800173e:	f042 0220 	orr.w	r2, r2, #32
 8001742:	629a      	str	r2, [r3, #40]	@ 0x28
  __HAL_UNLOCK(hadc);
 8001744:	2200      	movs	r2, #0
 8001746:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 800174a:	b003      	add	sp, #12
 800174c:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800174e:	f04f 0e1f 	mov.w	lr, #31
 8001752:	6b54      	ldr	r4, [r2, #52]	@ 0x34
 8001754:	f1ac 0c05 	sub.w	ip, ip, #5
 8001758:	fa00 f50c 	lsl.w	r5, r0, ip
 800175c:	fa0e fc0c 	lsl.w	ip, lr, ip
 8001760:	ea24 040c 	bic.w	r4, r4, ip
 8001764:	432c      	orrs	r4, r5
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001766:	2809      	cmp	r0, #9
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001768:	6354      	str	r4, [r2, #52]	@ 0x34
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800176a:	6889      	ldr	r1, [r1, #8]
 800176c:	eb00 0440 	add.w	r4, r0, r0, lsl #1
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001770:	d8d1      	bhi.n	8001716 <HAL_ADC_ConfigChannel+0x4e>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001772:	f04f 0c07 	mov.w	ip, #7
 8001776:	6910      	ldr	r0, [r2, #16]
 8001778:	40a1      	lsls	r1, r4
 800177a:	fa0c f404 	lsl.w	r4, ip, r4
 800177e:	ea20 0004 	bic.w	r0, r0, r4
 8001782:	4301      	orrs	r1, r0
 8001784:	6111      	str	r1, [r2, #16]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001786:	2000      	movs	r0, #0
 8001788:	e7dc      	b.n	8001744 <HAL_ADC_ConfigChannel+0x7c>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800178a:	251f      	movs	r5, #31
 800178c:	6ad4      	ldr	r4, [r2, #44]	@ 0x2c
 800178e:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8001792:	fa05 f50c 	lsl.w	r5, r5, ip
 8001796:	fa00 fe0c 	lsl.w	lr, r0, ip
 800179a:	ea24 0405 	bic.w	r4, r4, r5
 800179e:	ea44 040e 	orr.w	r4, r4, lr
 80017a2:	62d4      	str	r4, [r2, #44]	@ 0x2c
 80017a4:	e7b2      	b.n	800170c <HAL_ADC_ConfigChannel+0x44>
  __HAL_LOCK(hadc);
 80017a6:	2002      	movs	r0, #2
}
 80017a8:	b003      	add	sp, #12
 80017aa:	bd30      	pop	{r4, r5, pc}
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80017ac:	6891      	ldr	r1, [r2, #8]
 80017ae:	0209      	lsls	r1, r1, #8
 80017b0:	d4e9      	bmi.n	8001786 <HAL_ADC_ConfigChannel+0xbe>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80017b2:	6891      	ldr	r1, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017b4:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80017b6:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80017ba:	6091      	str	r1, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017bc:	d1e3      	bne.n	8001786 <HAL_ADC_ConfigChannel+0xbe>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017be:	4a0b      	ldr	r2, [pc, #44]	@ (80017ec <HAL_ADC_ConfigChannel+0x124>)
 80017c0:	490b      	ldr	r1, [pc, #44]	@ (80017f0 <HAL_ADC_ConfigChannel+0x128>)
 80017c2:	6812      	ldr	r2, [r2, #0]
 80017c4:	fba1 1202 	umull	r1, r2, r1, r2
 80017c8:	0c92      	lsrs	r2, r2, #18
 80017ca:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80017ce:	0052      	lsls	r2, r2, #1
 80017d0:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 80017d2:	9a01      	ldr	r2, [sp, #4]
 80017d4:	2a00      	cmp	r2, #0
 80017d6:	d0d6      	beq.n	8001786 <HAL_ADC_ConfigChannel+0xbe>
            wait_loop_index--;
 80017d8:	9a01      	ldr	r2, [sp, #4]
 80017da:	3a01      	subs	r2, #1
 80017dc:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 80017de:	9a01      	ldr	r2, [sp, #4]
 80017e0:	2a00      	cmp	r2, #0
 80017e2:	d1f9      	bne.n	80017d8 <HAL_ADC_ConfigChannel+0x110>
 80017e4:	e7cf      	b.n	8001786 <HAL_ADC_ConfigChannel+0xbe>
 80017e6:	bf00      	nop
 80017e8:	40012400 	.word	0x40012400
 80017ec:	20000000 	.word	0x20000000
 80017f0:	431bde83 	.word	0x431bde83

080017f4 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 80017f4:	2300      	movs	r3, #0
{
 80017f6:	b530      	push	{r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017f8:	6802      	ldr	r2, [r0, #0]
{
 80017fa:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 80017fc:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017fe:	6893      	ldr	r3, [r2, #8]
 8001800:	07d9      	lsls	r1, r3, #31
 8001802:	d427      	bmi.n	8001854 <ADC_Enable+0x60>
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001804:	4b1b      	ldr	r3, [pc, #108]	@ (8001874 <ADC_Enable+0x80>)
 8001806:	4604      	mov	r4, r0
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	481b      	ldr	r0, [pc, #108]	@ (8001878 <ADC_Enable+0x84>)
    __HAL_ADC_ENABLE(hadc);
 800180c:	6891      	ldr	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800180e:	fba0 0303 	umull	r0, r3, r0, r3
    __HAL_ADC_ENABLE(hadc);
 8001812:	f041 0101 	orr.w	r1, r1, #1
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001816:	0c9b      	lsrs	r3, r3, #18
    __HAL_ADC_ENABLE(hadc);
 8001818:	6091      	str	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800181a:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800181c:	9b01      	ldr	r3, [sp, #4]
 800181e:	b12b      	cbz	r3, 800182c <ADC_Enable+0x38>
      wait_loop_index--;
 8001820:	9b01      	ldr	r3, [sp, #4]
 8001822:	3b01      	subs	r3, #1
 8001824:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001826:	9b01      	ldr	r3, [sp, #4]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d1f9      	bne.n	8001820 <ADC_Enable+0x2c>
    tickstart = HAL_GetTick();
 800182c:	f7ff fef4 	bl	8001618 <HAL_GetTick>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001830:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001832:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	07da      	lsls	r2, r3, #31
 8001838:	d40c      	bmi.n	8001854 <ADC_Enable+0x60>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800183a:	f7ff feed 	bl	8001618 <HAL_GetTick>
 800183e:	1b43      	subs	r3, r0, r5
 8001840:	2b02      	cmp	r3, #2
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001842:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001844:	d903      	bls.n	800184e <ADC_Enable+0x5a>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001846:	689a      	ldr	r2, [r3, #8]
 8001848:	f012 0201 	ands.w	r2, r2, #1
 800184c:	d005      	beq.n	800185a <ADC_Enable+0x66>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	07db      	lsls	r3, r3, #31
 8001852:	d5f2      	bpl.n	800183a <ADC_Enable+0x46>
  return HAL_OK;
 8001854:	2000      	movs	r0, #0
}
 8001856:	b003      	add	sp, #12
 8001858:	bd30      	pop	{r4, r5, pc}
          return HAL_ERROR;
 800185a:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800185c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
          __HAL_UNLOCK(hadc);
 800185e:	f884 2024 	strb.w	r2, [r4, #36]	@ 0x24
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001862:	f043 0310 	orr.w	r3, r3, #16
 8001866:	62a3      	str	r3, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001868:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800186a:	4303      	orrs	r3, r0
 800186c:	62e3      	str	r3, [r4, #44]	@ 0x2c
}
 800186e:	b003      	add	sp, #12
 8001870:	bd30      	pop	{r4, r5, pc}
 8001872:	bf00      	nop
 8001874:	20000000 	.word	0x20000000
 8001878:	431bde83 	.word	0x431bde83

0800187c <HAL_ADC_Start_DMA>:
{
 800187c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800187e:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001880:	4d3e      	ldr	r5, [pc, #248]	@ (800197c <HAL_ADC_Start_DMA+0x100>)
 8001882:	6800      	ldr	r0, [r0, #0]
{
 8001884:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001886:	42a8      	cmp	r0, r5
{
 8001888:	4616      	mov	r6, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800188a:	d059      	beq.n	8001940 <HAL_ADC_Start_DMA+0xc4>
 800188c:	4b3c      	ldr	r3, [pc, #240]	@ (8001980 <HAL_ADC_Start_DMA+0x104>)
 800188e:	4298      	cmp	r0, r3
 8001890:	d056      	beq.n	8001940 <HAL_ADC_Start_DMA+0xc4>
    __HAL_LOCK(hadc);
 8001892:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8001896:	2b01      	cmp	r3, #1
 8001898:	d05f      	beq.n	800195a <HAL_ADC_Start_DMA+0xde>
 800189a:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 800189c:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 800189e:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    tmp_hal_status = ADC_Enable(hadc);
 80018a2:	f7ff ffa7 	bl	80017f4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80018a6:	4605      	mov	r5, r0
 80018a8:	2800      	cmp	r0, #0
 80018aa:	d151      	bne.n	8001950 <HAL_ADC_Start_DMA+0xd4>
      ADC_STATE_CLR_SET(hadc->State,
 80018ac:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80018ae:	6821      	ldr	r1, [r4, #0]
 80018b0:	4b33      	ldr	r3, [pc, #204]	@ (8001980 <HAL_ADC_Start_DMA+0x104>)
      ADC_STATE_CLR_SET(hadc->State,
 80018b2:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00
 80018b6:	f020 0001 	bic.w	r0, r0, #1
 80018ba:	f440 7080 	orr.w	r0, r0, #256	@ 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80018be:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 80018c0:	62a0      	str	r0, [r4, #40]	@ 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80018c2:	d04d      	beq.n	8001960 <HAL_ADC_Start_DMA+0xe4>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018c4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80018c6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80018ca:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018cc:	684b      	ldr	r3, [r1, #4]
 80018ce:	055a      	lsls	r2, r3, #21
 80018d0:	d505      	bpl.n	80018de <HAL_ADC_Start_DMA+0x62>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018d2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80018d4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80018d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80018dc:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018de:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
      __HAL_UNLOCK(hadc);
 80018e0:	2000      	movs	r0, #0
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018e2:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80018e6:	bf18      	it	ne
 80018e8:	6ae3      	ldrne	r3, [r4, #44]	@ 0x2c
      __HAL_UNLOCK(hadc);
 80018ea:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80018ee:	bf18      	it	ne
 80018f0:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 80018f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80018f6:	4633      	mov	r3, r6
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80018f8:	f06f 0602 	mvn.w	r6, #2
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80018fc:	6a20      	ldr	r0, [r4, #32]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80018fe:	463a      	mov	r2, r7
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001900:	4f20      	ldr	r7, [pc, #128]	@ (8001984 <HAL_ADC_Start_DMA+0x108>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001902:	314c      	adds	r1, #76	@ 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001904:	6287      	str	r7, [r0, #40]	@ 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001906:	4f20      	ldr	r7, [pc, #128]	@ (8001988 <HAL_ADC_Start_DMA+0x10c>)
 8001908:	62c7      	str	r7, [r0, #44]	@ 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800190a:	4f20      	ldr	r7, [pc, #128]	@ (800198c <HAL_ADC_Start_DMA+0x110>)
 800190c:	6307      	str	r7, [r0, #48]	@ 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800190e:	f841 6c4c 	str.w	r6, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001912:	f851 6c44 	ldr.w	r6, [r1, #-68]
 8001916:	f446 7680 	orr.w	r6, r6, #256	@ 0x100
 800191a:	f841 6c44 	str.w	r6, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800191e:	f000 f9b1 	bl	8001c84 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001922:	6823      	ldr	r3, [r4, #0]
}
 8001924:	4628      	mov	r0, r5
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001926:	689a      	ldr	r2, [r3, #8]
 8001928:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 800192c:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001930:	689a      	ldr	r2, [r3, #8]
 8001932:	bf0c      	ite	eq
 8001934:	f442 02a0 	orreq.w	r2, r2, #5242880	@ 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001938:	f442 1280 	orrne.w	r2, r2, #1048576	@ 0x100000
 800193c:	609a      	str	r2, [r3, #8]
}
 800193e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001940:	4b0e      	ldr	r3, [pc, #56]	@ (800197c <HAL_ADC_Start_DMA+0x100>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f413 2f70 	tst.w	r3, #983040	@ 0xf0000
 8001948:	d0a3      	beq.n	8001892 <HAL_ADC_Start_DMA+0x16>
    tmp_hal_status = HAL_ERROR;
 800194a:	2501      	movs	r5, #1
}
 800194c:	4628      	mov	r0, r5
 800194e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_UNLOCK(hadc);
 8001950:	2300      	movs	r3, #0
 8001952:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
}
 8001956:	4628      	mov	r0, r5
 8001958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 800195a:	2502      	movs	r5, #2
}
 800195c:	4628      	mov	r0, r5
 800195e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001960:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8001964:	685a      	ldr	r2, [r3, #4]
 8001966:	f412 2f70 	tst.w	r2, #983040	@ 0xf0000
 800196a:	d0ab      	beq.n	80018c4 <HAL_ADC_Start_DMA+0x48>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800196c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800196e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001972:	62a2      	str	r2, [r4, #40]	@ 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	055b      	lsls	r3, r3, #21
 8001978:	d5b1      	bpl.n	80018de <HAL_ADC_Start_DMA+0x62>
 800197a:	e7aa      	b.n	80018d2 <HAL_ADC_Start_DMA+0x56>
 800197c:	40012400 	.word	0x40012400
 8001980:	40012800 	.word	0x40012800
 8001984:	08001649 	.word	0x08001649
 8001988:	0800169d 	.word	0x0800169d
 800198c:	080016ad 	.word	0x080016ad

08001990 <ADC_ConversionStop_Disable>:
{
 8001990:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001992:	6803      	ldr	r3, [r0, #0]
 8001994:	689a      	ldr	r2, [r3, #8]
 8001996:	07d4      	lsls	r4, r2, #31
 8001998:	d401      	bmi.n	800199e <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 800199a:	2000      	movs	r0, #0
}
 800199c:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 800199e:	4604      	mov	r4, r0
 80019a0:	689a      	ldr	r2, [r3, #8]
 80019a2:	f022 0201 	bic.w	r2, r2, #1
 80019a6:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80019a8:	f7ff fe36 	bl	8001618 <HAL_GetTick>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80019ac:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80019ae:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	07d9      	lsls	r1, r3, #31
 80019b4:	d5f1      	bpl.n	800199a <ADC_ConversionStop_Disable+0xa>
 80019b6:	e002      	b.n	80019be <ADC_ConversionStop_Disable+0x2e>
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	07db      	lsls	r3, r3, #31
 80019bc:	d5ed      	bpl.n	800199a <ADC_ConversionStop_Disable+0xa>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80019be:	f7ff fe2b 	bl	8001618 <HAL_GetTick>
 80019c2:	1b43      	subs	r3, r0, r5
 80019c4:	2b02      	cmp	r3, #2
        if(ADC_IS_ENABLE(hadc) != RESET)
 80019c6:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80019c8:	d9f6      	bls.n	80019b8 <ADC_ConversionStop_Disable+0x28>
        if(ADC_IS_ENABLE(hadc) != RESET)
 80019ca:	689a      	ldr	r2, [r3, #8]
 80019cc:	07d2      	lsls	r2, r2, #31
 80019ce:	d5f3      	bpl.n	80019b8 <ADC_ConversionStop_Disable+0x28>
          return HAL_ERROR;
 80019d0:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019d2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80019d4:	f043 0310 	orr.w	r3, r3, #16
 80019d8:	62a3      	str	r3, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019da:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80019dc:	4303      	orrs	r3, r0
 80019de:	62e3      	str	r3, [r4, #44]	@ 0x2c
}
 80019e0:	bd38      	pop	{r3, r4, r5, pc}
 80019e2:	bf00      	nop

080019e4 <HAL_ADC_Init>:
  if(hadc == NULL)
 80019e4:	2800      	cmp	r0, #0
 80019e6:	d06f      	beq.n	8001ac8 <HAL_ADC_Init+0xe4>
{
 80019e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019ea:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80019ec:	4604      	mov	r4, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d052      	beq.n	8001a98 <HAL_ADC_Init+0xb4>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80019f2:	4620      	mov	r0, r4
 80019f4:	f7ff ffcc 	bl	8001990 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80019f8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80019fa:	f013 0310 	ands.w	r3, r3, #16
 80019fe:	d145      	bne.n	8001a8c <HAL_ADC_Init+0xa8>
 8001a00:	2800      	cmp	r0, #0
 8001a02:	d143      	bne.n	8001a8c <HAL_ADC_Init+0xa8>
    ADC_STATE_CLR_SET(hadc->State,
 8001a04:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a06:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8001a08:	f422 5288 	bic.w	r2, r2, #4352	@ 0x1100
 8001a0c:	f022 0202 	bic.w	r2, r2, #2
 8001a10:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001a14:	68a5      	ldr	r5, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8001a16:	62a2      	str	r2, [r4, #40]	@ 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a18:	69e2      	ldr	r2, [r4, #28]
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001a1a:	7b26      	ldrb	r6, [r4, #12]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a1c:	4311      	orrs	r1, r2
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001a1e:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8001a22:	6822      	ldr	r2, [r4, #0]
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a24:	f894 e014 	ldrb.w	lr, [r4, #20]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a28:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001a2c:	d03a      	beq.n	8001aa4 <HAL_ADC_Init+0xc0>
 8001a2e:	f1a5 0c01 	sub.w	ip, r5, #1
 8001a32:	fabc fc8c 	clz	ip, ip
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a36:	f1be 0f01 	cmp.w	lr, #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001a3a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8001a3e:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a42:	d044      	beq.n	8001ace <HAL_ADC_Init+0xea>
      MODIFY_REG(hadc->Instance->CR1,
 8001a44:	6856      	ldr	r6, [r2, #4]
 8001a46:	f426 4669 	bic.w	r6, r6, #59648	@ 0xe900
 8001a4a:	ea46 060c 	orr.w	r6, r6, ip
 8001a4e:	6056      	str	r6, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8001a50:	6897      	ldr	r7, [r2, #8]
 8001a52:	4e34      	ldr	r6, [pc, #208]	@ (8001b24 <HAL_ADC_Init+0x140>)
 8001a54:	403e      	ands	r6, r7
 8001a56:	430e      	orrs	r6, r1
 8001a58:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001a5a:	2d01      	cmp	r5, #1
 8001a5c:	d030      	beq.n	8001ac0 <HAL_ADC_Init+0xdc>
    MODIFY_REG(hadc->Instance->SQR1,
 8001a5e:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
 8001a60:	f425 0c70 	bic.w	ip, r5, #15728640	@ 0xf00000
 8001a64:	ea4c 0303 	orr.w	r3, ip, r3
 8001a68:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a6a:	6892      	ldr	r2, [r2, #8]
 8001a6c:	4b2e      	ldr	r3, [pc, #184]	@ (8001b28 <HAL_ADC_Init+0x144>)
 8001a6e:	4013      	ands	r3, r2
 8001a70:	4299      	cmp	r1, r3
 8001a72:	d046      	beq.n	8001b02 <HAL_ADC_Init+0x11e>
      ADC_STATE_CLR_SET(hadc->State,
 8001a74:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    return HAL_ERROR;
 8001a76:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8001a78:	f023 0312 	bic.w	r3, r3, #18
 8001a7c:	f043 0310 	orr.w	r3, r3, #16
 8001a80:	62a3      	str	r3, [r4, #40]	@ 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a82:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001a84:	f043 0301 	orr.w	r3, r3, #1
 8001a88:	62e3      	str	r3, [r4, #44]	@ 0x2c
}
 8001a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a8c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    return HAL_ERROR;
 8001a8e:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a90:	f043 0310 	orr.w	r3, r3, #16
 8001a94:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8001a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ADC_CLEAR_ERRORCODE(hadc);
 8001a98:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8001a9a:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    HAL_ADC_MspInit(hadc);
 8001a9e:	f7ff fbcf 	bl	8001240 <HAL_ADC_MspInit>
 8001aa2:	e7a6      	b.n	80019f2 <HAL_ADC_Init+0xe>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001aa4:	f1be 0f01 	cmp.w	lr, #1
 8001aa8:	d010      	beq.n	8001acc <HAL_ADC_Init+0xe8>
      MODIFY_REG(hadc->Instance->CR1,
 8001aaa:	6853      	ldr	r3, [r2, #4]
 8001aac:	f423 4369 	bic.w	r3, r3, #59648	@ 0xe900
 8001ab0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ab4:	6053      	str	r3, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8001ab6:	6895      	ldr	r5, [r2, #8]
 8001ab8:	4b1a      	ldr	r3, [pc, #104]	@ (8001b24 <HAL_ADC_Init+0x140>)
 8001aba:	402b      	ands	r3, r5
 8001abc:	430b      	orrs	r3, r1
 8001abe:	6093      	str	r3, [r2, #8]
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001ac0:	6923      	ldr	r3, [r4, #16]
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	051b      	lsls	r3, r3, #20
 8001ac6:	e7ca      	b.n	8001a5e <HAL_ADC_Init+0x7a>
    return HAL_ERROR;
 8001ac8:	2001      	movs	r0, #1
}
 8001aca:	4770      	bx	lr
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001acc:	46ac      	mov	ip, r5
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ace:	b30e      	cbz	r6, 8001b14 <HAL_ADC_Init+0x130>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ad0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001ad2:	f046 0620 	orr.w	r6, r6, #32
 8001ad6:	62a6      	str	r6, [r4, #40]	@ 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ad8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001ada:	f046 0601 	orr.w	r6, r6, #1
 8001ade:	62e6      	str	r6, [r4, #44]	@ 0x2c
      MODIFY_REG(hadc->Instance->CR1,
 8001ae0:	6856      	ldr	r6, [r2, #4]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001ae2:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8001ae6:	f426 4669 	bic.w	r6, r6, #59648	@ 0xe900
 8001aea:	ea46 060c 	orr.w	r6, r6, ip
 8001aee:	6056      	str	r6, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8001af0:	6897      	ldr	r7, [r2, #8]
 8001af2:	4e0c      	ldr	r6, [pc, #48]	@ (8001b24 <HAL_ADC_Init+0x140>)
 8001af4:	ea06 0607 	and.w	r6, r6, r7
 8001af8:	ea46 0601 	orr.w	r6, r6, r1
 8001afc:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001afe:	d1ac      	bne.n	8001a5a <HAL_ADC_Init+0x76>
 8001b00:	e7de      	b.n	8001ac0 <HAL_ADC_Init+0xdc>
      ADC_CLEAR_ERRORCODE(hadc);
 8001b02:	2300      	movs	r3, #0
 8001b04:	62e3      	str	r3, [r4, #44]	@ 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8001b06:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001b08:	f023 0303 	bic.w	r3, r3, #3
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8001b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001b14:	69a6      	ldr	r6, [r4, #24]
 8001b16:	3e01      	subs	r6, #1
 8001b18:	ea4c 3646 	orr.w	r6, ip, r6, lsl #13
 8001b1c:	f446 6c00 	orr.w	ip, r6, #2048	@ 0x800
 8001b20:	e7de      	b.n	8001ae0 <HAL_ADC_Init+0xfc>
 8001b22:	bf00      	nop
 8001b24:	ffe1f7fd 	.word	0xffe1f7fd
 8001b28:	ff1f0efe 	.word	0xff1f0efe

08001b2c <HAL_NVIC_SetPriorityGrouping>:
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b2c:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b30:	4906      	ldr	r1, [pc, #24]	@ (8001b4c <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b32:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b34:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b36:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b3a:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001b48:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001b4a:	4770      	bx	lr
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b50:	4b1b      	ldr	r3, [pc, #108]	@ (8001bc0 <HAL_NVIC_SetPriority+0x70>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b52:	b500      	push	{lr}
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b5a:	f1c3 0e07 	rsb	lr, r3, #7
 8001b5e:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b62:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b66:	bf28      	it	cs
 8001b68:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b6c:	f1bc 0f06 	cmp.w	ip, #6
 8001b70:	d91c      	bls.n	8001bac <HAL_NVIC_SetPriority+0x5c>
 8001b72:	f1a3 0c03 	sub.w	ip, r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b76:	f04f 33ff 	mov.w	r3, #4294967295
 8001b7a:	fa03 f30c 	lsl.w	r3, r3, ip
 8001b7e:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b82:	f04f 33ff 	mov.w	r3, #4294967295
 8001b86:	fa03 f30e 	lsl.w	r3, r3, lr
 8001b8a:	ea21 0303 	bic.w	r3, r1, r3
 8001b8e:	fa03 f30c 	lsl.w	r3, r3, ip
 8001b92:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b94:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8001b96:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b98:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8001b9a:	db0a      	blt.n	8001bb2 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b9c:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001ba0:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001ba4:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001ba8:	f85d fb04 	ldr.w	pc, [sp], #4
 8001bac:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bae:	4694      	mov	ip, r2
 8001bb0:	e7e7      	b.n	8001b82 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb2:	4a04      	ldr	r2, [pc, #16]	@ (8001bc4 <HAL_NVIC_SetPriority+0x74>)
 8001bb4:	f000 000f 	and.w	r0, r0, #15
 8001bb8:	4402      	add	r2, r0
 8001bba:	7613      	strb	r3, [r2, #24]
 8001bbc:	f85d fb04 	ldr.w	pc, [sp], #4
 8001bc0:	e000ed00 	.word	0xe000ed00
 8001bc4:	e000ecfc 	.word	0xe000ecfc

08001bc8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001bc8:	2800      	cmp	r0, #0
 8001bca:	db07      	blt.n	8001bdc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bcc:	2301      	movs	r3, #1
 8001bce:	f000 011f 	and.w	r1, r0, #31
 8001bd2:	4a03      	ldr	r2, [pc, #12]	@ (8001be0 <HAL_NVIC_EnableIRQ+0x18>)
 8001bd4:	0940      	lsrs	r0, r0, #5
 8001bd6:	408b      	lsls	r3, r1
 8001bd8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	e000e100 	.word	0xe000e100

08001be4 <HAL_SYSTICK_Config>:
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001be4:	3801      	subs	r0, #1
 8001be6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8001bea:	d301      	bcc.n	8001bf0 <HAL_SYSTICK_Config+0xc>
    return (1UL);                                                   /* Reload value impossible */
 8001bec:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001bee:	4770      	bx	lr
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bf0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf4:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bf8:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bfa:	2107      	movs	r1, #7
{
 8001bfc:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bfe:	4c04      	ldr	r4, [pc, #16]	@ (8001c10 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c00:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c02:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  return (0UL);                                                     /* Function successful */
 8001c06:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c08:	619a      	str	r2, [r3, #24]
}
 8001c0a:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c0c:	6119      	str	r1, [r3, #16]
 8001c0e:	4770      	bx	lr
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001c14:	b370      	cbz	r0, 8001c74 <HAL_DMA_Init+0x60>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001c16:	4603      	mov	r3, r0
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c18:	2202      	movs	r2, #2
{
 8001c1a:	b530      	push	{r4, r5, lr}

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001c1c:	f04f 0c01 	mov.w	ip, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c20:	2400      	movs	r4, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001c22:	6800      	ldr	r0, [r0, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c24:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  tmp = hdma->Instance->CCR;
 8001c28:	6802      	ldr	r2, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c2a:	68dd      	ldr	r5, [r3, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001c2c:	f422 5e7f 	bic.w	lr, r2, #16320	@ 0x3fc0
  tmp |=  hdma->Init.Direction        |
 8001c30:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
 8001c34:	430a      	orrs	r2, r1
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001c36:	4910      	ldr	r1, [pc, #64]	@ (8001c78 <HAL_DMA_Init+0x64>)
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c38:	432a      	orrs	r2, r5
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001c3a:	4d10      	ldr	r5, [pc, #64]	@ (8001c7c <HAL_DMA_Init+0x68>)
 8001c3c:	4401      	add	r1, r0
 8001c3e:	fba5 5101 	umull	r5, r1, r5, r1
 8001c42:	0909      	lsrs	r1, r1, #4
 8001c44:	0089      	lsls	r1, r1, #2
 8001c46:	6419      	str	r1, [r3, #64]	@ 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c48:	6919      	ldr	r1, [r3, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001c4a:	f02e 0e30 	bic.w	lr, lr, #48	@ 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c4e:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c50:	6959      	ldr	r1, [r3, #20]
 8001c52:	430a      	orrs	r2, r1
 8001c54:	6999      	ldr	r1, [r3, #24]
 8001c56:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c58:	69d9      	ldr	r1, [r3, #28]
 8001c5a:	430a      	orrs	r2, r1
  hdma->DmaBaseAddress = DMA1;
 8001c5c:	4908      	ldr	r1, [pc, #32]	@ (8001c80 <HAL_DMA_Init+0x6c>)
  tmp |=  hdma->Init.Direction        |
 8001c5e:	ea42 020e 	orr.w	r2, r2, lr
  hdma->DmaBaseAddress = DMA1;
 8001c62:	63d9      	str	r1, [r3, #60]	@ 0x3c
  hdma->Instance->CCR = tmp;
 8001c64:	6002      	str	r2, [r0, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c66:	639c      	str	r4, [r3, #56]	@ 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001c68:	f883 4020 	strb.w	r4, [r3, #32]
  hdma->State = HAL_DMA_STATE_READY;
 8001c6c:	f883 c021 	strb.w	ip, [r3, #33]	@ 0x21

  return HAL_OK;
 8001c70:	4620      	mov	r0, r4
}
 8001c72:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8001c74:	2001      	movs	r0, #1
}
 8001c76:	4770      	bx	lr
 8001c78:	bffdfff8 	.word	0xbffdfff8
 8001c7c:	cccccccd 	.word	0xcccccccd
 8001c80:	40020000 	.word	0x40020000

08001c84 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c84:	b470      	push	{r4, r5, r6}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001c86:	f890 4020 	ldrb.w	r4, [r0, #32]
 8001c8a:	2c01      	cmp	r4, #1
 8001c8c:	d00b      	beq.n	8001ca6 <HAL_DMA_Start_IT+0x22>
 8001c8e:	2501      	movs	r5, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c90:	f890 4021 	ldrb.w	r4, [r0, #33]	@ 0x21
  __HAL_LOCK(hdma);
 8001c94:	f880 5020 	strb.w	r5, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c98:	42ac      	cmp	r4, r5
 8001c9a:	fa5f fc84 	uxtb.w	ip, r4
 8001c9e:	d005      	beq.n	8001cac <HAL_DMA_Start_IT+0x28>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	f880 3020 	strb.w	r3, [r0, #32]
  __HAL_LOCK(hdma);
 8001ca6:	2002      	movs	r0, #2

    /* Remain BUSY */
    status = HAL_BUSY;
  }    
  return status;
}
 8001ca8:	bc70      	pop	{r4, r5, r6}
 8001caa:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cac:	2402      	movs	r4, #2
 8001cae:	f880 4021 	strb.w	r4, [r0, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cb2:	2400      	movs	r4, #0
 8001cb4:	6384      	str	r4, [r0, #56]	@ 0x38
    __HAL_DMA_DISABLE(hdma);
 8001cb6:	6804      	ldr	r4, [r0, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001cb8:	6c05      	ldr	r5, [r0, #64]	@ 0x40
    __HAL_DMA_DISABLE(hdma);
 8001cba:	6826      	ldr	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001cbc:	fa0c f505 	lsl.w	r5, ip, r5
    __HAL_DMA_DISABLE(hdma);
 8001cc0:	f026 0601 	bic.w	r6, r6, #1
 8001cc4:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001cc6:	6bc6      	ldr	r6, [r0, #60]	@ 0x3c
 8001cc8:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001cca:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ccc:	6843      	ldr	r3, [r0, #4]
 8001cce:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8001cd0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001cd2:	bf0b      	itete	eq
 8001cd4:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001cd6:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001cd8:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001cda:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8001cdc:	b153      	cbz	r3, 8001cf4 <HAL_DMA_Start_IT+0x70>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cde:	6823      	ldr	r3, [r4, #0]
 8001ce0:	f043 030e 	orr.w	r3, r3, #14
 8001ce4:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001ce6:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ce8:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8001cea:	f043 0301 	orr.w	r3, r3, #1
 8001cee:	6023      	str	r3, [r4, #0]
}
 8001cf0:	bc70      	pop	{r4, r5, r6}
 8001cf2:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001cf4:	6823      	ldr	r3, [r4, #0]
 8001cf6:	f023 0304 	bic.w	r3, r3, #4
 8001cfa:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001cfc:	6823      	ldr	r3, [r4, #0]
 8001cfe:	f043 030a 	orr.w	r3, r3, #10
 8001d02:	6023      	str	r3, [r4, #0]
 8001d04:	e7ef      	b.n	8001ce6 <HAL_DMA_Start_IT+0x62>
 8001d06:	bf00      	nop

08001d08 <HAL_DMA_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001d08:	2204      	movs	r2, #4
{
 8001d0a:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d0c:	6bc6      	ldr	r6, [r0, #60]	@ 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001d0e:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d10:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001d12:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001d14:	408a      	lsls	r2, r1
 8001d16:	4222      	tst	r2, r4
  uint32_t source_it = hdma->Instance->CCR;
 8001d18:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001d1a:	d01f      	beq.n	8001d5c <HAL_DMA_IRQHandler+0x54>
 8001d1c:	076a      	lsls	r2, r5, #29
 8001d1e:	d51d      	bpl.n	8001d5c <HAL_DMA_IRQHandler+0x54>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	0691      	lsls	r1, r2, #26
 8001d24:	d403      	bmi.n	8001d2e <HAL_DMA_IRQHandler+0x26>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	f022 0204 	bic.w	r2, r2, #4
 8001d2c:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001d2e:	4a3f      	ldr	r2, [pc, #252]	@ (8001e2c <HAL_DMA_IRQHandler+0x124>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d05c      	beq.n	8001dee <HAL_DMA_IRQHandler+0xe6>
 8001d34:	3214      	adds	r2, #20
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d061      	beq.n	8001dfe <HAL_DMA_IRQHandler+0xf6>
 8001d3a:	3214      	adds	r2, #20
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d068      	beq.n	8001e12 <HAL_DMA_IRQHandler+0x10a>
 8001d40:	3214      	adds	r2, #20
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d06b      	beq.n	8001e1e <HAL_DMA_IRQHandler+0x116>
 8001d46:	3214      	adds	r2, #20
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d05d      	beq.n	8001e08 <HAL_DMA_IRQHandler+0x100>
 8001d4c:	3214      	adds	r2, #20
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	bf14      	ite	ne
 8001d52:	f04f 6280 	movne.w	r2, #67108864	@ 0x4000000
 8001d56:	f44f 0280 	moveq.w	r2, #4194304	@ 0x400000
 8001d5a:	e049      	b.n	8001df0 <HAL_DMA_IRQHandler+0xe8>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001d5c:	2202      	movs	r2, #2
 8001d5e:	408a      	lsls	r2, r1
 8001d60:	4222      	tst	r2, r4
 8001d62:	d022      	beq.n	8001daa <HAL_DMA_IRQHandler+0xa2>
 8001d64:	07aa      	lsls	r2, r5, #30
 8001d66:	d520      	bpl.n	8001daa <HAL_DMA_IRQHandler+0xa2>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	0691      	lsls	r1, r2, #26
 8001d6c:	d406      	bmi.n	8001d7c <HAL_DMA_IRQHandler+0x74>
      hdma->State = HAL_DMA_STATE_READY;
 8001d6e:	2101      	movs	r1, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	f022 020a 	bic.w	r2, r2, #10
 8001d76:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001d78:	f880 1021 	strb.w	r1, [r0, #33]	@ 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001d7c:	4a2b      	ldr	r2, [pc, #172]	@ (8001e2c <HAL_DMA_IRQHandler+0x124>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d02b      	beq.n	8001dda <HAL_DMA_IRQHandler+0xd2>
 8001d82:	3214      	adds	r2, #20
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d042      	beq.n	8001e0e <HAL_DMA_IRQHandler+0x106>
 8001d88:	3214      	adds	r2, #20
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d044      	beq.n	8001e18 <HAL_DMA_IRQHandler+0x110>
 8001d8e:	3214      	adds	r2, #20
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d036      	beq.n	8001e02 <HAL_DMA_IRQHandler+0xfa>
 8001d94:	3214      	adds	r2, #20
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d044      	beq.n	8001e24 <HAL_DMA_IRQHandler+0x11c>
 8001d9a:	3214      	adds	r2, #20
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	bf14      	ite	ne
 8001da0:	f04f 7200 	movne.w	r2, #33554432	@ 0x2000000
 8001da4:	f44f 1200 	moveq.w	r2, #2097152	@ 0x200000
 8001da8:	e018      	b.n	8001ddc <HAL_DMA_IRQHandler+0xd4>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001daa:	2208      	movs	r2, #8
 8001dac:	408a      	lsls	r2, r1
 8001dae:	4222      	tst	r2, r4
 8001db0:	d01b      	beq.n	8001dea <HAL_DMA_IRQHandler+0xe2>
 8001db2:	072a      	lsls	r2, r5, #28
 8001db4:	d519      	bpl.n	8001dea <HAL_DMA_IRQHandler+0xe2>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001db6:	681a      	ldr	r2, [r3, #0]
    __HAL_UNLOCK(hdma);
 8001db8:	2400      	movs	r4, #0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dba:	f022 020e 	bic.w	r2, r2, #14
 8001dbe:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001dc0:	2301      	movs	r3, #1
    if (hdma->XferErrorCallback != NULL)
 8001dc2:	6b02      	ldr	r2, [r0, #48]	@ 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001dc4:	fa03 f101 	lsl.w	r1, r3, r1
 8001dc8:	6071      	str	r1, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001dca:	6383      	str	r3, [r0, #56]	@ 0x38
    __HAL_UNLOCK(hdma);
 8001dcc:	f880 4020 	strb.w	r4, [r0, #32]
    hdma->State = HAL_DMA_STATE_READY;
 8001dd0:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    if (hdma->XferErrorCallback != NULL)
 8001dd4:	b14a      	cbz	r2, 8001dea <HAL_DMA_IRQHandler+0xe2>
}
 8001dd6:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001dd8:	4710      	bx	r2
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001dda:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 8001ddc:	2100      	movs	r1, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001dde:	4c14      	ldr	r4, [pc, #80]	@ (8001e30 <HAL_DMA_IRQHandler+0x128>)
    if(hdma->XferCpltCallback != NULL)
 8001de0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001de2:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8001de4:	f880 1020 	strb.w	r1, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8001de8:	b93b      	cbnz	r3, 8001dfa <HAL_DMA_IRQHandler+0xf2>
}
 8001dea:	bc70      	pop	{r4, r5, r6}
 8001dec:	4770      	bx	lr
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001dee:	2204      	movs	r2, #4
 8001df0:	490f      	ldr	r1, [pc, #60]	@ (8001e30 <HAL_DMA_IRQHandler+0x128>)
    if(hdma->XferHalfCpltCallback != NULL)
 8001df2:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001df4:	604a      	str	r2, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d0f7      	beq.n	8001dea <HAL_DMA_IRQHandler+0xe2>
}
 8001dfa:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8001dfc:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001dfe:	2240      	movs	r2, #64	@ 0x40
 8001e00:	e7f6      	b.n	8001df0 <HAL_DMA_IRQHandler+0xe8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001e02:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e06:	e7e9      	b.n	8001ddc <HAL_DMA_IRQHandler+0xd4>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001e08:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001e0c:	e7f0      	b.n	8001df0 <HAL_DMA_IRQHandler+0xe8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001e0e:	2220      	movs	r2, #32
 8001e10:	e7e4      	b.n	8001ddc <HAL_DMA_IRQHandler+0xd4>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001e12:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e16:	e7eb      	b.n	8001df0 <HAL_DMA_IRQHandler+0xe8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001e18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e1c:	e7de      	b.n	8001ddc <HAL_DMA_IRQHandler+0xd4>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001e1e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001e22:	e7e5      	b.n	8001df0 <HAL_DMA_IRQHandler+0xe8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001e24:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e28:	e7d8      	b.n	8001ddc <HAL_DMA_IRQHandler+0xd4>
 8001e2a:	bf00      	nop
 8001e2c:	40020008 	.word	0x40020008
 8001e30:	40020000 	.word	0x40020000

08001e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e38:	680d      	ldr	r5, [r1, #0]
{
 8001e3a:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e3c:	2d00      	cmp	r5, #0
 8001e3e:	f000 80c3 	beq.w	8001fc8 <HAL_GPIO_Init+0x194>
 8001e42:	2200      	movs	r2, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e44:	4e80      	ldr	r6, [pc, #512]	@ (8002048 <HAL_GPIO_Init+0x214>)
  uint32_t config = 0x00u;
 8001e46:	4692      	mov	sl, r2
  uint32_t position = 0x00u;
 8001e48:	4613      	mov	r3, r2
      switch (GPIO_Init->Mode)
 8001e4a:	f8df 8200 	ldr.w	r8, [pc, #512]	@ 800204c <HAL_GPIO_Init+0x218>
 8001e4e:	4f80      	ldr	r7, [pc, #512]	@ (8002050 <HAL_GPIO_Init+0x21c>)
 8001e50:	e006      	b.n	8001e60 <HAL_GPIO_Init+0x2c>
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }
      }
    }

	position++;
 8001e52:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e54:	fa35 f403 	lsrs.w	r4, r5, r3
 8001e58:	f102 0204 	add.w	r2, r2, #4
 8001e5c:	f000 80b4 	beq.w	8001fc8 <HAL_GPIO_Init+0x194>
    ioposition = (0x01uL << position);
 8001e60:	2401      	movs	r4, #1
 8001e62:	409c      	lsls	r4, r3
    if (iocurrent == ioposition)
 8001e64:	ea34 0e05 	bics.w	lr, r4, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e68:	ea04 0c05 	and.w	ip, r4, r5
    if (iocurrent == ioposition)
 8001e6c:	d1f1      	bne.n	8001e52 <HAL_GPIO_Init+0x1e>
      switch (GPIO_Init->Mode)
 8001e6e:	684d      	ldr	r5, [r1, #4]
 8001e70:	2d12      	cmp	r5, #18
 8001e72:	f200 80ac 	bhi.w	8001fce <HAL_GPIO_Init+0x19a>
 8001e76:	2d12      	cmp	r5, #18
 8001e78:	d81a      	bhi.n	8001eb0 <HAL_GPIO_Init+0x7c>
 8001e7a:	e8df f005 	tbb	[pc, r5]
 8001e7e:	c5b3      	.short	0xc5b3
 8001e80:	1919ccc1 	.word	0x1919ccc1
 8001e84:	19191919 	.word	0x19191919
 8001e88:	19191919 	.word	0x19191919
 8001e8c:	bd191919 	.word	0xbd191919
 8001e90:	c8          	.byte	0xc8
 8001e91:	00          	.byte	0x00
 8001e92:	f8df e1c0 	ldr.w	lr, [pc, #448]	@ 8002054 <HAL_GPIO_Init+0x220>
 8001e96:	4575      	cmp	r5, lr
 8001e98:	f000 80a4 	beq.w	8001fe4 <HAL_GPIO_Init+0x1b0>
 8001e9c:	f50e 2e70 	add.w	lr, lr, #983040	@ 0xf0000
 8001ea0:	4575      	cmp	r5, lr
 8001ea2:	f000 809f 	beq.w	8001fe4 <HAL_GPIO_Init+0x1b0>
 8001ea6:	f5ae 1e80 	sub.w	lr, lr, #1048576	@ 0x100000
 8001eaa:	4575      	cmp	r5, lr
 8001eac:	f000 809a 	beq.w	8001fe4 <HAL_GPIO_Init+0x1b0>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001eb0:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8001eb4:	bf9c      	itt	ls
 8001eb6:	4686      	movls	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001eb8:	4693      	movls	fp, r2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001eba:	f04f 050f 	mov.w	r5, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ebe:	bf84      	itt	hi
 8001ec0:	f100 0e04 	addhi.w	lr, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ec4:	f1a2 0b20 	subhi.w	fp, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ec8:	f8de 4000 	ldr.w	r4, [lr]
 8001ecc:	fa0a f90b 	lsl.w	r9, sl, fp
 8001ed0:	fa05 fb0b 	lsl.w	fp, r5, fp
 8001ed4:	ea24 040b 	bic.w	r4, r4, fp
 8001ed8:	ea44 0409 	orr.w	r4, r4, r9
 8001edc:	f8ce 4000 	str.w	r4, [lr]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ee0:	684c      	ldr	r4, [r1, #4]
 8001ee2:	f014 5f80 	tst.w	r4, #268435456	@ 0x10000000
 8001ee6:	f000 8085 	beq.w	8001ff4 <HAL_GPIO_Init+0x1c0>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001eea:	f8d6 e018 	ldr.w	lr, [r6, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001eee:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ef2:	f04e 0e01 	orr.w	lr, lr, #1
 8001ef6:	f8c6 e018 	str.w	lr, [r6, #24]
 8001efa:	f8d6 e018 	ldr.w	lr, [r6, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001efe:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f02:	f00e 0e01 	and.w	lr, lr, #1
 8001f06:	f8cd e004 	str.w	lr, [sp, #4]
 8001f0a:	f8dd e004 	ldr.w	lr, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8001f0e:	f023 0e03 	bic.w	lr, r3, #3
 8001f12:	f10e 4e80 	add.w	lr, lr, #1073741824	@ 0x40000000
 8001f16:	f50e 3e80 	add.w	lr, lr, #65536	@ 0x10000
 8001f1a:	f8de b008 	ldr.w	fp, [lr, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f1e:	fa05 f509 	lsl.w	r5, r5, r9
 8001f22:	ea2b 0505 	bic.w	r5, fp, r5
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f26:	f8df b130 	ldr.w	fp, [pc, #304]	@ 8002058 <HAL_GPIO_Init+0x224>
 8001f2a:	4558      	cmp	r0, fp
 8001f2c:	d013      	beq.n	8001f56 <HAL_GPIO_Init+0x122>
 8001f2e:	f50b 6b80 	add.w	fp, fp, #1024	@ 0x400
 8001f32:	4558      	cmp	r0, fp
 8001f34:	d079      	beq.n	800202a <HAL_GPIO_Init+0x1f6>
 8001f36:	f8df b124 	ldr.w	fp, [pc, #292]	@ 800205c <HAL_GPIO_Init+0x228>
 8001f3a:	4558      	cmp	r0, fp
 8001f3c:	d06e      	beq.n	800201c <HAL_GPIO_Init+0x1e8>
 8001f3e:	f8df b120 	ldr.w	fp, [pc, #288]	@ 8002060 <HAL_GPIO_Init+0x22c>
 8001f42:	4558      	cmp	r0, fp
 8001f44:	bf0c      	ite	eq
 8001f46:	f04f 0b03 	moveq.w	fp, #3
 8001f4a:	f04f 0b04 	movne.w	fp, #4
 8001f4e:	fa0b f909 	lsl.w	r9, fp, r9
 8001f52:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8001f56:	f8ce 5008 	str.w	r5, [lr, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f5a:	f8df e108 	ldr.w	lr, [pc, #264]	@ 8002064 <HAL_GPIO_Init+0x230>
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f5e:	f414 1f80 	tst.w	r4, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f62:	f8de 5008 	ldr.w	r5, [lr, #8]
 8001f66:	bf14      	ite	ne
 8001f68:	ea45 050c 	orrne.w	r5, r5, ip
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f6c:	ea25 050c 	biceq.w	r5, r5, ip
 8001f70:	f8ce 5008 	str.w	r5, [lr, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f74:	f8df e0ec 	ldr.w	lr, [pc, #236]	@ 8002064 <HAL_GPIO_Init+0x230>
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f78:	f414 1f00 	tst.w	r4, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f7c:	f8de 500c 	ldr.w	r5, [lr, #12]
 8001f80:	bf14      	ite	ne
 8001f82:	ea45 050c 	orrne.w	r5, r5, ip
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f86:	ea25 050c 	biceq.w	r5, r5, ip
 8001f8a:	f8ce 500c 	str.w	r5, [lr, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 8001f8e:	f8df e0d4 	ldr.w	lr, [pc, #212]	@ 8002064 <HAL_GPIO_Init+0x230>
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f92:	f414 3f00 	tst.w	r4, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001f96:	f8de 5004 	ldr.w	r5, [lr, #4]
 8001f9a:	bf14      	ite	ne
 8001f9c:	ea45 050c 	orrne.w	r5, r5, ip
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fa0:	ea25 050c 	biceq.w	r5, r5, ip
 8001fa4:	f8ce 5004 	str.w	r5, [lr, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8001fa8:	4d2e      	ldr	r5, [pc, #184]	@ (8002064 <HAL_GPIO_Init+0x230>)
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001faa:	f414 3f80 	tst.w	r4, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001fae:	682c      	ldr	r4, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fb0:	d01d      	beq.n	8001fee <HAL_GPIO_Init+0x1ba>
          SET_BIT(EXTI->IMR, iocurrent);
 8001fb2:	ea44 040c 	orr.w	r4, r4, ip
 8001fb6:	602c      	str	r4, [r5, #0]
 8001fb8:	680d      	ldr	r5, [r1, #0]
	position++;
 8001fba:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fbc:	fa35 f403 	lsrs.w	r4, r5, r3
 8001fc0:	f102 0204 	add.w	r2, r2, #4
 8001fc4:	f47f af4c 	bne.w	8001e60 <HAL_GPIO_Init+0x2c>
  }
}
 8001fc8:	b003      	add	sp, #12
 8001fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8001fce:	4545      	cmp	r5, r8
 8001fd0:	d008      	beq.n	8001fe4 <HAL_GPIO_Init+0x1b0>
 8001fd2:	f67f af5e 	bls.w	8001e92 <HAL_GPIO_Init+0x5e>
 8001fd6:	42bd      	cmp	r5, r7
 8001fd8:	d004      	beq.n	8001fe4 <HAL_GPIO_Init+0x1b0>
 8001fda:	f8df e08c 	ldr.w	lr, [pc, #140]	@ 8002068 <HAL_GPIO_Init+0x234>
 8001fde:	4575      	cmp	r5, lr
 8001fe0:	f47f af66 	bne.w	8001eb0 <HAL_GPIO_Init+0x7c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001fe4:	688d      	ldr	r5, [r1, #8]
 8001fe6:	bb3d      	cbnz	r5, 8002038 <HAL_GPIO_Init+0x204>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001fe8:	f04f 0a04 	mov.w	sl, #4
 8001fec:	e760      	b.n	8001eb0 <HAL_GPIO_Init+0x7c>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fee:	ea24 040c 	bic.w	r4, r4, ip
 8001ff2:	602c      	str	r4, [r5, #0]
 8001ff4:	680d      	ldr	r5, [r1, #0]
 8001ff6:	e72c      	b.n	8001e52 <HAL_GPIO_Init+0x1e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ff8:	68cc      	ldr	r4, [r1, #12]
 8001ffa:	f104 0a04 	add.w	sl, r4, #4
          break;
 8001ffe:	e757      	b.n	8001eb0 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002000:	68cc      	ldr	r4, [r1, #12]
 8002002:	f104 0a08 	add.w	sl, r4, #8
          break;
 8002006:	e753      	b.n	8001eb0 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002008:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 800200c:	e750      	b.n	8001eb0 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800200e:	68cc      	ldr	r4, [r1, #12]
 8002010:	f104 0a0c 	add.w	sl, r4, #12
          break;
 8002014:	e74c      	b.n	8001eb0 <HAL_GPIO_Init+0x7c>
      switch (GPIO_Init->Mode)
 8002016:	f04f 0a00 	mov.w	sl, #0
 800201a:	e749      	b.n	8001eb0 <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800201c:	f04f 0b02 	mov.w	fp, #2
 8002020:	fa0b f909 	lsl.w	r9, fp, r9
 8002024:	ea45 0509 	orr.w	r5, r5, r9
 8002028:	e795      	b.n	8001f56 <HAL_GPIO_Init+0x122>
 800202a:	f04f 0b01 	mov.w	fp, #1
 800202e:	fa0b f909 	lsl.w	r9, fp, r9
 8002032:	ea45 0509 	orr.w	r5, r5, r9
 8002036:	e78e      	b.n	8001f56 <HAL_GPIO_Init+0x122>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002038:	2d01      	cmp	r5, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800203a:	f04f 0a08 	mov.w	sl, #8
            GPIOx->BSRR = ioposition;
 800203e:	bf0c      	ite	eq
 8002040:	6104      	streq	r4, [r0, #16]
            GPIOx->BRR = ioposition;
 8002042:	6144      	strne	r4, [r0, #20]
 8002044:	e734      	b.n	8001eb0 <HAL_GPIO_Init+0x7c>
 8002046:	bf00      	nop
 8002048:	40021000 	.word	0x40021000
 800204c:	10220000 	.word	0x10220000
 8002050:	10310000 	.word	0x10310000
 8002054:	10120000 	.word	0x10120000
 8002058:	40010800 	.word	0x40010800
 800205c:	40011000 	.word	0x40011000
 8002060:	40011400 	.word	0x40011400
 8002064:	40010400 	.word	0x40010400
 8002068:	10320000 	.word	0x10320000

0800206c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800206c:	b902      	cbnz	r2, 8002070 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800206e:	0409      	lsls	r1, r1, #16
 8002070:	6101      	str	r1, [r0, #16]
  }
}
 8002072:	4770      	bx	lr

08002074 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002074:	2201      	movs	r2, #1
 8002076:	4b01      	ldr	r3, [pc, #4]	@ (800207c <HAL_PWR_EnableBkUpAccess+0x8>)
 8002078:	621a      	str	r2, [r3, #32]
}
 800207a:	4770      	bx	lr
 800207c:	420e0000 	.word	0x420e0000

08002080 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002080:	2800      	cmp	r0, #0
 8002082:	f000 81e4 	beq.w	800244e <HAL_RCC_OscConfig+0x3ce>
{
 8002086:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800208a:	6803      	ldr	r3, [r0, #0]
 800208c:	4604      	mov	r4, r0
 800208e:	07dd      	lsls	r5, r3, #31
{
 8002090:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002092:	d535      	bpl.n	8002100 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002094:	4999      	ldr	r1, [pc, #612]	@ (80022fc <HAL_RCC_OscConfig+0x27c>)
 8002096:	684a      	ldr	r2, [r1, #4]
 8002098:	f002 020c 	and.w	r2, r2, #12
 800209c:	2a04      	cmp	r2, #4
 800209e:	f000 80ed 	beq.w	800227c <HAL_RCC_OscConfig+0x1fc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020a2:	684a      	ldr	r2, [r1, #4]
 80020a4:	f002 020c 	and.w	r2, r2, #12
 80020a8:	2a08      	cmp	r2, #8
 80020aa:	f000 80e3 	beq.w	8002274 <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ae:	6863      	ldr	r3, [r4, #4]
 80020b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020b4:	d010      	beq.n	80020d8 <HAL_RCC_OscConfig+0x58>
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f000 810a 	beq.w	80022d0 <HAL_RCC_OscConfig+0x250>
 80020bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020c0:	f000 8180 	beq.w	80023c4 <HAL_RCC_OscConfig+0x344>
 80020c4:	4b8d      	ldr	r3, [pc, #564]	@ (80022fc <HAL_RCC_OscConfig+0x27c>)
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80020d4:	601a      	str	r2, [r3, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020d6:	e004      	b.n	80020e2 <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020d8:	4a88      	ldr	r2, [pc, #544]	@ (80022fc <HAL_RCC_OscConfig+0x27c>)
 80020da:	6813      	ldr	r3, [r2, #0]
 80020dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020e0:	6013      	str	r3, [r2, #0]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e2:	f7ff fa99 	bl	8001618 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e6:	4e85      	ldr	r6, [pc, #532]	@ (80022fc <HAL_RCC_OscConfig+0x27c>)
        tickstart = HAL_GetTick();
 80020e8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ea:	e005      	b.n	80020f8 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020ec:	f7ff fa94 	bl	8001618 <HAL_GetTick>
 80020f0:	1b40      	subs	r0, r0, r5
 80020f2:	2864      	cmp	r0, #100	@ 0x64
 80020f4:	f200 80e8 	bhi.w	80022c8 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f8:	6833      	ldr	r3, [r6, #0]
 80020fa:	039a      	lsls	r2, r3, #14
 80020fc:	d5f6      	bpl.n	80020ec <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020fe:	6823      	ldr	r3, [r4, #0]
 8002100:	079f      	lsls	r7, r3, #30
 8002102:	d528      	bpl.n	8002156 <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002104:	4a7d      	ldr	r2, [pc, #500]	@ (80022fc <HAL_RCC_OscConfig+0x27c>)
 8002106:	6851      	ldr	r1, [r2, #4]
 8002108:	f011 0f0c 	tst.w	r1, #12
 800210c:	f000 8096 	beq.w	800223c <HAL_RCC_OscConfig+0x1bc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002110:	6851      	ldr	r1, [r2, #4]
 8002112:	f001 010c 	and.w	r1, r1, #12
 8002116:	2908      	cmp	r1, #8
 8002118:	f000 808c 	beq.w	8002234 <HAL_RCC_OscConfig+0x1b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800211c:	6923      	ldr	r3, [r4, #16]
 800211e:	2b00      	cmp	r3, #0
 8002120:	f000 8116 	beq.w	8002350 <HAL_RCC_OscConfig+0x2d0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002124:	2201      	movs	r2, #1
 8002126:	4b76      	ldr	r3, [pc, #472]	@ (8002300 <HAL_RCC_OscConfig+0x280>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002128:	4e74      	ldr	r6, [pc, #464]	@ (80022fc <HAL_RCC_OscConfig+0x27c>)
        __HAL_RCC_HSI_ENABLE();
 800212a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800212c:	f7ff fa74 	bl	8001618 <HAL_GetTick>
 8002130:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002132:	e005      	b.n	8002140 <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002134:	f7ff fa70 	bl	8001618 <HAL_GetTick>
 8002138:	1b40      	subs	r0, r0, r5
 800213a:	2802      	cmp	r0, #2
 800213c:	f200 80c4 	bhi.w	80022c8 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002140:	6833      	ldr	r3, [r6, #0]
 8002142:	0798      	lsls	r0, r3, #30
 8002144:	d5f6      	bpl.n	8002134 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002146:	6833      	ldr	r3, [r6, #0]
 8002148:	6962      	ldr	r2, [r4, #20]
 800214a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800214e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002152:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002154:	6823      	ldr	r3, [r4, #0]
 8002156:	071a      	lsls	r2, r3, #28
 8002158:	d429      	bmi.n	80021ae <HAL_RCC_OscConfig+0x12e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800215a:	075d      	lsls	r5, r3, #29
 800215c:	d54b      	bpl.n	80021f6 <HAL_RCC_OscConfig+0x176>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800215e:	4b67      	ldr	r3, [pc, #412]	@ (80022fc <HAL_RCC_OscConfig+0x27c>)
 8002160:	69da      	ldr	r2, [r3, #28]
 8002162:	00d0      	lsls	r0, r2, #3
 8002164:	f100 8084 	bmi.w	8002270 <HAL_RCC_OscConfig+0x1f0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8002168:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800216a:	69da      	ldr	r2, [r3, #28]
 800216c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002170:	61da      	str	r2, [r3, #28]
 8002172:	69db      	ldr	r3, [r3, #28]
 8002174:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002178:	9300      	str	r3, [sp, #0]
 800217a:	9b00      	ldr	r3, [sp, #0]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800217c:	4e61      	ldr	r6, [pc, #388]	@ (8002304 <HAL_RCC_OscConfig+0x284>)
 800217e:	6833      	ldr	r3, [r6, #0]
 8002180:	05d9      	lsls	r1, r3, #23
 8002182:	f140 8091 	bpl.w	80022a8 <HAL_RCC_OscConfig+0x228>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002186:	68e3      	ldr	r3, [r4, #12]
 8002188:	2b01      	cmp	r3, #1
 800218a:	f000 80f2 	beq.w	8002372 <HAL_RCC_OscConfig+0x2f2>
 800218e:	2b00      	cmp	r3, #0
 8002190:	f000 80be 	beq.w	8002310 <HAL_RCC_OscConfig+0x290>
 8002194:	2b05      	cmp	r3, #5
 8002196:	4b59      	ldr	r3, [pc, #356]	@ (80022fc <HAL_RCC_OscConfig+0x27c>)
 8002198:	6a1a      	ldr	r2, [r3, #32]
 800219a:	f000 8120 	beq.w	80023de <HAL_RCC_OscConfig+0x35e>
 800219e:	f022 0201 	bic.w	r2, r2, #1
 80021a2:	621a      	str	r2, [r3, #32]
 80021a4:	6a1a      	ldr	r2, [r3, #32]
 80021a6:	f022 0204 	bic.w	r2, r2, #4
 80021aa:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021ac:	e0e6      	b.n	800237c <HAL_RCC_OscConfig+0x2fc>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021ae:	69a3      	ldr	r3, [r4, #24]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d04c      	beq.n	800224e <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_LSI_ENABLE();
 80021b4:	2201      	movs	r2, #1
 80021b6:	4b52      	ldr	r3, [pc, #328]	@ (8002300 <HAL_RCC_OscConfig+0x280>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021b8:	4e50      	ldr	r6, [pc, #320]	@ (80022fc <HAL_RCC_OscConfig+0x27c>)
      __HAL_RCC_LSI_ENABLE();
 80021ba:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 80021be:	f7ff fa2b 	bl	8001618 <HAL_GetTick>
 80021c2:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021c4:	e004      	b.n	80021d0 <HAL_RCC_OscConfig+0x150>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021c6:	f7ff fa27 	bl	8001618 <HAL_GetTick>
 80021ca:	1b40      	subs	r0, r0, r5
 80021cc:	2802      	cmp	r0, #2
 80021ce:	d87b      	bhi.n	80022c8 <HAL_RCC_OscConfig+0x248>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021d0:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 80021d2:	079b      	lsls	r3, r3, #30
 80021d4:	d5f7      	bpl.n	80021c6 <HAL_RCC_OscConfig+0x146>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021d6:	4b4c      	ldr	r3, [pc, #304]	@ (8002308 <HAL_RCC_OscConfig+0x288>)
 80021d8:	4a4c      	ldr	r2, [pc, #304]	@ (800230c <HAL_RCC_OscConfig+0x28c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	fba2 2303 	umull	r2, r3, r2, r3
 80021e0:	0a5b      	lsrs	r3, r3, #9
 80021e2:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80021e4:	bf00      	nop
  }
  while (Delay --);
 80021e6:	9b01      	ldr	r3, [sp, #4]
 80021e8:	1e5a      	subs	r2, r3, #1
 80021ea:	9201      	str	r2, [sp, #4]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1f9      	bne.n	80021e4 <HAL_RCC_OscConfig+0x164>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021f0:	6823      	ldr	r3, [r4, #0]
 80021f2:	075d      	lsls	r5, r3, #29
 80021f4:	d4b3      	bmi.n	800215e <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021f6:	69e3      	ldr	r3, [r4, #28]
 80021f8:	b1c3      	cbz	r3, 800222c <HAL_RCC_OscConfig+0x1ac>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021fa:	4d40      	ldr	r5, [pc, #256]	@ (80022fc <HAL_RCC_OscConfig+0x27c>)
 80021fc:	686a      	ldr	r2, [r5, #4]
 80021fe:	f002 020c 	and.w	r2, r2, #12
 8002202:	2a08      	cmp	r2, #8
 8002204:	f000 80cd 	beq.w	80023a2 <HAL_RCC_OscConfig+0x322>
        __HAL_RCC_PLL_DISABLE();
 8002208:	2200      	movs	r2, #0
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800220a:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 800220c:	4b3c      	ldr	r3, [pc, #240]	@ (8002300 <HAL_RCC_OscConfig+0x280>)
 800220e:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002210:	f000 80ed 	beq.w	80023ee <HAL_RCC_OscConfig+0x36e>
        tickstart = HAL_GetTick();
 8002214:	f7ff fa00 	bl	8001618 <HAL_GetTick>
 8002218:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800221a:	e004      	b.n	8002226 <HAL_RCC_OscConfig+0x1a6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800221c:	f7ff f9fc 	bl	8001618 <HAL_GetTick>
 8002220:	1b00      	subs	r0, r0, r4
 8002222:	2802      	cmp	r0, #2
 8002224:	d850      	bhi.n	80022c8 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002226:	682b      	ldr	r3, [r5, #0]
 8002228:	019b      	lsls	r3, r3, #6
 800222a:	d4f7      	bmi.n	800221c <HAL_RCC_OscConfig+0x19c>
  return HAL_OK;
 800222c:	2000      	movs	r0, #0
}
 800222e:	b002      	add	sp, #8
 8002230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002234:	6852      	ldr	r2, [r2, #4]
 8002236:	03d6      	lsls	r6, r2, #15
 8002238:	f53f af70 	bmi.w	800211c <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800223c:	4a2f      	ldr	r2, [pc, #188]	@ (80022fc <HAL_RCC_OscConfig+0x27c>)
 800223e:	6812      	ldr	r2, [r2, #0]
 8002240:	0795      	lsls	r5, r2, #30
 8002242:	d525      	bpl.n	8002290 <HAL_RCC_OscConfig+0x210>
 8002244:	6922      	ldr	r2, [r4, #16]
 8002246:	2a01      	cmp	r2, #1
 8002248:	d022      	beq.n	8002290 <HAL_RCC_OscConfig+0x210>
    return HAL_ERROR;
 800224a:	2001      	movs	r0, #1
 800224c:	e7ef      	b.n	800222e <HAL_RCC_OscConfig+0x1ae>
      __HAL_RCC_LSI_DISABLE();
 800224e:	4a2c      	ldr	r2, [pc, #176]	@ (8002300 <HAL_RCC_OscConfig+0x280>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002250:	4e2a      	ldr	r6, [pc, #168]	@ (80022fc <HAL_RCC_OscConfig+0x27c>)
      __HAL_RCC_LSI_DISABLE();
 8002252:	f8c2 3480 	str.w	r3, [r2, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8002256:	f7ff f9df 	bl	8001618 <HAL_GetTick>
 800225a:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800225c:	e004      	b.n	8002268 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800225e:	f7ff f9db 	bl	8001618 <HAL_GetTick>
 8002262:	1b40      	subs	r0, r0, r5
 8002264:	2802      	cmp	r0, #2
 8002266:	d82f      	bhi.n	80022c8 <HAL_RCC_OscConfig+0x248>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002268:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 800226a:	079f      	lsls	r7, r3, #30
 800226c:	d4f7      	bmi.n	800225e <HAL_RCC_OscConfig+0x1de>
 800226e:	e7bf      	b.n	80021f0 <HAL_RCC_OscConfig+0x170>
    FlagStatus       pwrclkchanged = RESET;
 8002270:	2500      	movs	r5, #0
 8002272:	e783      	b.n	800217c <HAL_RCC_OscConfig+0xfc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002274:	684a      	ldr	r2, [r1, #4]
 8002276:	03d0      	lsls	r0, r2, #15
 8002278:	f57f af19 	bpl.w	80020ae <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800227c:	4a1f      	ldr	r2, [pc, #124]	@ (80022fc <HAL_RCC_OscConfig+0x27c>)
 800227e:	6812      	ldr	r2, [r2, #0]
 8002280:	0391      	lsls	r1, r2, #14
 8002282:	f57f af3d 	bpl.w	8002100 <HAL_RCC_OscConfig+0x80>
 8002286:	6862      	ldr	r2, [r4, #4]
 8002288:	2a00      	cmp	r2, #0
 800228a:	f47f af39 	bne.w	8002100 <HAL_RCC_OscConfig+0x80>
 800228e:	e7dc      	b.n	800224a <HAL_RCC_OscConfig+0x1ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002290:	491a      	ldr	r1, [pc, #104]	@ (80022fc <HAL_RCC_OscConfig+0x27c>)
 8002292:	6960      	ldr	r0, [r4, #20]
 8002294:	680a      	ldr	r2, [r1, #0]
 8002296:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 800229a:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 800229e:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022a0:	071a      	lsls	r2, r3, #28
 80022a2:	f57f af5a 	bpl.w	800215a <HAL_RCC_OscConfig+0xda>
 80022a6:	e782      	b.n	80021ae <HAL_RCC_OscConfig+0x12e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022a8:	6833      	ldr	r3, [r6, #0]
 80022aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022ae:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80022b0:	f7ff f9b2 	bl	8001618 <HAL_GetTick>
 80022b4:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b6:	6833      	ldr	r3, [r6, #0]
 80022b8:	05da      	lsls	r2, r3, #23
 80022ba:	f53f af64 	bmi.w	8002186 <HAL_RCC_OscConfig+0x106>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022be:	f7ff f9ab 	bl	8001618 <HAL_GetTick>
 80022c2:	1bc0      	subs	r0, r0, r7
 80022c4:	2864      	cmp	r0, #100	@ 0x64
 80022c6:	d9f6      	bls.n	80022b6 <HAL_RCC_OscConfig+0x236>
            return HAL_TIMEOUT;
 80022c8:	2003      	movs	r0, #3
}
 80022ca:	b002      	add	sp, #8
 80022cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022d0:	4d0a      	ldr	r5, [pc, #40]	@ (80022fc <HAL_RCC_OscConfig+0x27c>)
 80022d2:	682b      	ldr	r3, [r5, #0]
 80022d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022d8:	602b      	str	r3, [r5, #0]
 80022da:	682b      	ldr	r3, [r5, #0]
 80022dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022e0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80022e2:	f7ff f999 	bl	8001618 <HAL_GetTick>
 80022e6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022e8:	e004      	b.n	80022f4 <HAL_RCC_OscConfig+0x274>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022ea:	f7ff f995 	bl	8001618 <HAL_GetTick>
 80022ee:	1b80      	subs	r0, r0, r6
 80022f0:	2864      	cmp	r0, #100	@ 0x64
 80022f2:	d8e9      	bhi.n	80022c8 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022f4:	682b      	ldr	r3, [r5, #0]
 80022f6:	039b      	lsls	r3, r3, #14
 80022f8:	d4f7      	bmi.n	80022ea <HAL_RCC_OscConfig+0x26a>
 80022fa:	e700      	b.n	80020fe <HAL_RCC_OscConfig+0x7e>
 80022fc:	40021000 	.word	0x40021000
 8002300:	42420000 	.word	0x42420000
 8002304:	40007000 	.word	0x40007000
 8002308:	20000000 	.word	0x20000000
 800230c:	10624dd3 	.word	0x10624dd3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002310:	4e50      	ldr	r6, [pc, #320]	@ (8002454 <HAL_RCC_OscConfig+0x3d4>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002312:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002316:	6a33      	ldr	r3, [r6, #32]
 8002318:	f023 0301 	bic.w	r3, r3, #1
 800231c:	6233      	str	r3, [r6, #32]
 800231e:	6a33      	ldr	r3, [r6, #32]
 8002320:	f023 0304 	bic.w	r3, r3, #4
 8002324:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8002326:	f7ff f977 	bl	8001618 <HAL_GetTick>
 800232a:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800232c:	e004      	b.n	8002338 <HAL_RCC_OscConfig+0x2b8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800232e:	f7ff f973 	bl	8001618 <HAL_GetTick>
 8002332:	1bc0      	subs	r0, r0, r7
 8002334:	4540      	cmp	r0, r8
 8002336:	d8c7      	bhi.n	80022c8 <HAL_RCC_OscConfig+0x248>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002338:	6a33      	ldr	r3, [r6, #32]
 800233a:	0798      	lsls	r0, r3, #30
 800233c:	d4f7      	bmi.n	800232e <HAL_RCC_OscConfig+0x2ae>
    if (pwrclkchanged == SET)
 800233e:	2d00      	cmp	r5, #0
 8002340:	f43f af59 	beq.w	80021f6 <HAL_RCC_OscConfig+0x176>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002344:	4a43      	ldr	r2, [pc, #268]	@ (8002454 <HAL_RCC_OscConfig+0x3d4>)
 8002346:	69d3      	ldr	r3, [r2, #28]
 8002348:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800234c:	61d3      	str	r3, [r2, #28]
 800234e:	e752      	b.n	80021f6 <HAL_RCC_OscConfig+0x176>
        __HAL_RCC_HSI_DISABLE();
 8002350:	4a41      	ldr	r2, [pc, #260]	@ (8002458 <HAL_RCC_OscConfig+0x3d8>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002352:	4e40      	ldr	r6, [pc, #256]	@ (8002454 <HAL_RCC_OscConfig+0x3d4>)
        __HAL_RCC_HSI_DISABLE();
 8002354:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002356:	f7ff f95f 	bl	8001618 <HAL_GetTick>
 800235a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800235c:	e004      	b.n	8002368 <HAL_RCC_OscConfig+0x2e8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800235e:	f7ff f95b 	bl	8001618 <HAL_GetTick>
 8002362:	1b40      	subs	r0, r0, r5
 8002364:	2802      	cmp	r0, #2
 8002366:	d8af      	bhi.n	80022c8 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002368:	6833      	ldr	r3, [r6, #0]
 800236a:	0799      	lsls	r1, r3, #30
 800236c:	d4f7      	bmi.n	800235e <HAL_RCC_OscConfig+0x2de>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800236e:	6823      	ldr	r3, [r4, #0]
 8002370:	e6f1      	b.n	8002156 <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002372:	4a38      	ldr	r2, [pc, #224]	@ (8002454 <HAL_RCC_OscConfig+0x3d4>)
 8002374:	6a13      	ldr	r3, [r2, #32]
 8002376:	f043 0301 	orr.w	r3, r3, #1
 800237a:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 800237c:	f7ff f94c 	bl	8001618 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002380:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8002384:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002386:	4f33      	ldr	r7, [pc, #204]	@ (8002454 <HAL_RCC_OscConfig+0x3d4>)
 8002388:	e004      	b.n	8002394 <HAL_RCC_OscConfig+0x314>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800238a:	f7ff f945 	bl	8001618 <HAL_GetTick>
 800238e:	1b80      	subs	r0, r0, r6
 8002390:	4540      	cmp	r0, r8
 8002392:	d899      	bhi.n	80022c8 <HAL_RCC_OscConfig+0x248>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002394:	6a3b      	ldr	r3, [r7, #32]
 8002396:	079b      	lsls	r3, r3, #30
 8002398:	d5f7      	bpl.n	800238a <HAL_RCC_OscConfig+0x30a>
    if (pwrclkchanged == SET)
 800239a:	2d00      	cmp	r5, #0
 800239c:	f43f af2b 	beq.w	80021f6 <HAL_RCC_OscConfig+0x176>
 80023a0:	e7d0      	b.n	8002344 <HAL_RCC_OscConfig+0x2c4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	f43f af51 	beq.w	800224a <HAL_RCC_OscConfig+0x1ca>
        pll_config = RCC->CFGR;
 80023a8:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023aa:	6a22      	ldr	r2, [r4, #32]
 80023ac:	f403 3180 	and.w	r1, r3, #65536	@ 0x10000
 80023b0:	4291      	cmp	r1, r2
 80023b2:	f47f af4a 	bne.w	800224a <HAL_RCC_OscConfig+0x1ca>
 80023b6:	6a60      	ldr	r0, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023b8:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023bc:	1a18      	subs	r0, r3, r0
 80023be:	bf18      	it	ne
 80023c0:	2001      	movne	r0, #1
 80023c2:	e734      	b.n	800222e <HAL_RCC_OscConfig+0x1ae>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80023c8:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80023da:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023dc:	e681      	b.n	80020e2 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023de:	f042 0204 	orr.w	r2, r2, #4
 80023e2:	621a      	str	r2, [r3, #32]
 80023e4:	6a1a      	ldr	r2, [r3, #32]
 80023e6:	f042 0201 	orr.w	r2, r2, #1
 80023ea:	621a      	str	r2, [r3, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023ec:	e7c6      	b.n	800237c <HAL_RCC_OscConfig+0x2fc>
        tickstart = HAL_GetTick();
 80023ee:	f7ff f913 	bl	8001618 <HAL_GetTick>
 80023f2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023f4:	e005      	b.n	8002402 <HAL_RCC_OscConfig+0x382>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023f6:	f7ff f90f 	bl	8001618 <HAL_GetTick>
 80023fa:	1b80      	subs	r0, r0, r6
 80023fc:	2802      	cmp	r0, #2
 80023fe:	f63f af63 	bhi.w	80022c8 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002402:	682b      	ldr	r3, [r5, #0]
 8002404:	0199      	lsls	r1, r3, #6
 8002406:	d4f6      	bmi.n	80023f6 <HAL_RCC_OscConfig+0x376>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002408:	6a23      	ldr	r3, [r4, #32]
 800240a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800240e:	d105      	bne.n	800241c <HAL_RCC_OscConfig+0x39c>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002410:	686a      	ldr	r2, [r5, #4]
 8002412:	68a1      	ldr	r1, [r4, #8]
 8002414:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8002418:	430a      	orrs	r2, r1
 800241a:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800241c:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800241e:	4d0d      	ldr	r5, [pc, #52]	@ (8002454 <HAL_RCC_OscConfig+0x3d4>)
 8002420:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002422:	686a      	ldr	r2, [r5, #4]
 8002424:	430b      	orrs	r3, r1
 8002426:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 800242a:	490b      	ldr	r1, [pc, #44]	@ (8002458 <HAL_RCC_OscConfig+0x3d8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800242c:	4313      	orrs	r3, r2
 800242e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002430:	6608      	str	r0, [r1, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002432:	f7ff f8f1 	bl	8001618 <HAL_GetTick>
 8002436:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002438:	e005      	b.n	8002446 <HAL_RCC_OscConfig+0x3c6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800243a:	f7ff f8ed 	bl	8001618 <HAL_GetTick>
 800243e:	1b00      	subs	r0, r0, r4
 8002440:	2802      	cmp	r0, #2
 8002442:	f63f af41 	bhi.w	80022c8 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002446:	682b      	ldr	r3, [r5, #0]
 8002448:	019a      	lsls	r2, r3, #6
 800244a:	d5f6      	bpl.n	800243a <HAL_RCC_OscConfig+0x3ba>
 800244c:	e6ee      	b.n	800222c <HAL_RCC_OscConfig+0x1ac>
    return HAL_ERROR;
 800244e:	2001      	movs	r0, #1
}
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	40021000 	.word	0x40021000
 8002458:	42420000 	.word	0x42420000

0800245c <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 800245c:	4a0e      	ldr	r2, [pc, #56]	@ (8002498 <HAL_RCC_GetSysClockFreq+0x3c>)
 800245e:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002460:	f003 010c 	and.w	r1, r3, #12
 8002464:	2908      	cmp	r1, #8
 8002466:	d001      	beq.n	800246c <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8002468:	480c      	ldr	r0, [pc, #48]	@ (800249c <HAL_RCC_GetSysClockFreq+0x40>)
}
 800246a:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800246c:	480c      	ldr	r0, [pc, #48]	@ (80024a0 <HAL_RCC_GetSysClockFreq+0x44>)
 800246e:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002472:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002474:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002476:	d50a      	bpl.n	800248e <HAL_RCC_GetSysClockFreq+0x32>
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002478:	4908      	ldr	r1, [pc, #32]	@ (800249c <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800247a:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800247c:	fb01 f000 	mul.w	r0, r1, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002480:	4a08      	ldr	r2, [pc, #32]	@ (80024a4 <HAL_RCC_GetSysClockFreq+0x48>)
 8002482:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8002486:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002488:	fbb0 f0f3 	udiv	r0, r0, r3
 800248c:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800248e:	4b06      	ldr	r3, [pc, #24]	@ (80024a8 <HAL_RCC_GetSysClockFreq+0x4c>)
 8002490:	fb03 f000 	mul.w	r0, r3, r0
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	40021000 	.word	0x40021000
 800249c:	007a1200 	.word	0x007a1200
 80024a0:	08006490 	.word	0x08006490
 80024a4:	0800648c 	.word	0x0800648c
 80024a8:	003d0900 	.word	0x003d0900

080024ac <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80024ac:	2800      	cmp	r0, #0
 80024ae:	f000 808c 	beq.w	80025ca <HAL_RCC_ClockConfig+0x11e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024b2:	4a49      	ldr	r2, [pc, #292]	@ (80025d8 <HAL_RCC_ClockConfig+0x12c>)
{
 80024b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024b8:	6813      	ldr	r3, [r2, #0]
 80024ba:	4604      	mov	r4, r0
 80024bc:	f003 0307 	and.w	r3, r3, #7
 80024c0:	428b      	cmp	r3, r1
 80024c2:	460d      	mov	r5, r1
 80024c4:	d20c      	bcs.n	80024e0 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024c6:	6813      	ldr	r3, [r2, #0]
 80024c8:	f023 0307 	bic.w	r3, r3, #7
 80024cc:	430b      	orrs	r3, r1
 80024ce:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d0:	6813      	ldr	r3, [r2, #0]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	428b      	cmp	r3, r1
 80024d8:	d002      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80024da:	2001      	movs	r0, #1
}
 80024dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024e0:	6823      	ldr	r3, [r4, #0]
 80024e2:	0798      	lsls	r0, r3, #30
 80024e4:	d514      	bpl.n	8002510 <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e6:	0759      	lsls	r1, r3, #29
 80024e8:	d504      	bpl.n	80024f4 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024ea:	493c      	ldr	r1, [pc, #240]	@ (80025dc <HAL_RCC_ClockConfig+0x130>)
 80024ec:	684a      	ldr	r2, [r1, #4]
 80024ee:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80024f2:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f4:	071a      	lsls	r2, r3, #28
 80024f6:	d504      	bpl.n	8002502 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024f8:	4938      	ldr	r1, [pc, #224]	@ (80025dc <HAL_RCC_ClockConfig+0x130>)
 80024fa:	684a      	ldr	r2, [r1, #4]
 80024fc:	f442 5260 	orr.w	r2, r2, #14336	@ 0x3800
 8002500:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002502:	4936      	ldr	r1, [pc, #216]	@ (80025dc <HAL_RCC_ClockConfig+0x130>)
 8002504:	68a0      	ldr	r0, [r4, #8]
 8002506:	684a      	ldr	r2, [r1, #4]
 8002508:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800250c:	4302      	orrs	r2, r0
 800250e:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002510:	07df      	lsls	r7, r3, #31
 8002512:	d520      	bpl.n	8002556 <HAL_RCC_ClockConfig+0xaa>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002514:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002516:	4b31      	ldr	r3, [pc, #196]	@ (80025dc <HAL_RCC_ClockConfig+0x130>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002518:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800251a:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800251c:	d057      	beq.n	80025ce <HAL_RCC_ClockConfig+0x122>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800251e:	2a02      	cmp	r2, #2
 8002520:	d050      	beq.n	80025c4 <HAL_RCC_ClockConfig+0x118>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002522:	0799      	lsls	r1, r3, #30
 8002524:	d5d9      	bpl.n	80024da <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002526:	4e2d      	ldr	r6, [pc, #180]	@ (80025dc <HAL_RCC_ClockConfig+0x130>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002528:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800252c:	6873      	ldr	r3, [r6, #4]
 800252e:	f023 0303 	bic.w	r3, r3, #3
 8002532:	4313      	orrs	r3, r2
 8002534:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002536:	f7ff f86f 	bl	8001618 <HAL_GetTick>
 800253a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800253c:	e004      	b.n	8002548 <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800253e:	f7ff f86b 	bl	8001618 <HAL_GetTick>
 8002542:	1bc0      	subs	r0, r0, r7
 8002544:	4540      	cmp	r0, r8
 8002546:	d845      	bhi.n	80025d4 <HAL_RCC_ClockConfig+0x128>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002548:	6873      	ldr	r3, [r6, #4]
 800254a:	6862      	ldr	r2, [r4, #4]
 800254c:	f003 030c 	and.w	r3, r3, #12
 8002550:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002554:	d1f3      	bne.n	800253e <HAL_RCC_ClockConfig+0x92>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002556:	4a20      	ldr	r2, [pc, #128]	@ (80025d8 <HAL_RCC_ClockConfig+0x12c>)
 8002558:	6813      	ldr	r3, [r2, #0]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	42ab      	cmp	r3, r5
 8002560:	d909      	bls.n	8002576 <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002562:	6813      	ldr	r3, [r2, #0]
 8002564:	f023 0307 	bic.w	r3, r3, #7
 8002568:	432b      	orrs	r3, r5
 800256a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800256c:	6813      	ldr	r3, [r2, #0]
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	42ab      	cmp	r3, r5
 8002574:	d1b1      	bne.n	80024da <HAL_RCC_ClockConfig+0x2e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002576:	6823      	ldr	r3, [r4, #0]
 8002578:	075a      	lsls	r2, r3, #29
 800257a:	d506      	bpl.n	800258a <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800257c:	4917      	ldr	r1, [pc, #92]	@ (80025dc <HAL_RCC_ClockConfig+0x130>)
 800257e:	68e0      	ldr	r0, [r4, #12]
 8002580:	684a      	ldr	r2, [r1, #4]
 8002582:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002586:	4302      	orrs	r2, r0
 8002588:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800258a:	071b      	lsls	r3, r3, #28
 800258c:	d507      	bpl.n	800259e <HAL_RCC_ClockConfig+0xf2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800258e:	4a13      	ldr	r2, [pc, #76]	@ (80025dc <HAL_RCC_ClockConfig+0x130>)
 8002590:	6921      	ldr	r1, [r4, #16]
 8002592:	6853      	ldr	r3, [r2, #4]
 8002594:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8002598:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800259c:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800259e:	f7ff ff5d 	bl	800245c <HAL_RCC_GetSysClockFreq>
 80025a2:	4603      	mov	r3, r0
 80025a4:	4a0d      	ldr	r2, [pc, #52]	@ (80025dc <HAL_RCC_ClockConfig+0x130>)
 80025a6:	490e      	ldr	r1, [pc, #56]	@ (80025e0 <HAL_RCC_ClockConfig+0x134>)
 80025a8:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 80025aa:	480e      	ldr	r0, [pc, #56]	@ (80025e4 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025ac:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80025b0:	5c89      	ldrb	r1, [r1, r2]
 80025b2:	4a0d      	ldr	r2, [pc, #52]	@ (80025e8 <HAL_RCC_ClockConfig+0x13c>)
 80025b4:	40cb      	lsrs	r3, r1
  HAL_InitTick(uwTickPrio);
 80025b6:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025b8:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 80025ba:	f7fe fff7 	bl	80015ac <HAL_InitTick>
  return HAL_OK;
 80025be:	2000      	movs	r0, #0
}
 80025c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025c4:	0198      	lsls	r0, r3, #6
 80025c6:	d4ae      	bmi.n	8002526 <HAL_RCC_ClockConfig+0x7a>
 80025c8:	e787      	b.n	80024da <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80025ca:	2001      	movs	r0, #1
}
 80025cc:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ce:	039e      	lsls	r6, r3, #14
 80025d0:	d4a9      	bmi.n	8002526 <HAL_RCC_ClockConfig+0x7a>
 80025d2:	e782      	b.n	80024da <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 80025d4:	2003      	movs	r0, #3
 80025d6:	e781      	b.n	80024dc <HAL_RCC_ClockConfig+0x30>
 80025d8:	40022000 	.word	0x40022000
 80025dc:	40021000 	.word	0x40021000
 80025e0:	0800647c 	.word	0x0800647c
 80025e4:	20000008 	.word	0x20000008
 80025e8:	20000000 	.word	0x20000000

080025ec <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025ec:	4b04      	ldr	r3, [pc, #16]	@ (8002600 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 80025ee:	4a05      	ldr	r2, [pc, #20]	@ (8002604 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	4905      	ldr	r1, [pc, #20]	@ (8002608 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80025f4:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80025f8:	5ccb      	ldrb	r3, [r1, r3]
 80025fa:	6810      	ldr	r0, [r2, #0]
}
 80025fc:	40d8      	lsrs	r0, r3
 80025fe:	4770      	bx	lr
 8002600:	40021000 	.word	0x40021000
 8002604:	20000000 	.word	0x20000000
 8002608:	08006474 	.word	0x08006474

0800260c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800260c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002610:	6803      	ldr	r3, [r0, #0]
{
 8002612:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002614:	07d8      	lsls	r0, r3, #31
{
 8002616:	b082      	sub	sp, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002618:	d52c      	bpl.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x68>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800261a:	4b39      	ldr	r3, [pc, #228]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 800261c:	69da      	ldr	r2, [r3, #28]
 800261e:	00d1      	lsls	r1, r2, #3
 8002620:	d53f      	bpl.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002622:	4d38      	ldr	r5, [pc, #224]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
    FlagStatus pwrclkchanged = RESET;
 8002624:	2600      	movs	r6, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002626:	682b      	ldr	r3, [r5, #0]
 8002628:	05da      	lsls	r2, r3, #23
 800262a:	d548      	bpl.n	80026be <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800262c:	4d34      	ldr	r5, [pc, #208]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800262e:	6861      	ldr	r1, [r4, #4]
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002630:	6a2b      	ldr	r3, [r5, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002632:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8002636:	d011      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002638:	f401 7240 	and.w	r2, r1, #768	@ 0x300
 800263c:	429a      	cmp	r2, r3
 800263e:	d00d      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002640:	2000      	movs	r0, #0
      __HAL_RCC_BACKUPRESET_FORCE();
 8002642:	2701      	movs	r7, #1
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002644:	6a2b      	ldr	r3, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8002646:	4a30      	ldr	r2, [pc, #192]	@ (8002708 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002648:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800264c:	f8c2 7440 	str.w	r7, [r2, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002650:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002654:	07d8      	lsls	r0, r3, #31
      RCC->BDCR = temp_reg;
 8002656:	6229      	str	r1, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002658:	d444      	bmi.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800265a:	6861      	ldr	r1, [r4, #4]
 800265c:	4a28      	ldr	r2, [pc, #160]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 800265e:	6a13      	ldr	r3, [r2, #32]
 8002660:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002664:	430b      	orrs	r3, r1
 8002666:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002668:	b11e      	cbz	r6, 8002672 <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800266a:	69d3      	ldr	r3, [r2, #28]
 800266c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002670:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002672:	6823      	ldr	r3, [r4, #0]
 8002674:	079a      	lsls	r2, r3, #30
 8002676:	d506      	bpl.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002678:	4921      	ldr	r1, [pc, #132]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 800267a:	68a0      	ldr	r0, [r4, #8]
 800267c:	684a      	ldr	r2, [r1, #4]
 800267e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8002682:	4302      	orrs	r2, r0
 8002684:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002686:	06db      	lsls	r3, r3, #27
 8002688:	d403      	bmi.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x86>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800268a:	2000      	movs	r0, #0
}
 800268c:	b002      	add	sp, #8
 800268e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002692:	4a1b      	ldr	r2, [pc, #108]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8002694:	68e1      	ldr	r1, [r4, #12]
 8002696:	6853      	ldr	r3, [r2, #4]
 8002698:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800269c:	430b      	orrs	r3, r1
 800269e:	6053      	str	r3, [r2, #4]
 80026a0:	e7f3      	b.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80026a2:	69da      	ldr	r2, [r3, #28]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a4:	4d17      	ldr	r5, [pc, #92]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
      __HAL_RCC_PWR_CLK_ENABLE();
 80026a6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80026aa:	61da      	str	r2, [r3, #28]
 80026ac:	69db      	ldr	r3, [r3, #28]
      pwrclkchanged = SET;
 80026ae:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80026b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026b4:	9301      	str	r3, [sp, #4]
 80026b6:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b8:	682b      	ldr	r3, [r5, #0]
 80026ba:	05da      	lsls	r2, r3, #23
 80026bc:	d4b6      	bmi.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x20>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026be:	682b      	ldr	r3, [r5, #0]
 80026c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026c4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80026c6:	f7fe ffa7 	bl	8001618 <HAL_GetTick>
 80026ca:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026cc:	682b      	ldr	r3, [r5, #0]
 80026ce:	05db      	lsls	r3, r3, #23
 80026d0:	d4ac      	bmi.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x20>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026d2:	f7fe ffa1 	bl	8001618 <HAL_GetTick>
 80026d6:	1bc3      	subs	r3, r0, r7
 80026d8:	2b64      	cmp	r3, #100	@ 0x64
 80026da:	d9f7      	bls.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 80026dc:	2003      	movs	r0, #3
}
 80026de:	b002      	add	sp, #8
 80026e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tickstart = HAL_GetTick();
 80026e4:	f7fe ff98 	bl	8001618 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026e8:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 80026ec:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ee:	6a2b      	ldr	r3, [r5, #32]
 80026f0:	0799      	lsls	r1, r3, #30
 80026f2:	d4b2      	bmi.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x4e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026f4:	f7fe ff90 	bl	8001618 <HAL_GetTick>
 80026f8:	1bc0      	subs	r0, r0, r7
 80026fa:	4540      	cmp	r0, r8
 80026fc:	d9f7      	bls.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80026fe:	e7ed      	b.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8002700:	40021000 	.word	0x40021000
 8002704:	40007000 	.word	0x40007000
 8002708:	42420000 	.word	0x42420000

0800270c <HAL_RCCEx_GetPeriphCLKFreq>:
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800270c:	2802      	cmp	r0, #2
{
 800270e:	b508      	push	{r3, lr}
  switch (PeriphClk)
 8002710:	d005      	beq.n	800271e <HAL_RCCEx_GetPeriphCLKFreq+0x12>
 8002712:	2810      	cmp	r0, #16
 8002714:	d026      	beq.n	8002764 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 8002716:	2801      	cmp	r0, #1
 8002718:	d00c      	beq.n	8002734 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
  uint32_t temp_reg = 0U, frequency = 0U;
 800271a:	2000      	movs	r0, #0
    {
      break;
    }
  }
  return (frequency);
}
 800271c:	bd08      	pop	{r3, pc}
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800271e:	f7ff ff65 	bl	80025ec <HAL_RCC_GetPCLK2Freq>
 8002722:	4b28      	ldr	r3, [pc, #160]	@ (80027c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f3c3 3381 	ubfx	r3, r3, #14, #2
 800272a:	3301      	adds	r3, #1
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8002732:	bd08      	pop	{r3, pc}
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002734:	f240 3202 	movw	r2, #770	@ 0x302
      temp_reg = RCC->BDCR;
 8002738:	4922      	ldr	r1, [pc, #136]	@ (80027c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800273a:	6a0b      	ldr	r3, [r1, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800273c:	401a      	ands	r2, r3
 800273e:	f5b2 7f81 	cmp.w	r2, #258	@ 0x102
 8002742:	d02f      	beq.n	80027a4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002744:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002748:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800274c:	d02d      	beq.n	80027aa <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800274e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002752:	d1e2      	bne.n	800271a <HAL_RCCEx_GetPeriphCLKFreq+0xe>
        frequency = HSE_VALUE / 128U;
 8002754:	f24f 4324 	movw	r3, #62500	@ 0xf424
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002758:	6808      	ldr	r0, [r1, #0]
        frequency = HSE_VALUE / 128U;
 800275a:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 800275e:	bf18      	it	ne
 8002760:	4618      	movne	r0, r3
}
 8002762:	bd08      	pop	{r3, pc}
      temp_reg = RCC->CFGR;
 8002764:	4b17      	ldr	r3, [pc, #92]	@ (80027c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8002766:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002768:	6818      	ldr	r0, [r3, #0]
 800276a:	f010 7080 	ands.w	r0, r0, #16777216	@ 0x1000000
 800276e:	d0d5      	beq.n	800271c <HAL_RCCEx_GetPeriphCLKFreq+0x10>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002770:	4815      	ldr	r0, [pc, #84]	@ (80027c8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8002772:	f3c2 4183 	ubfx	r1, r2, #18, #4
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002776:	03d2      	lsls	r2, r2, #15
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002778:	5c40      	ldrb	r0, [r0, r1]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800277a:	d51e      	bpl.n	80027ba <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	4a13      	ldr	r2, [pc, #76]	@ (80027cc <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8002780:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8002784:	5cd2      	ldrb	r2, [r2, r3]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002786:	4b12      	ldr	r3, [pc, #72]	@ (80027d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 8002788:	fbb3 f3f2 	udiv	r3, r3, r2
 800278c:	fb03 f000 	mul.w	r0, r3, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002790:	4b0c      	ldr	r3, [pc, #48]	@ (80027c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	025b      	lsls	r3, r3, #9
 8002796:	d4c1      	bmi.n	800271c <HAL_RCCEx_GetPeriphCLKFreq+0x10>
          frequency = (pllclk * 2) / 3;
 8002798:	4b0e      	ldr	r3, [pc, #56]	@ (80027d4 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
 800279a:	0040      	lsls	r0, r0, #1
 800279c:	fba3 3000 	umull	r3, r0, r3, r0
 80027a0:	0840      	lsrs	r0, r0, #1
}
 80027a2:	bd08      	pop	{r3, pc}
        frequency = LSE_VALUE;
 80027a4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
}
 80027a8:	bd08      	pop	{r3, pc}
        frequency = LSI_VALUE;
 80027aa:	f649 4340 	movw	r3, #40000	@ 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80027ae:	6a48      	ldr	r0, [r1, #36]	@ 0x24
        frequency = LSI_VALUE;
 80027b0:	f010 0002 	ands.w	r0, r0, #2
 80027b4:	bf18      	it	ne
 80027b6:	4618      	movne	r0, r3
}
 80027b8:	bd08      	pop	{r3, pc}
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027ba:	4b07      	ldr	r3, [pc, #28]	@ (80027d8 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>)
 80027bc:	fb03 f000 	mul.w	r0, r3, r0
 80027c0:	e7e6      	b.n	8002790 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
 80027c2:	bf00      	nop
 80027c4:	40021000 	.word	0x40021000
 80027c8:	080064a4 	.word	0x080064a4
 80027cc:	080064a0 	.word	0x080064a0
 80027d0:	007a1200 	.word	0x007a1200
 80027d4:	aaaaaaab 	.word	0xaaaaaaab
 80027d8:	003d0900 	.word	0x003d0900

080027dc <HAL_RTC_Init>:
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
  uint32_t prescaler = 0U;
  /* Check input parameters */
  if (hrtc == NULL)
 80027dc:	2800      	cmp	r0, #0
 80027de:	d072      	beq.n	80028c6 <HAL_RTC_Init+0xea>
{
 80027e0:	b538      	push	{r3, r4, r5, lr}
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80027e2:	7c43      	ldrb	r3, [r0, #17]
 80027e4:	4604      	mov	r4, r0
 80027e6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d05f      	beq.n	80028ae <HAL_RTC_Init+0xd2>
    HAL_RTC_MspInit(hrtc);
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80027ee:	2302      	movs	r3, #2
  {
    return HAL_ERROR;
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80027f0:	6822      	ldr	r2, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80027f2:	7463      	strb	r3, [r4, #17]
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80027f4:	6853      	ldr	r3, [r2, #4]
 80027f6:	f023 0308 	bic.w	r3, r3, #8
 80027fa:	6053      	str	r3, [r2, #4]

  tickstart = HAL_GetTick();
 80027fc:	f7fe ff0c 	bl	8001618 <HAL_GetTick>
 8002800:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002802:	e005      	b.n	8002810 <HAL_RTC_Init+0x34>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002804:	f7fe ff08 	bl	8001618 <HAL_GetTick>
 8002808:	1b40      	subs	r0, r0, r5
 800280a:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800280e:	d84a      	bhi.n	80028a6 <HAL_RTC_Init+0xca>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002810:	6823      	ldr	r3, [r4, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	071b      	lsls	r3, r3, #28
 8002816:	d5f5      	bpl.n	8002804 <HAL_RTC_Init+0x28>
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart = 0U;

  tickstart = HAL_GetTick();
 8002818:	f7fe fefe 	bl	8001618 <HAL_GetTick>
 800281c:	4605      	mov	r5, r0
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800281e:	e005      	b.n	800282c <HAL_RTC_Init+0x50>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002820:	f7fe fefa 	bl	8001618 <HAL_GetTick>
 8002824:	1b40      	subs	r0, r0, r5
 8002826:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800282a:	d83c      	bhi.n	80028a6 <HAL_RTC_Init+0xca>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800282c:	6823      	ldr	r3, [r4, #0]
 800282e:	685a      	ldr	r2, [r3, #4]
 8002830:	0690      	lsls	r0, r2, #26
 8002832:	d5f5      	bpl.n	8002820 <HAL_RTC_Init+0x44>
      return HAL_TIMEOUT;
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002834:	685a      	ldr	r2, [r3, #4]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002836:	68a0      	ldr	r0, [r4, #8]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002838:	f042 0210 	orr.w	r2, r2, #16
 800283c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	f022 0207 	bic.w	r2, r2, #7
 8002844:	605a      	str	r2, [r3, #4]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002846:	b120      	cbz	r0, 8002852 <HAL_RTC_Init+0x76>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8002848:	4920      	ldr	r1, [pc, #128]	@ (80028cc <HAL_RTC_Init+0xf0>)
 800284a:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800284c:	f022 0201 	bic.w	r2, r2, #1
 8002850:	630a      	str	r2, [r1, #48]	@ 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002852:	491e      	ldr	r1, [pc, #120]	@ (80028cc <HAL_RTC_Init+0xf0>)
 8002854:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8002856:	f422 7260 	bic.w	r2, r2, #896	@ 0x380
 800285a:	4302      	orrs	r2, r0
 800285c:	62ca      	str	r2, [r1, #44]	@ 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800285e:	6862      	ldr	r2, [r4, #4]
 8002860:	1c51      	adds	r1, r2, #1
 8002862:	d028      	beq.n	80028b6 <HAL_RTC_Init+0xda>
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8002864:	f3c2 4103 	ubfx	r1, r2, #16, #4
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8002868:	b292      	uxth	r2, r2
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 800286a:	6099      	str	r1, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 800286c:	60da      	str	r2, [r3, #12]
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart = 0U;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	f022 0210 	bic.w	r2, r2, #16
 8002874:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002876:	f7fe fecf 	bl	8001618 <HAL_GetTick>
 800287a:	4605      	mov	r5, r0
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800287c:	e005      	b.n	800288a <HAL_RTC_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800287e:	f7fe fecb 	bl	8001618 <HAL_GetTick>
 8002882:	1b40      	subs	r0, r0, r5
 8002884:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8002888:	d80d      	bhi.n	80028a6 <HAL_RTC_Init+0xca>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800288a:	6823      	ldr	r3, [r4, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	069b      	lsls	r3, r3, #26
 8002890:	d5f5      	bpl.n	800287e <HAL_RTC_Init+0xa2>
    hrtc->DateToUpdate.Year = 0x00U;
 8002892:	2300      	movs	r3, #0
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002894:	f240 1101 	movw	r1, #257	@ 0x101
    hrtc->State = HAL_RTC_STATE_READY;
 8002898:	2201      	movs	r2, #1
    hrtc->DateToUpdate.Year = 0x00U;
 800289a:	73e3      	strb	r3, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 800289c:	f8a4 100d 	strh.w	r1, [r4, #13]
    hrtc->State = HAL_RTC_STATE_READY;
 80028a0:	7462      	strb	r2, [r4, #17]
    return HAL_OK;
 80028a2:	4618      	mov	r0, r3
}
 80028a4:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->State = HAL_RTC_STATE_ERROR;
 80028a6:	2304      	movs	r3, #4
 80028a8:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 80028aa:	2001      	movs	r0, #1
}
 80028ac:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Lock = HAL_UNLOCKED;
 80028ae:	7402      	strb	r2, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 80028b0:	f7fe fd26 	bl	8001300 <HAL_RTC_MspInit>
 80028b4:	e79b      	b.n	80027ee <HAL_RTC_Init+0x12>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80028b6:	2001      	movs	r0, #1
 80028b8:	f7ff ff28 	bl	800270c <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 80028bc:	2800      	cmp	r0, #0
 80028be:	d0f2      	beq.n	80028a6 <HAL_RTC_Init+0xca>
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 80028c0:	6823      	ldr	r3, [r4, #0]
        prescaler = prescaler - 1U;
 80028c2:	1e42      	subs	r2, r0, #1
 80028c4:	e7ce      	b.n	8002864 <HAL_RTC_Init+0x88>
    return HAL_ERROR;
 80028c6:	2001      	movs	r0, #1
}
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	40006c00 	.word	0x40006c00

080028d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80028d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028d4:	461d      	mov	r5, r3
 80028d6:	b082      	sub	sp, #8
 80028d8:	460f      	mov	r7, r1
 80028da:	4616      	mov	r6, r2
 80028dc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80028de:	4680      	mov	r8, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80028e0:	f7fe fe9a 	bl	8001618 <HAL_GetTick>
 80028e4:	442c      	add	r4, r5
 80028e6:	eba4 0900 	sub.w	r9, r4, r0
  tmp_tickstart = HAL_GetTick();
 80028ea:	f7fe fe95 	bl	8001618 <HAL_GetTick>
 80028ee:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80028f0:	4b28      	ldr	r3, [pc, #160]	@ (8002994 <SPI_WaitFlagStateUntilTimeout+0xc4>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 80028f8:	fb09 f303 	mul.w	r3, r9, r3
 80028fc:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028fe:	f8d8 3000 	ldr.w	r3, [r8]
 8002902:	e001      	b.n	8002908 <SPI_WaitFlagStateUntilTimeout+0x38>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002904:	1c6a      	adds	r2, r5, #1
 8002906:	d10b      	bne.n	8002920 <SPI_WaitFlagStateUntilTimeout+0x50>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002908:	689c      	ldr	r4, [r3, #8]
 800290a:	ea37 0404 	bics.w	r4, r7, r4
 800290e:	bf0c      	ite	eq
 8002910:	2401      	moveq	r4, #1
 8002912:	2400      	movne	r4, #0
 8002914:	42b4      	cmp	r4, r6
 8002916:	d1f5      	bne.n	8002904 <SPI_WaitFlagStateUntilTimeout+0x34>
      }
      count--;
    }
  }

  return HAL_OK;
 8002918:	2000      	movs	r0, #0
}
 800291a:	b002      	add	sp, #8
 800291c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002920:	f7fe fe7a 	bl	8001618 <HAL_GetTick>
 8002924:	eba0 000a 	sub.w	r0, r0, sl
 8002928:	4548      	cmp	r0, r9
 800292a:	d208      	bcs.n	800293e <SPI_WaitFlagStateUntilTimeout+0x6e>
      if (count == 0U)
 800292c:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800292e:	2b00      	cmp	r3, #0
      count--;
 8002930:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8002932:	bf08      	it	eq
 8002934:	f04f 0900 	moveq.w	r9, #0
      count--;
 8002938:	3b01      	subs	r3, #1
 800293a:	9301      	str	r3, [sp, #4]
 800293c:	e7df      	b.n	80028fe <SPI_WaitFlagStateUntilTimeout+0x2e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800293e:	e9d8 3100 	ldrd	r3, r1, [r8]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002942:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002944:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002948:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800294c:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800294e:	d014      	beq.n	800297a <SPI_WaitFlagStateUntilTimeout+0xaa>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002950:	f8d8 2028 	ldr.w	r2, [r8, #40]	@ 0x28
 8002954:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8002958:	d107      	bne.n	800296a <SPI_WaitFlagStateUntilTimeout+0x9a>
          SPI_RESET_CRC(hspi);
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002960:	601a      	str	r2, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002968:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800296a:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 800296c:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 800296e:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 8002970:	f888 2051 	strb.w	r2, [r8, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002974:	f888 3050 	strb.w	r3, [r8, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002978:	e7cf      	b.n	800291a <SPI_WaitFlagStateUntilTimeout+0x4a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800297a:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800297e:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8002982:	d002      	beq.n	800298a <SPI_WaitFlagStateUntilTimeout+0xba>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002984:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8002988:	d1e2      	bne.n	8002950 <SPI_WaitFlagStateUntilTimeout+0x80>
          __HAL_SPI_DISABLE(hspi);
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	e7dd      	b.n	8002950 <SPI_WaitFlagStateUntilTimeout+0x80>
 8002994:	20000000 	.word	0x20000000

08002998 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002998:	b570      	push	{r4, r5, r6, lr}
 800299a:	460d      	mov	r5, r1
 800299c:	4614      	mov	r4, r2
 800299e:	b082      	sub	sp, #8
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80029a0:	2201      	movs	r2, #1
 80029a2:	2102      	movs	r1, #2
 80029a4:	462b      	mov	r3, r5
 80029a6:	9400      	str	r4, [sp, #0]
{
 80029a8:	4606      	mov	r6, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80029aa:	f7ff ff91 	bl	80028d0 <SPI_WaitFlagStateUntilTimeout>
 80029ae:	b948      	cbnz	r0, 80029c4 <SPI_EndRxTxTransaction+0x2c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029b0:	4602      	mov	r2, r0
 80029b2:	462b      	mov	r3, r5
 80029b4:	2180      	movs	r1, #128	@ 0x80
 80029b6:	4630      	mov	r0, r6
 80029b8:	9400      	str	r4, [sp, #0]
 80029ba:	f7ff ff89 	bl	80028d0 <SPI_WaitFlagStateUntilTimeout>
 80029be:	b908      	cbnz	r0, 80029c4 <SPI_EndRxTxTransaction+0x2c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 80029c0:	b002      	add	sp, #8
 80029c2:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_TIMEOUT;
 80029c4:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029c6:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 80029c8:	f043 0320 	orr.w	r3, r3, #32
 80029cc:	6573      	str	r3, [r6, #84]	@ 0x54
}
 80029ce:	b002      	add	sp, #8
 80029d0:	bd70      	pop	{r4, r5, r6, pc}
 80029d2:	bf00      	nop

080029d4 <HAL_SPI_Init>:
  if (hspi == NULL)
 80029d4:	2800      	cmp	r0, #0
 80029d6:	d058      	beq.n	8002a8a <HAL_SPI_Init+0xb6>
{
 80029d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80029da:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80029dc:	4604      	mov	r4, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d044      	beq.n	8002a6c <HAL_SPI_Init+0x98>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80029e2:	2300      	movs	r3, #0
 80029e4:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029e8:	2000      	movs	r0, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 80029ea:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029ee:	62a0      	str	r0, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80029f0:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d03f      	beq.n	8002a78 <HAL_SPI_Init+0xa4>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80029f8:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 80029fc:	2602      	movs	r6, #2
  hspi->State     = HAL_SPI_STATE_READY;
 80029fe:	f04f 0c01 	mov.w	ip, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a02:	2500      	movs	r5, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a04:	f402 4204 	and.w	r2, r2, #33792	@ 0x8400
 8002a08:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002a10:	f884 6051 	strb.w	r6, [r4, #81]	@ 0x51
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a14:	6926      	ldr	r6, [r4, #16]
 8002a16:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	f006 0602 	and.w	r6, r6, #2
 8002a20:	4333      	orrs	r3, r6
 8002a22:	6966      	ldr	r6, [r4, #20]
 8002a24:	69a1      	ldr	r1, [r4, #24]
 8002a26:	6a27      	ldr	r7, [r4, #32]
 8002a28:	ea06 060c 	and.w	r6, r6, ip
 8002a2c:	4333      	orrs	r3, r6
 8002a2e:	69e6      	ldr	r6, [r4, #28]
 8002a30:	f007 0e80 	and.w	lr, r7, #128	@ 0x80
 8002a34:	f401 7700 	and.w	r7, r1, #512	@ 0x200
 8002a38:	f006 0638 	and.w	r6, r6, #56	@ 0x38
 8002a3c:	433b      	orrs	r3, r7
  __HAL_SPI_DISABLE(hspi);
 8002a3e:	6822      	ldr	r2, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a40:	4333      	orrs	r3, r6
 8002a42:	ea43 030e 	orr.w	r3, r3, lr
 8002a46:	4303      	orrs	r3, r0
  __HAL_SPI_DISABLE(hspi);
 8002a48:	6810      	ldr	r0, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002a4a:	0c09      	lsrs	r1, r1, #16
 8002a4c:	f001 0104 	and.w	r1, r1, #4
  __HAL_SPI_DISABLE(hspi);
 8002a50:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8002a54:	6010      	str	r0, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a56:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002a58:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a5a:	69d3      	ldr	r3, [r2, #28]
  return HAL_OK;
 8002a5c:	4628      	mov	r0, r5
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a5e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002a62:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a64:	6565      	str	r5, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002a66:	f884 c051 	strb.w	ip, [r4, #81]	@ 0x51
}
 8002a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a6c:	6842      	ldr	r2, [r0, #4]
 8002a6e:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8002a72:	d0b9      	beq.n	80029e8 <HAL_SPI_Init+0x14>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a74:	61c3      	str	r3, [r0, #28]
 8002a76:	e7b7      	b.n	80029e8 <HAL_SPI_Init+0x14>
    HAL_SPI_MspInit(hspi);
 8002a78:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8002a7a:	f884 2050 	strb.w	r2, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 8002a7e:	f7fe fc5f 	bl	8001340 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a82:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8002a84:	f400 5000 	and.w	r0, r0, #8192	@ 0x2000
 8002a88:	e7b6      	b.n	80029f8 <HAL_SPI_Init+0x24>
    return HAL_ERROR;
 8002a8a:	2001      	movs	r0, #1
}
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop

08002a90 <HAL_SPI_Transmit>:
{
 8002a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a94:	4604      	mov	r4, r0
 8002a96:	b082      	sub	sp, #8
 8002a98:	461d      	mov	r5, r3
 8002a9a:	460f      	mov	r7, r1
 8002a9c:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 8002a9e:	f7fe fdbb 	bl	8001618 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8002aa2:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d166      	bne.n	8002b78 <HAL_SPI_Transmit+0xe8>
  if ((pData == NULL) || (Size == 0U))
 8002aaa:	4606      	mov	r6, r0
 8002aac:	b2d8      	uxtb	r0, r3
 8002aae:	2f00      	cmp	r7, #0
 8002ab0:	d05f      	beq.n	8002b72 <HAL_SPI_Transmit+0xe2>
 8002ab2:	f1b8 0f00 	cmp.w	r8, #0
 8002ab6:	d05c      	beq.n	8002b72 <HAL_SPI_Transmit+0xe2>
  __HAL_LOCK(hspi);
 8002ab8:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d05b      	beq.n	8002b78 <HAL_SPI_Transmit+0xe8>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ac0:	2203      	movs	r2, #3
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ac2:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ac4:	f884 2051 	strb.w	r2, [r4, #81]	@ 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ac8:	68a2      	ldr	r2, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002aca:	6563      	str	r3, [r4, #84]	@ 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002acc:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002ad0:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002ad2:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002ad4:	f8a4 8036 	strh.w	r8, [r4, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002ad8:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->RxXferCount = 0U;
 8002ada:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8002adc:	6463      	str	r3, [r4, #68]	@ 0x44
  __HAL_LOCK(hspi);
 8002ade:	f884 0050 	strb.w	r0, [r4, #80]	@ 0x50
    __HAL_SPI_DISABLE(hspi);
 8002ae2:	6823      	ldr	r3, [r4, #0]
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002ae4:	6327      	str	r7, [r4, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002ae6:	f8a4 8034 	strh.w	r8, [r4, #52]	@ 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002aea:	d107      	bne.n	8002afc <HAL_SPI_Transmit+0x6c>
    __HAL_SPI_DISABLE(hspi);
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002af2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002afa:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	0652      	lsls	r2, r2, #25
 8002b00:	d53e      	bpl.n	8002b80 <HAL_SPI_Transmit+0xf0>
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b02:	68e2      	ldr	r2, [r4, #12]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b04:	6861      	ldr	r1, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b06:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 8002b0a:	d042      	beq.n	8002b92 <HAL_SPI_Transmit+0x102>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b0c:	2900      	cmp	r1, #0
 8002b0e:	d161      	bne.n	8002bd4 <HAL_SPI_Transmit+0x144>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002b10:	783a      	ldrb	r2, [r7, #0]
 8002b12:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 8002b14:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b16:	6b22      	ldr	r2, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8002b18:	3b01      	subs	r3, #1
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b1a:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 8002b1c:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b1e:	6322      	str	r2, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8002b20:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8002b22:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	b993      	cbnz	r3, 8002b4e <HAL_SPI_Transmit+0xbe>
 8002b28:	e058      	b.n	8002bdc <HAL_SPI_Transmit+0x14c>
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002b2a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8002b2c:	7812      	ldrb	r2, [r2, #0]
 8002b2e:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8002b30:	f8b4 c036 	ldrh.w	ip, [r4, #54]	@ 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b34:	6b23      	ldr	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8002b36:	f10c 3cff 	add.w	ip, ip, #4294967295
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b3a:	3301      	adds	r3, #1
        hspi->TxXferCount--;
 8002b3c:	fa1f fc8c 	uxth.w	ip, ip
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b40:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8002b42:	f8a4 c036 	strh.w	ip, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8002b46:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8002b48:	b289      	uxth	r1, r1
 8002b4a:	2900      	cmp	r1, #0
 8002b4c:	d046      	beq.n	8002bdc <HAL_SPI_Transmit+0x14c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b4e:	6823      	ldr	r3, [r4, #0]
 8002b50:	689a      	ldr	r2, [r3, #8]
 8002b52:	0792      	lsls	r2, r2, #30
 8002b54:	d4e9      	bmi.n	8002b2a <HAL_SPI_Transmit+0x9a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b56:	f7fe fd5f 	bl	8001618 <HAL_GetTick>
 8002b5a:	1b80      	subs	r0, r0, r6
 8002b5c:	42a8      	cmp	r0, r5
 8002b5e:	d3f2      	bcc.n	8002b46 <HAL_SPI_Transmit+0xb6>
 8002b60:	1c6b      	adds	r3, r5, #1
 8002b62:	d0f0      	beq.n	8002b46 <HAL_SPI_Transmit+0xb6>
          hspi->State = HAL_SPI_STATE_READY;
 8002b64:	2301      	movs	r3, #1
 8002b66:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002b6a:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8002b6c:	2003      	movs	r0, #3
          __HAL_UNLOCK(hspi);
 8002b6e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8002b72:	b002      	add	sp, #8
 8002b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8002b78:	2002      	movs	r0, #2
}
 8002b7a:	b002      	add	sp, #8
 8002b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_SPI_ENABLE(hspi);
 8002b80:	681a      	ldr	r2, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b82:	6861      	ldr	r1, [r4, #4]
    __HAL_SPI_ENABLE(hspi);
 8002b84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b88:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b8a:	68e2      	ldr	r2, [r4, #12]
 8002b8c:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 8002b90:	d1bc      	bne.n	8002b0c <HAL_SPI_Transmit+0x7c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b92:	2900      	cmp	r1, #0
 8002b94:	d040      	beq.n	8002c18 <HAL_SPI_Transmit+0x188>
 8002b96:	f1b8 0f01 	cmp.w	r8, #1
 8002b9a:	d03d      	beq.n	8002c18 <HAL_SPI_Transmit+0x188>
    while (hspi->TxXferCount > 0U)
 8002b9c:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8002b9e:	b292      	uxth	r2, r2
 8002ba0:	b96a      	cbnz	r2, 8002bbe <HAL_SPI_Transmit+0x12e>
 8002ba2:	e01b      	b.n	8002bdc <HAL_SPI_Transmit+0x14c>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002ba4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8002ba6:	f832 1b02 	ldrh.w	r1, [r2], #2
 8002baa:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 8002bac:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bae:	6322      	str	r2, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8002bb6:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	b17b      	cbz	r3, 8002bdc <HAL_SPI_Transmit+0x14c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002bbc:	6823      	ldr	r3, [r4, #0]
 8002bbe:	689a      	ldr	r2, [r3, #8]
 8002bc0:	0790      	lsls	r0, r2, #30
 8002bc2:	d4ef      	bmi.n	8002ba4 <HAL_SPI_Transmit+0x114>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bc4:	f7fe fd28 	bl	8001618 <HAL_GetTick>
 8002bc8:	1b80      	subs	r0, r0, r6
 8002bca:	42a8      	cmp	r0, r5
 8002bcc:	d3f3      	bcc.n	8002bb6 <HAL_SPI_Transmit+0x126>
 8002bce:	1c69      	adds	r1, r5, #1
 8002bd0:	d0f1      	beq.n	8002bb6 <HAL_SPI_Transmit+0x126>
 8002bd2:	e7c7      	b.n	8002b64 <HAL_SPI_Transmit+0xd4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bd4:	f1b8 0f01 	cmp.w	r8, #1
 8002bd8:	d1a3      	bne.n	8002b22 <HAL_SPI_Transmit+0x92>
 8002bda:	e799      	b.n	8002b10 <HAL_SPI_Transmit+0x80>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002bdc:	4632      	mov	r2, r6
 8002bde:	4629      	mov	r1, r5
 8002be0:	4620      	mov	r0, r4
 8002be2:	f7ff fed9 	bl	8002998 <SPI_EndRxTxTransaction>
 8002be6:	b108      	cbz	r0, 8002bec <HAL_SPI_Transmit+0x15c>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002be8:	2320      	movs	r3, #32
 8002bea:	6563      	str	r3, [r4, #84]	@ 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002bec:	68a3      	ldr	r3, [r4, #8]
 8002bee:	b933      	cbnz	r3, 8002bfe <HAL_SPI_Transmit+0x16e>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002bf0:	6822      	ldr	r2, [r4, #0]
 8002bf2:	9301      	str	r3, [sp, #4]
 8002bf4:	68d3      	ldr	r3, [r2, #12]
 8002bf6:	9301      	str	r3, [sp, #4]
 8002bf8:	6893      	ldr	r3, [r2, #8]
 8002bfa:	9301      	str	r3, [sp, #4]
 8002bfc:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8002bfe:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8002c00:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8002c02:	f884 2051 	strb.w	r2, [r4, #81]	@ 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c06:	6d60      	ldr	r0, [r4, #84]	@ 0x54
  __HAL_UNLOCK(hspi);
 8002c08:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c0c:	1ac0      	subs	r0, r0, r3
 8002c0e:	bf18      	it	ne
 8002c10:	2001      	movne	r0, #1
}
 8002c12:	b002      	add	sp, #8
 8002c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002c18:	f837 2b02 	ldrh.w	r2, [r7], #2
 8002c1c:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8002c1e:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c20:	6327      	str	r7, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8002c22:	3a01      	subs	r2, #1
 8002c24:	b292      	uxth	r2, r2
 8002c26:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8002c28:	e7b8      	b.n	8002b9c <HAL_SPI_Transmit+0x10c>
 8002c2a:	bf00      	nop

08002c2c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c2c:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c2e:	6a02      	ldr	r2, [r0, #32]
{
 8002c30:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c32:	f022 0201 	bic.w	r2, r2, #1
 8002c36:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c38:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c3a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c3c:	680e      	ldr	r6, [r1, #0]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c3e:	4d0f      	ldr	r5, [pc, #60]	@ (8002c7c <TIM_OC1_SetConfig+0x50>)
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c40:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002c44:	4332      	orrs	r2, r6
  tmpccer |= OC_Config->OCPolarity;
 8002c46:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8002c48:	f023 0302 	bic.w	r3, r3, #2
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c4c:	42a8      	cmp	r0, r5
  tmpccer |= OC_Config->OCPolarity;
 8002c4e:	ea43 0306 	orr.w	r3, r3, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c52:	d006      	beq.n	8002c62 <TIM_OC1_SetConfig+0x36>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c54:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002c56:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002c58:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8002c5a:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 8002c5c:	6341      	str	r1, [r0, #52]	@ 0x34
  TIMx->CCER = tmpccer;
 8002c5e:	6203      	str	r3, [r0, #32]
}
 8002c60:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 8002c62:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c64:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002c68:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c6a:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c6e:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8002c72:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c74:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c78:	432c      	orrs	r4, r5
 8002c7a:	e7eb      	b.n	8002c54 <TIM_OC1_SetConfig+0x28>
 8002c7c:	40012c00 	.word	0x40012c00

08002c80 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c80:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c82:	6a02      	ldr	r2, [r0, #32]
{
 8002c84:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c86:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c8a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c8c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c8e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c90:	680e      	ldr	r6, [r1, #0]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c92:	4d10      	ldr	r5, [pc, #64]	@ (8002cd4 <TIM_OC3_SetConfig+0x54>)
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c94:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002c98:	4332      	orrs	r2, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c9a:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8002c9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ca0:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ca2:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ca6:	d006      	beq.n	8002cb6 <TIM_OC3_SetConfig+0x36>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002ca8:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002caa:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002cac:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8002cae:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 8002cb0:	63c1      	str	r1, [r0, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 8002cb2:	6203      	str	r3, [r0, #32]
}
 8002cb4:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002cb6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8002cb8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002cbc:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002cc0:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002cc4:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8002cc8:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8002cca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002cce:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 8002cd2:	e7e9      	b.n	8002ca8 <TIM_OC3_SetConfig+0x28>
 8002cd4:	40012c00 	.word	0x40012c00

08002cd8 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cd8:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002cda:	6a02      	ldr	r2, [r0, #32]
{
 8002cdc:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002cde:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002ce2:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ce4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ce6:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ce8:	f8d1 c000 	ldr.w	ip, [r1]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cec:	4d0c      	ldr	r5, [pc, #48]	@ (8002d20 <TIM_OC4_SetConfig+0x48>)
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002cee:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cf2:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002cf6:	f8d1 c008 	ldr.w	ip, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8002cfa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cfe:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d00:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d04:	d006      	beq.n	8002d14 <TIM_OC4_SetConfig+0x3c>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d06:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002d08:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002d0a:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8002d0c:	bc30      	pop	{r4, r5}
  TIMx->CCR4 = OC_Config->Pulse;
 8002d0e:	6401      	str	r1, [r0, #64]	@ 0x40
  TIMx->CCER = tmpccer;
 8002d10:	6203      	str	r3, [r0, #32]
}
 8002d12:	4770      	bx	lr
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d14:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d16:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d1a:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8002d1e:	e7f2      	b.n	8002d06 <TIM_OC4_SetConfig+0x2e>
 8002d20:	40012c00 	.word	0x40012c00

08002d24 <HAL_TIM_OC_Start>:
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d24:	bb39      	cbnz	r1, 8002d76 <HAL_TIM_OC_Start+0x52>
 8002d26:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d12b      	bne.n	8002d86 <HAL_TIM_OC_Start+0x62>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d2e:	2302      	movs	r3, #2
 8002d30:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d34:	2201      	movs	r2, #1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d36:	6803      	ldr	r3, [r0, #0]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d38:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d3c:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d3e:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 8002d40:	ea20 0002 	bic.w	r0, r0, r2
{
 8002d44:	b410      	push	{r4}
  TIMx->CCER &= ~tmp;
 8002d46:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d48:	6a19      	ldr	r1, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d4a:	4c20      	ldr	r4, [pc, #128]	@ (8002dcc <HAL_TIM_OC_Start+0xa8>)
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d4c:	430a      	orrs	r2, r1
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d4e:	42a3      	cmp	r3, r4
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d50:	621a      	str	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d52:	d01a      	beq.n	8002d8a <HAL_TIM_OC_Start+0x66>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d58:	d01b      	beq.n	8002d92 <HAL_TIM_OC_Start+0x6e>
 8002d5a:	4a1d      	ldr	r2, [pc, #116]	@ (8002dd0 <HAL_TIM_OC_Start+0xac>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d018      	beq.n	8002d92 <HAL_TIM_OC_Start+0x6e>
 8002d60:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d014      	beq.n	8002d92 <HAL_TIM_OC_Start+0x6e>
      __HAL_TIM_ENABLE(htim);
 8002d68:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8002d6a:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 8002d6c:	f042 0201 	orr.w	r2, r2, #1
}
 8002d70:	bc10      	pop	{r4}
      __HAL_TIM_ENABLE(htim);
 8002d72:	601a      	str	r2, [r3, #0]
}
 8002d74:	4770      	bx	lr
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d76:	2904      	cmp	r1, #4
 8002d78:	d017      	beq.n	8002daa <HAL_TIM_OC_Start+0x86>
 8002d7a:	2908      	cmp	r1, #8
 8002d7c:	d01d      	beq.n	8002dba <HAL_TIM_OC_Start+0x96>
 8002d7e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d00d      	beq.n	8002da2 <HAL_TIM_OC_Start+0x7e>
    return HAL_ERROR;
 8002d86:	2001      	movs	r0, #1
}
 8002d88:	4770      	bx	lr
    __HAL_TIM_MOE_ENABLE(htim);
 8002d8a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d8c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d90:	645a      	str	r2, [r3, #68]	@ 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d98:	2a06      	cmp	r2, #6
 8002d9a:	d1e5      	bne.n	8002d68 <HAL_TIM_OC_Start+0x44>
  return HAL_OK;
 8002d9c:	2000      	movs	r0, #0
}
 8002d9e:	bc10      	pop	{r4}
 8002da0:	4770      	bx	lr
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002da2:	2302      	movs	r3, #2
 8002da4:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
 8002da8:	e7c4      	b.n	8002d34 <HAL_TIM_OC_Start+0x10>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002daa:	f890 303f 	ldrb.w	r3, [r0, #63]	@ 0x3f
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d1e9      	bne.n	8002d86 <HAL_TIM_OC_Start+0x62>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002db2:	2302      	movs	r3, #2
 8002db4:	f880 303f 	strb.w	r3, [r0, #63]	@ 0x3f
 8002db8:	e7bc      	b.n	8002d34 <HAL_TIM_OC_Start+0x10>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002dba:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d1e1      	bne.n	8002d86 <HAL_TIM_OC_Start+0x62>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8002dc8:	e7b4      	b.n	8002d34 <HAL_TIM_OC_Start+0x10>
 8002dca:	bf00      	nop
 8002dcc:	40012c00 	.word	0x40012c00
 8002dd0:	40000400 	.word	0x40000400

08002dd4 <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop

08002dd8 <HAL_TIM_PWM_Start>:
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 8002dd8:	f7ff bfa4 	b.w	8002d24 <HAL_TIM_OC_Start>

08002ddc <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002ddc:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d071      	beq.n	8002ec8 <HAL_TIM_ConfigClockSource+0xec>
 8002de4:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8002de6:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8002de8:	2001      	movs	r0, #1
{
 8002dea:	b430      	push	{r4, r5}
  tmpsmcr = htim->Instance->SMCR;
 8002dec:	6814      	ldr	r4, [r2, #0]
  __HAL_LOCK(htim);
 8002dee:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002df2:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002df6:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002df8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002dfc:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002e00:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8002e02:	680b      	ldr	r3, [r1, #0]
 8002e04:	2b60      	cmp	r3, #96	@ 0x60
 8002e06:	d061      	beq.n	8002ecc <HAL_TIM_ConfigClockSource+0xf0>
 8002e08:	d824      	bhi.n	8002e54 <HAL_TIM_ConfigClockSource+0x78>
 8002e0a:	2b40      	cmp	r3, #64	@ 0x40
 8002e0c:	d077      	beq.n	8002efe <HAL_TIM_ConfigClockSource+0x122>
 8002e0e:	d94a      	bls.n	8002ea6 <HAL_TIM_ConfigClockSource+0xca>
 8002e10:	2b50      	cmp	r3, #80	@ 0x50
 8002e12:	d117      	bne.n	8002e44 <HAL_TIM_ConfigClockSource+0x68>
                               sClockSourceConfig->ClockPolarity,
 8002e14:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8002e16:	68c8      	ldr	r0, [r1, #12]
  tmpccer = TIMx->CCER;
 8002e18:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e1a:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8002e1e:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e20:	6a23      	ldr	r3, [r4, #32]
 8002e22:	f023 0301 	bic.w	r3, r3, #1
 8002e26:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e28:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e2e:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002e32:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8002e34:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8002e36:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e3c:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8002e40:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002e42:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002e44:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8002e46:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8002e48:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8002e4c:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 8002e50:	bc30      	pop	{r4, r5}
 8002e52:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8002e54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e58:	d0f3      	beq.n	8002e42 <HAL_TIM_ConfigClockSource+0x66>
 8002e5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e5e:	d110      	bne.n	8002e82 <HAL_TIM_ConfigClockSource+0xa6>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e60:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002e64:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e66:	432b      	orrs	r3, r5
 8002e68:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e6a:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e6e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8002e72:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8002e74:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e76:	68a3      	ldr	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002e78:	2000      	movs	r0, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e7e:	60a3      	str	r3, [r4, #8]
      break;
 8002e80:	e7e0      	b.n	8002e44 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8002e82:	2b70      	cmp	r3, #112	@ 0x70
 8002e84:	d1de      	bne.n	8002e44 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e86:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002e8a:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e8c:	432b      	orrs	r3, r5
 8002e8e:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e90:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e94:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8002e98:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8002e9a:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8002e9c:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e9e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8002ea2:	60a3      	str	r3, [r4, #8]
      break;
 8002ea4:	e7cd      	b.n	8002e42 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8002ea6:	2b20      	cmp	r3, #32
 8002ea8:	d002      	beq.n	8002eb0 <HAL_TIM_ConfigClockSource+0xd4>
 8002eaa:	d909      	bls.n	8002ec0 <HAL_TIM_ConfigClockSource+0xe4>
 8002eac:	2b30      	cmp	r3, #48	@ 0x30
 8002eae:	d1c9      	bne.n	8002e44 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 8002eb0:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002eb2:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002eb6:	430b      	orrs	r3, r1
 8002eb8:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8002ebc:	60a3      	str	r3, [r4, #8]
}
 8002ebe:	e7c0      	b.n	8002e42 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8002ec0:	f033 0110 	bics.w	r1, r3, #16
 8002ec4:	d1be      	bne.n	8002e44 <HAL_TIM_ConfigClockSource+0x68>
 8002ec6:	e7f3      	b.n	8002eb0 <HAL_TIM_ConfigClockSource+0xd4>
  __HAL_LOCK(htim);
 8002ec8:	2002      	movs	r0, #2
}
 8002eca:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 8002ecc:	6a23      	ldr	r3, [r4, #32]
                               sClockSourceConfig->ClockPolarity,
 8002ece:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8002ed0:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ed2:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ed4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ed8:	f021 0110 	bic.w	r1, r1, #16
 8002edc:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ede:	69a1      	ldr	r1, [r4, #24]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ee0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ee4:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ee8:	ea41 3100 	orr.w	r1, r1, r0, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002eec:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 8002eee:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8002ef0:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ef2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ef6:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8002efa:	60a3      	str	r3, [r4, #8]
}
 8002efc:	e7a1      	b.n	8002e42 <HAL_TIM_ConfigClockSource+0x66>
                               sClockSourceConfig->ClockPolarity,
 8002efe:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8002f00:	68c8      	ldr	r0, [r1, #12]
  tmpccer = TIMx->CCER;
 8002f02:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f04:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8002f08:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f0a:	6a23      	ldr	r3, [r4, #32]
 8002f0c:	f023 0301 	bic.w	r3, r3, #1
 8002f10:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f12:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f14:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f18:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002f1c:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8002f1e:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8002f20:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f26:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8002f2a:	60a3      	str	r3, [r4, #8]
}
 8002f2c:	e789      	b.n	8002e42 <HAL_TIM_ConfigClockSource+0x66>
 8002f2e:	bf00      	nop

08002f30 <TIM_Base_SetConfig>:
{
 8002f30:	b470      	push	{r4, r5, r6}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f32:	4e1f      	ldr	r6, [pc, #124]	@ (8002fb0 <TIM_Base_SetConfig+0x80>)
  tmpcr1 = TIMx->CR1;
 8002f34:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f36:	42b0      	cmp	r0, r6
  TIMx->PSC = Structure->Prescaler;
 8002f38:	680c      	ldr	r4, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f3a:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f3c:	694a      	ldr	r2, [r1, #20]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f3e:	d026      	beq.n	8002f8e <TIM_Base_SetConfig+0x5e>
 8002f40:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002f44:	d015      	beq.n	8002f72 <TIM_Base_SetConfig+0x42>
 8002f46:	f5a6 3694 	sub.w	r6, r6, #75776	@ 0x12800
 8002f4a:	42b0      	cmp	r0, r6
 8002f4c:	d011      	beq.n	8002f72 <TIM_Base_SetConfig+0x42>
 8002f4e:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8002f52:	42b0      	cmp	r0, r6
 8002f54:	d00d      	beq.n	8002f72 <TIM_Base_SetConfig+0x42>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f5a:	62c5      	str	r5, [r0, #44]	@ 0x2c
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f5c:	431a      	orrs	r2, r3
  TIMx->PSC = Structure->Prescaler;
 8002f5e:	6284      	str	r4, [r0, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8002f60:	2101      	movs	r1, #1
}
 8002f62:	bc70      	pop	{r4, r5, r6}
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002f64:	6803      	ldr	r3, [r0, #0]
 8002f66:	f043 0304 	orr.w	r3, r3, #4
 8002f6a:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 8002f6c:	6141      	str	r1, [r0, #20]
  TIMx->CR1 = tmpcr1;
 8002f6e:	6002      	str	r2, [r0, #0]
}
 8002f70:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8002f72:	684e      	ldr	r6, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f78:	68c9      	ldr	r1, [r1, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f7a:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f80:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f86:	62c5      	str	r5, [r0, #44]	@ 0x2c
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f88:	431a      	orrs	r2, r3
  TIMx->PSC = Structure->Prescaler;
 8002f8a:	6284      	str	r4, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f8c:	e7e8      	b.n	8002f60 <TIM_Base_SetConfig+0x30>
    tmpcr1 |= Structure->CounterMode;
 8002f8e:	684e      	ldr	r6, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002f94:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f96:	68ce      	ldr	r6, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f9c:	62c5      	str	r5, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002f9e:	6284      	str	r4, [r0, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8002fa0:	6909      	ldr	r1, [r1, #16]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fa2:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fa4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002fa8:	431a      	orrs	r2, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8002faa:	6301      	str	r1, [r0, #48]	@ 0x30
 8002fac:	e7d8      	b.n	8002f60 <TIM_Base_SetConfig+0x30>
 8002fae:	bf00      	nop
 8002fb0:	40012c00 	.word	0x40012c00

08002fb4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002fb4:	b350      	cbz	r0, 800300c <HAL_TIM_Base_Init+0x58>
{
 8002fb6:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8002fb8:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002fbc:	4604      	mov	r4, r0
 8002fbe:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002fc2:	b1f3      	cbz	r3, 8003002 <HAL_TIM_Base_Init+0x4e>
  htim->State = HAL_TIM_STATE_BUSY;
 8002fc4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fc6:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8002fc8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fcc:	f851 0b04 	ldr.w	r0, [r1], #4
 8002fd0:	f7ff ffae 	bl	8002f30 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fda:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8002fde:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8002fe2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8002fe6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fea:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002fee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002ff2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8002ff6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002ffa:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8002ffe:	2000      	movs	r0, #0
}
 8003000:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003002:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003006:	f7fe f9fd 	bl	8001404 <HAL_TIM_Base_MspInit>
 800300a:	e7db      	b.n	8002fc4 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 800300c:	2001      	movs	r0, #1
}
 800300e:	4770      	bx	lr

08003010 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003010:	b350      	cbz	r0, 8003068 <HAL_TIM_PWM_Init+0x58>
{
 8003012:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8003014:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003018:	4604      	mov	r4, r0
 800301a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800301e:	b1f3      	cbz	r3, 800305e <HAL_TIM_PWM_Init+0x4e>
  htim->State = HAL_TIM_STATE_BUSY;
 8003020:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003022:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8003024:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003028:	f851 0b04 	ldr.w	r0, [r1], #4
 800302c:	f7ff ff80 	bl	8002f30 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003030:	2301      	movs	r3, #1
 8003032:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003036:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800303a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800303e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003042:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003046:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800304a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800304e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003052:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003056:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800305a:	2000      	movs	r0, #0
}
 800305c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800305e:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003062:	f7ff feb7 	bl	8002dd4 <HAL_TIM_PWM_MspInit>
 8003066:	e7db      	b.n	8003020 <HAL_TIM_PWM_Init+0x10>
    return HAL_ERROR;
 8003068:	2001      	movs	r0, #1
}
 800306a:	4770      	bx	lr

0800306c <TIM_OC2_SetConfig>:
  tmpccer = TIMx->CCER;
 800306c:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800306e:	6a02      	ldr	r2, [r0, #32]
{
 8003070:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003072:	f022 0210 	bic.w	r2, r2, #16
 8003076:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003078:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800307a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800307c:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800307e:	4d11      	ldr	r5, [pc, #68]	@ (80030c4 <TIM_OC2_SetConfig+0x58>)
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003080:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003084:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003088:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800308a:	f023 0320 	bic.w	r3, r3, #32
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800308e:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003090:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003094:	d006      	beq.n	80030a4 <TIM_OC2_SetConfig+0x38>
  TIMx->CCR2 = OC_Config->Pulse;
 8003096:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003098:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800309a:	6182      	str	r2, [r0, #24]
}
 800309c:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 800309e:	6381      	str	r1, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 80030a0:	6203      	str	r3, [r0, #32]
}
 80030a2:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80030a4:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80030a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80030aa:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80030ae:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80030b2:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 80030b6:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80030b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80030bc:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 80030c0:	e7e9      	b.n	8003096 <TIM_OC2_SetConfig+0x2a>
 80030c2:	bf00      	nop
 80030c4:	40012c00 	.word	0x40012c00

080030c8 <HAL_TIM_PWM_ConfigChannel>:
{
 80030c8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80030ca:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d057      	beq.n	8003182 <HAL_TIM_PWM_ConfigChannel+0xba>
 80030d2:	2301      	movs	r3, #1
 80030d4:	4604      	mov	r4, r0
 80030d6:	460d      	mov	r5, r1
 80030d8:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 80030dc:	2a0c      	cmp	r2, #12
 80030de:	d808      	bhi.n	80030f2 <HAL_TIM_PWM_ConfigChannel+0x2a>
 80030e0:	e8df f002 	tbb	[pc, r2]
 80030e4:	0707071e 	.word	0x0707071e
 80030e8:	0707072e 	.word	0x0707072e
 80030ec:	0707073f 	.word	0x0707073f
 80030f0:	0c          	.byte	0x0c
 80030f1:	00          	.byte	0x00
 80030f2:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 80030f4:	2300      	movs	r3, #0
 80030f6:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80030fa:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030fc:	6800      	ldr	r0, [r0, #0]
 80030fe:	f7ff fdeb 	bl	8002cd8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003102:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003104:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003106:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800310a:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800310c:	69c3      	ldr	r3, [r0, #28]
 800310e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003112:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003114:	69c3      	ldr	r3, [r0, #28]
 8003116:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800311a:	61c3      	str	r3, [r0, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800311c:	2000      	movs	r0, #0
 800311e:	e7e9      	b.n	80030f4 <HAL_TIM_PWM_ConfigChannel+0x2c>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003120:	6800      	ldr	r0, [r0, #0]
 8003122:	f7ff fd83 	bl	8002c2c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003126:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003128:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800312a:	f043 0308 	orr.w	r3, r3, #8
 800312e:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003130:	6983      	ldr	r3, [r0, #24]
 8003132:	f023 0304 	bic.w	r3, r3, #4
 8003136:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003138:	6983      	ldr	r3, [r0, #24]
 800313a:	4313      	orrs	r3, r2
 800313c:	6183      	str	r3, [r0, #24]
      break;
 800313e:	e7ed      	b.n	800311c <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003140:	6800      	ldr	r0, [r0, #0]
 8003142:	f7ff ff93 	bl	800306c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003146:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003148:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800314a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800314e:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003150:	6983      	ldr	r3, [r0, #24]
 8003152:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003156:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003158:	6983      	ldr	r3, [r0, #24]
 800315a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800315e:	6183      	str	r3, [r0, #24]
      break;
 8003160:	e7dc      	b.n	800311c <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003162:	6800      	ldr	r0, [r0, #0]
 8003164:	f7ff fd8c 	bl	8002c80 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003168:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800316a:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800316c:	f043 0308 	orr.w	r3, r3, #8
 8003170:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003172:	69c3      	ldr	r3, [r0, #28]
 8003174:	f023 0304 	bic.w	r3, r3, #4
 8003178:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800317a:	69c3      	ldr	r3, [r0, #28]
 800317c:	4313      	orrs	r3, r2
 800317e:	61c3      	str	r3, [r0, #28]
      break;
 8003180:	e7cc      	b.n	800311c <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_LOCK(htim);
 8003182:	2002      	movs	r0, #2
}
 8003184:	bd38      	pop	{r3, r4, r5, pc}
 8003186:	bf00      	nop

08003188 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003188:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 800318c:	2a01      	cmp	r2, #1
 800318e:	d027      	beq.n	80031e0 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8003190:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003192:	2002      	movs	r0, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003194:	681a      	ldr	r2, [r3, #0]
{
 8003196:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8003198:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 800319c:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800319e:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031a0:	4d10      	ldr	r5, [pc, #64]	@ (80031e4 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  tmpcr2 &= ~TIM_CR2_MMS;
 80031a2:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031a6:	4320      	orrs	r0, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031a8:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 80031aa:	6894      	ldr	r4, [r2, #8]
  htim->Instance->CR2 = tmpcr2;
 80031ac:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031ae:	d009      	beq.n	80031c4 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80031b0:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80031b4:	d006      	beq.n	80031c4 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80031b6:	480c      	ldr	r0, [pc, #48]	@ (80031e8 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 80031b8:	4282      	cmp	r2, r0
 80031ba:	d003      	beq.n	80031c4 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80031bc:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80031c0:	4282      	cmp	r2, r0
 80031c2:	d104      	bne.n	80031ce <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031c4:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031c6:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031ca:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031cc:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80031ce:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 80031d0:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 80031d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_READY;
 80031d6:	f883 103d 	strb.w	r1, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031da:	4610      	mov	r0, r2
}
 80031dc:	bc30      	pop	{r4, r5}
 80031de:	4770      	bx	lr
  __HAL_LOCK(htim);
 80031e0:	2002      	movs	r0, #2
}
 80031e2:	4770      	bx	lr
 80031e4:	40012c00 	.word	0x40012c00
 80031e8:	40000400 	.word	0x40000400

080031ec <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80031ec:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d023      	beq.n	800323c <HAL_TIMEx_ConfigBreakDeadTime+0x50>
 80031f4:	4602      	mov	r2, r0
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80031f6:	e9d1 0302 	ldrd	r0, r3, [r1, #8]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 80031fa:	f04f 0c00 	mov.w	ip, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80031fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003202:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003204:	6848      	ldr	r0, [r1, #4]
 8003206:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800320a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800320c:	6808      	ldr	r0, [r1, #0]
 800320e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003212:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003214:	6908      	ldr	r0, [r1, #16]
 8003216:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
{
 800321a:	b410      	push	{r4}
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800321c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800321e:	694c      	ldr	r4, [r1, #20]
 8003220:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003224:	69c8      	ldr	r0, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003226:	4323      	orrs	r3, r4
  htim->Instance->BDTR = tmpbdtr;
 8003228:	6811      	ldr	r1, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800322a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800322e:	4303      	orrs	r3, r0
  htim->Instance->BDTR = tmpbdtr;
 8003230:	644b      	str	r3, [r1, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 8003232:	f882 c03c 	strb.w	ip, [r2, #60]	@ 0x3c

  return HAL_OK;
 8003236:	4660      	mov	r0, ip
}
 8003238:	bc10      	pop	{r4}
 800323a:	4770      	bx	lr
  __HAL_LOCK(htim);
 800323c:	2002      	movs	r0, #2
}
 800323e:	4770      	bx	lr

08003240 <srand>:
 8003240:	b538      	push	{r3, r4, r5, lr}
 8003242:	4b10      	ldr	r3, [pc, #64]	@ (8003284 <srand+0x44>)
 8003244:	4604      	mov	r4, r0
 8003246:	681d      	ldr	r5, [r3, #0]
 8003248:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800324a:	b9b3      	cbnz	r3, 800327a <srand+0x3a>
 800324c:	2018      	movs	r0, #24
 800324e:	f001 fceb 	bl	8004c28 <malloc>
 8003252:	4602      	mov	r2, r0
 8003254:	6328      	str	r0, [r5, #48]	@ 0x30
 8003256:	b920      	cbnz	r0, 8003262 <srand+0x22>
 8003258:	2146      	movs	r1, #70	@ 0x46
 800325a:	4b0b      	ldr	r3, [pc, #44]	@ (8003288 <srand+0x48>)
 800325c:	480b      	ldr	r0, [pc, #44]	@ (800328c <srand+0x4c>)
 800325e:	f000 fe2d 	bl	8003ebc <__assert_func>
 8003262:	490b      	ldr	r1, [pc, #44]	@ (8003290 <srand+0x50>)
 8003264:	4b0b      	ldr	r3, [pc, #44]	@ (8003294 <srand+0x54>)
 8003266:	e9c0 1300 	strd	r1, r3, [r0]
 800326a:	4b0b      	ldr	r3, [pc, #44]	@ (8003298 <srand+0x58>)
 800326c:	2100      	movs	r1, #0
 800326e:	6083      	str	r3, [r0, #8]
 8003270:	230b      	movs	r3, #11
 8003272:	8183      	strh	r3, [r0, #12]
 8003274:	2001      	movs	r0, #1
 8003276:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800327a:	2200      	movs	r2, #0
 800327c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800327e:	611c      	str	r4, [r3, #16]
 8003280:	615a      	str	r2, [r3, #20]
 8003282:	bd38      	pop	{r3, r4, r5, pc}
 8003284:	20000018 	.word	0x20000018
 8003288:	080064b4 	.word	0x080064b4
 800328c:	080064cb 	.word	0x080064cb
 8003290:	abcd330e 	.word	0xabcd330e
 8003294:	e66d1234 	.word	0xe66d1234
 8003298:	0005deec 	.word	0x0005deec

0800329c <__cvt>:
 800329c:	2b00      	cmp	r3, #0
 800329e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032a2:	461d      	mov	r5, r3
 80032a4:	bfbb      	ittet	lt
 80032a6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80032aa:	461d      	movlt	r5, r3
 80032ac:	2300      	movge	r3, #0
 80032ae:	232d      	movlt	r3, #45	@ 0x2d
 80032b0:	b088      	sub	sp, #32
 80032b2:	4614      	mov	r4, r2
 80032b4:	bfb8      	it	lt
 80032b6:	4614      	movlt	r4, r2
 80032b8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80032ba:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80032bc:	7013      	strb	r3, [r2, #0]
 80032be:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80032c0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80032c4:	f023 0820 	bic.w	r8, r3, #32
 80032c8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80032cc:	d005      	beq.n	80032da <__cvt+0x3e>
 80032ce:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80032d2:	d100      	bne.n	80032d6 <__cvt+0x3a>
 80032d4:	3601      	adds	r6, #1
 80032d6:	2302      	movs	r3, #2
 80032d8:	e000      	b.n	80032dc <__cvt+0x40>
 80032da:	2303      	movs	r3, #3
 80032dc:	aa07      	add	r2, sp, #28
 80032de:	9204      	str	r2, [sp, #16]
 80032e0:	aa06      	add	r2, sp, #24
 80032e2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80032e6:	e9cd 3600 	strd	r3, r6, [sp]
 80032ea:	4622      	mov	r2, r4
 80032ec:	462b      	mov	r3, r5
 80032ee:	f000 fe8b 	bl	8004008 <_dtoa_r>
 80032f2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80032f6:	4607      	mov	r7, r0
 80032f8:	d119      	bne.n	800332e <__cvt+0x92>
 80032fa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80032fc:	07db      	lsls	r3, r3, #31
 80032fe:	d50e      	bpl.n	800331e <__cvt+0x82>
 8003300:	eb00 0906 	add.w	r9, r0, r6
 8003304:	2200      	movs	r2, #0
 8003306:	2300      	movs	r3, #0
 8003308:	4620      	mov	r0, r4
 800330a:	4629      	mov	r1, r5
 800330c:	f7fd fb4c 	bl	80009a8 <__aeabi_dcmpeq>
 8003310:	b108      	cbz	r0, 8003316 <__cvt+0x7a>
 8003312:	f8cd 901c 	str.w	r9, [sp, #28]
 8003316:	2230      	movs	r2, #48	@ 0x30
 8003318:	9b07      	ldr	r3, [sp, #28]
 800331a:	454b      	cmp	r3, r9
 800331c:	d31e      	bcc.n	800335c <__cvt+0xc0>
 800331e:	4638      	mov	r0, r7
 8003320:	9b07      	ldr	r3, [sp, #28]
 8003322:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003324:	1bdb      	subs	r3, r3, r7
 8003326:	6013      	str	r3, [r2, #0]
 8003328:	b008      	add	sp, #32
 800332a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800332e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003332:	eb00 0906 	add.w	r9, r0, r6
 8003336:	d1e5      	bne.n	8003304 <__cvt+0x68>
 8003338:	7803      	ldrb	r3, [r0, #0]
 800333a:	2b30      	cmp	r3, #48	@ 0x30
 800333c:	d10a      	bne.n	8003354 <__cvt+0xb8>
 800333e:	2200      	movs	r2, #0
 8003340:	2300      	movs	r3, #0
 8003342:	4620      	mov	r0, r4
 8003344:	4629      	mov	r1, r5
 8003346:	f7fd fb2f 	bl	80009a8 <__aeabi_dcmpeq>
 800334a:	b918      	cbnz	r0, 8003354 <__cvt+0xb8>
 800334c:	f1c6 0601 	rsb	r6, r6, #1
 8003350:	f8ca 6000 	str.w	r6, [sl]
 8003354:	f8da 3000 	ldr.w	r3, [sl]
 8003358:	4499      	add	r9, r3
 800335a:	e7d3      	b.n	8003304 <__cvt+0x68>
 800335c:	1c59      	adds	r1, r3, #1
 800335e:	9107      	str	r1, [sp, #28]
 8003360:	701a      	strb	r2, [r3, #0]
 8003362:	e7d9      	b.n	8003318 <__cvt+0x7c>

08003364 <__exponent>:
 8003364:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003366:	2900      	cmp	r1, #0
 8003368:	bfb6      	itet	lt
 800336a:	232d      	movlt	r3, #45	@ 0x2d
 800336c:	232b      	movge	r3, #43	@ 0x2b
 800336e:	4249      	neglt	r1, r1
 8003370:	2909      	cmp	r1, #9
 8003372:	7002      	strb	r2, [r0, #0]
 8003374:	7043      	strb	r3, [r0, #1]
 8003376:	dd29      	ble.n	80033cc <__exponent+0x68>
 8003378:	f10d 0307 	add.w	r3, sp, #7
 800337c:	461d      	mov	r5, r3
 800337e:	270a      	movs	r7, #10
 8003380:	fbb1 f6f7 	udiv	r6, r1, r7
 8003384:	461a      	mov	r2, r3
 8003386:	fb07 1416 	mls	r4, r7, r6, r1
 800338a:	3430      	adds	r4, #48	@ 0x30
 800338c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003390:	460c      	mov	r4, r1
 8003392:	2c63      	cmp	r4, #99	@ 0x63
 8003394:	4631      	mov	r1, r6
 8003396:	f103 33ff 	add.w	r3, r3, #4294967295
 800339a:	dcf1      	bgt.n	8003380 <__exponent+0x1c>
 800339c:	3130      	adds	r1, #48	@ 0x30
 800339e:	1e94      	subs	r4, r2, #2
 80033a0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80033a4:	4623      	mov	r3, r4
 80033a6:	1c41      	adds	r1, r0, #1
 80033a8:	42ab      	cmp	r3, r5
 80033aa:	d30a      	bcc.n	80033c2 <__exponent+0x5e>
 80033ac:	f10d 0309 	add.w	r3, sp, #9
 80033b0:	1a9b      	subs	r3, r3, r2
 80033b2:	42ac      	cmp	r4, r5
 80033b4:	bf88      	it	hi
 80033b6:	2300      	movhi	r3, #0
 80033b8:	3302      	adds	r3, #2
 80033ba:	4403      	add	r3, r0
 80033bc:	1a18      	subs	r0, r3, r0
 80033be:	b003      	add	sp, #12
 80033c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033c2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80033c6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80033ca:	e7ed      	b.n	80033a8 <__exponent+0x44>
 80033cc:	2330      	movs	r3, #48	@ 0x30
 80033ce:	3130      	adds	r1, #48	@ 0x30
 80033d0:	7083      	strb	r3, [r0, #2]
 80033d2:	70c1      	strb	r1, [r0, #3]
 80033d4:	1d03      	adds	r3, r0, #4
 80033d6:	e7f1      	b.n	80033bc <__exponent+0x58>

080033d8 <_printf_float>:
 80033d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033dc:	b091      	sub	sp, #68	@ 0x44
 80033de:	460c      	mov	r4, r1
 80033e0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80033e4:	4616      	mov	r6, r2
 80033e6:	461f      	mov	r7, r3
 80033e8:	4605      	mov	r5, r0
 80033ea:	f000 fce1 	bl	8003db0 <_localeconv_r>
 80033ee:	6803      	ldr	r3, [r0, #0]
 80033f0:	4618      	mov	r0, r3
 80033f2:	9308      	str	r3, [sp, #32]
 80033f4:	f7fc feac 	bl	8000150 <strlen>
 80033f8:	2300      	movs	r3, #0
 80033fa:	930e      	str	r3, [sp, #56]	@ 0x38
 80033fc:	f8d8 3000 	ldr.w	r3, [r8]
 8003400:	9009      	str	r0, [sp, #36]	@ 0x24
 8003402:	3307      	adds	r3, #7
 8003404:	f023 0307 	bic.w	r3, r3, #7
 8003408:	f103 0208 	add.w	r2, r3, #8
 800340c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003410:	f8d4 b000 	ldr.w	fp, [r4]
 8003414:	f8c8 2000 	str.w	r2, [r8]
 8003418:	e9d3 8900 	ldrd	r8, r9, [r3]
 800341c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003420:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003422:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8003426:	f04f 32ff 	mov.w	r2, #4294967295
 800342a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800342e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003432:	4b9c      	ldr	r3, [pc, #624]	@ (80036a4 <_printf_float+0x2cc>)
 8003434:	f7fd faea 	bl	8000a0c <__aeabi_dcmpun>
 8003438:	bb70      	cbnz	r0, 8003498 <_printf_float+0xc0>
 800343a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800343e:	f04f 32ff 	mov.w	r2, #4294967295
 8003442:	4b98      	ldr	r3, [pc, #608]	@ (80036a4 <_printf_float+0x2cc>)
 8003444:	f7fd fac4 	bl	80009d0 <__aeabi_dcmple>
 8003448:	bb30      	cbnz	r0, 8003498 <_printf_float+0xc0>
 800344a:	2200      	movs	r2, #0
 800344c:	2300      	movs	r3, #0
 800344e:	4640      	mov	r0, r8
 8003450:	4649      	mov	r1, r9
 8003452:	f7fd fab3 	bl	80009bc <__aeabi_dcmplt>
 8003456:	b110      	cbz	r0, 800345e <_printf_float+0x86>
 8003458:	232d      	movs	r3, #45	@ 0x2d
 800345a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800345e:	4a92      	ldr	r2, [pc, #584]	@ (80036a8 <_printf_float+0x2d0>)
 8003460:	4b92      	ldr	r3, [pc, #584]	@ (80036ac <_printf_float+0x2d4>)
 8003462:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003466:	bf94      	ite	ls
 8003468:	4690      	movls	r8, r2
 800346a:	4698      	movhi	r8, r3
 800346c:	2303      	movs	r3, #3
 800346e:	f04f 0900 	mov.w	r9, #0
 8003472:	6123      	str	r3, [r4, #16]
 8003474:	f02b 0304 	bic.w	r3, fp, #4
 8003478:	6023      	str	r3, [r4, #0]
 800347a:	4633      	mov	r3, r6
 800347c:	4621      	mov	r1, r4
 800347e:	4628      	mov	r0, r5
 8003480:	9700      	str	r7, [sp, #0]
 8003482:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003484:	f000 f9d4 	bl	8003830 <_printf_common>
 8003488:	3001      	adds	r0, #1
 800348a:	f040 8090 	bne.w	80035ae <_printf_float+0x1d6>
 800348e:	f04f 30ff 	mov.w	r0, #4294967295
 8003492:	b011      	add	sp, #68	@ 0x44
 8003494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003498:	4642      	mov	r2, r8
 800349a:	464b      	mov	r3, r9
 800349c:	4640      	mov	r0, r8
 800349e:	4649      	mov	r1, r9
 80034a0:	f7fd fab4 	bl	8000a0c <__aeabi_dcmpun>
 80034a4:	b148      	cbz	r0, 80034ba <_printf_float+0xe2>
 80034a6:	464b      	mov	r3, r9
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	bfb8      	it	lt
 80034ac:	232d      	movlt	r3, #45	@ 0x2d
 80034ae:	4a80      	ldr	r2, [pc, #512]	@ (80036b0 <_printf_float+0x2d8>)
 80034b0:	bfb8      	it	lt
 80034b2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80034b6:	4b7f      	ldr	r3, [pc, #508]	@ (80036b4 <_printf_float+0x2dc>)
 80034b8:	e7d3      	b.n	8003462 <_printf_float+0x8a>
 80034ba:	6863      	ldr	r3, [r4, #4]
 80034bc:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80034c0:	1c5a      	adds	r2, r3, #1
 80034c2:	d13f      	bne.n	8003544 <_printf_float+0x16c>
 80034c4:	2306      	movs	r3, #6
 80034c6:	6063      	str	r3, [r4, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80034ce:	6023      	str	r3, [r4, #0]
 80034d0:	9206      	str	r2, [sp, #24]
 80034d2:	aa0e      	add	r2, sp, #56	@ 0x38
 80034d4:	e9cd a204 	strd	sl, r2, [sp, #16]
 80034d8:	aa0d      	add	r2, sp, #52	@ 0x34
 80034da:	9203      	str	r2, [sp, #12]
 80034dc:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80034e0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80034e4:	6863      	ldr	r3, [r4, #4]
 80034e6:	4642      	mov	r2, r8
 80034e8:	9300      	str	r3, [sp, #0]
 80034ea:	4628      	mov	r0, r5
 80034ec:	464b      	mov	r3, r9
 80034ee:	910a      	str	r1, [sp, #40]	@ 0x28
 80034f0:	f7ff fed4 	bl	800329c <__cvt>
 80034f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80034f6:	4680      	mov	r8, r0
 80034f8:	2947      	cmp	r1, #71	@ 0x47
 80034fa:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80034fc:	d128      	bne.n	8003550 <_printf_float+0x178>
 80034fe:	1cc8      	adds	r0, r1, #3
 8003500:	db02      	blt.n	8003508 <_printf_float+0x130>
 8003502:	6863      	ldr	r3, [r4, #4]
 8003504:	4299      	cmp	r1, r3
 8003506:	dd40      	ble.n	800358a <_printf_float+0x1b2>
 8003508:	f1aa 0a02 	sub.w	sl, sl, #2
 800350c:	fa5f fa8a 	uxtb.w	sl, sl
 8003510:	4652      	mov	r2, sl
 8003512:	3901      	subs	r1, #1
 8003514:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003518:	910d      	str	r1, [sp, #52]	@ 0x34
 800351a:	f7ff ff23 	bl	8003364 <__exponent>
 800351e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003520:	4681      	mov	r9, r0
 8003522:	1813      	adds	r3, r2, r0
 8003524:	2a01      	cmp	r2, #1
 8003526:	6123      	str	r3, [r4, #16]
 8003528:	dc02      	bgt.n	8003530 <_printf_float+0x158>
 800352a:	6822      	ldr	r2, [r4, #0]
 800352c:	07d2      	lsls	r2, r2, #31
 800352e:	d501      	bpl.n	8003534 <_printf_float+0x15c>
 8003530:	3301      	adds	r3, #1
 8003532:	6123      	str	r3, [r4, #16]
 8003534:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003538:	2b00      	cmp	r3, #0
 800353a:	d09e      	beq.n	800347a <_printf_float+0xa2>
 800353c:	232d      	movs	r3, #45	@ 0x2d
 800353e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003542:	e79a      	b.n	800347a <_printf_float+0xa2>
 8003544:	2947      	cmp	r1, #71	@ 0x47
 8003546:	d1bf      	bne.n	80034c8 <_printf_float+0xf0>
 8003548:	2b00      	cmp	r3, #0
 800354a:	d1bd      	bne.n	80034c8 <_printf_float+0xf0>
 800354c:	2301      	movs	r3, #1
 800354e:	e7ba      	b.n	80034c6 <_printf_float+0xee>
 8003550:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003554:	d9dc      	bls.n	8003510 <_printf_float+0x138>
 8003556:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800355a:	d118      	bne.n	800358e <_printf_float+0x1b6>
 800355c:	2900      	cmp	r1, #0
 800355e:	6863      	ldr	r3, [r4, #4]
 8003560:	dd0b      	ble.n	800357a <_printf_float+0x1a2>
 8003562:	6121      	str	r1, [r4, #16]
 8003564:	b913      	cbnz	r3, 800356c <_printf_float+0x194>
 8003566:	6822      	ldr	r2, [r4, #0]
 8003568:	07d0      	lsls	r0, r2, #31
 800356a:	d502      	bpl.n	8003572 <_printf_float+0x19a>
 800356c:	3301      	adds	r3, #1
 800356e:	440b      	add	r3, r1
 8003570:	6123      	str	r3, [r4, #16]
 8003572:	f04f 0900 	mov.w	r9, #0
 8003576:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003578:	e7dc      	b.n	8003534 <_printf_float+0x15c>
 800357a:	b913      	cbnz	r3, 8003582 <_printf_float+0x1aa>
 800357c:	6822      	ldr	r2, [r4, #0]
 800357e:	07d2      	lsls	r2, r2, #31
 8003580:	d501      	bpl.n	8003586 <_printf_float+0x1ae>
 8003582:	3302      	adds	r3, #2
 8003584:	e7f4      	b.n	8003570 <_printf_float+0x198>
 8003586:	2301      	movs	r3, #1
 8003588:	e7f2      	b.n	8003570 <_printf_float+0x198>
 800358a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800358e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003590:	4299      	cmp	r1, r3
 8003592:	db05      	blt.n	80035a0 <_printf_float+0x1c8>
 8003594:	6823      	ldr	r3, [r4, #0]
 8003596:	6121      	str	r1, [r4, #16]
 8003598:	07d8      	lsls	r0, r3, #31
 800359a:	d5ea      	bpl.n	8003572 <_printf_float+0x19a>
 800359c:	1c4b      	adds	r3, r1, #1
 800359e:	e7e7      	b.n	8003570 <_printf_float+0x198>
 80035a0:	2900      	cmp	r1, #0
 80035a2:	bfcc      	ite	gt
 80035a4:	2201      	movgt	r2, #1
 80035a6:	f1c1 0202 	rsble	r2, r1, #2
 80035aa:	4413      	add	r3, r2
 80035ac:	e7e0      	b.n	8003570 <_printf_float+0x198>
 80035ae:	6823      	ldr	r3, [r4, #0]
 80035b0:	055a      	lsls	r2, r3, #21
 80035b2:	d407      	bmi.n	80035c4 <_printf_float+0x1ec>
 80035b4:	6923      	ldr	r3, [r4, #16]
 80035b6:	4642      	mov	r2, r8
 80035b8:	4631      	mov	r1, r6
 80035ba:	4628      	mov	r0, r5
 80035bc:	47b8      	blx	r7
 80035be:	3001      	adds	r0, #1
 80035c0:	d12b      	bne.n	800361a <_printf_float+0x242>
 80035c2:	e764      	b.n	800348e <_printf_float+0xb6>
 80035c4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80035c8:	f240 80dc 	bls.w	8003784 <_printf_float+0x3ac>
 80035cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80035d0:	2200      	movs	r2, #0
 80035d2:	2300      	movs	r3, #0
 80035d4:	f7fd f9e8 	bl	80009a8 <__aeabi_dcmpeq>
 80035d8:	2800      	cmp	r0, #0
 80035da:	d033      	beq.n	8003644 <_printf_float+0x26c>
 80035dc:	2301      	movs	r3, #1
 80035de:	4631      	mov	r1, r6
 80035e0:	4628      	mov	r0, r5
 80035e2:	4a35      	ldr	r2, [pc, #212]	@ (80036b8 <_printf_float+0x2e0>)
 80035e4:	47b8      	blx	r7
 80035e6:	3001      	adds	r0, #1
 80035e8:	f43f af51 	beq.w	800348e <_printf_float+0xb6>
 80035ec:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80035f0:	4543      	cmp	r3, r8
 80035f2:	db02      	blt.n	80035fa <_printf_float+0x222>
 80035f4:	6823      	ldr	r3, [r4, #0]
 80035f6:	07d8      	lsls	r0, r3, #31
 80035f8:	d50f      	bpl.n	800361a <_printf_float+0x242>
 80035fa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80035fe:	4631      	mov	r1, r6
 8003600:	4628      	mov	r0, r5
 8003602:	47b8      	blx	r7
 8003604:	3001      	adds	r0, #1
 8003606:	f43f af42 	beq.w	800348e <_printf_float+0xb6>
 800360a:	f04f 0900 	mov.w	r9, #0
 800360e:	f108 38ff 	add.w	r8, r8, #4294967295
 8003612:	f104 0a1a 	add.w	sl, r4, #26
 8003616:	45c8      	cmp	r8, r9
 8003618:	dc09      	bgt.n	800362e <_printf_float+0x256>
 800361a:	6823      	ldr	r3, [r4, #0]
 800361c:	079b      	lsls	r3, r3, #30
 800361e:	f100 8102 	bmi.w	8003826 <_printf_float+0x44e>
 8003622:	68e0      	ldr	r0, [r4, #12]
 8003624:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003626:	4298      	cmp	r0, r3
 8003628:	bfb8      	it	lt
 800362a:	4618      	movlt	r0, r3
 800362c:	e731      	b.n	8003492 <_printf_float+0xba>
 800362e:	2301      	movs	r3, #1
 8003630:	4652      	mov	r2, sl
 8003632:	4631      	mov	r1, r6
 8003634:	4628      	mov	r0, r5
 8003636:	47b8      	blx	r7
 8003638:	3001      	adds	r0, #1
 800363a:	f43f af28 	beq.w	800348e <_printf_float+0xb6>
 800363e:	f109 0901 	add.w	r9, r9, #1
 8003642:	e7e8      	b.n	8003616 <_printf_float+0x23e>
 8003644:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003646:	2b00      	cmp	r3, #0
 8003648:	dc38      	bgt.n	80036bc <_printf_float+0x2e4>
 800364a:	2301      	movs	r3, #1
 800364c:	4631      	mov	r1, r6
 800364e:	4628      	mov	r0, r5
 8003650:	4a19      	ldr	r2, [pc, #100]	@ (80036b8 <_printf_float+0x2e0>)
 8003652:	47b8      	blx	r7
 8003654:	3001      	adds	r0, #1
 8003656:	f43f af1a 	beq.w	800348e <_printf_float+0xb6>
 800365a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800365e:	ea59 0303 	orrs.w	r3, r9, r3
 8003662:	d102      	bne.n	800366a <_printf_float+0x292>
 8003664:	6823      	ldr	r3, [r4, #0]
 8003666:	07d9      	lsls	r1, r3, #31
 8003668:	d5d7      	bpl.n	800361a <_printf_float+0x242>
 800366a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800366e:	4631      	mov	r1, r6
 8003670:	4628      	mov	r0, r5
 8003672:	47b8      	blx	r7
 8003674:	3001      	adds	r0, #1
 8003676:	f43f af0a 	beq.w	800348e <_printf_float+0xb6>
 800367a:	f04f 0a00 	mov.w	sl, #0
 800367e:	f104 0b1a 	add.w	fp, r4, #26
 8003682:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003684:	425b      	negs	r3, r3
 8003686:	4553      	cmp	r3, sl
 8003688:	dc01      	bgt.n	800368e <_printf_float+0x2b6>
 800368a:	464b      	mov	r3, r9
 800368c:	e793      	b.n	80035b6 <_printf_float+0x1de>
 800368e:	2301      	movs	r3, #1
 8003690:	465a      	mov	r2, fp
 8003692:	4631      	mov	r1, r6
 8003694:	4628      	mov	r0, r5
 8003696:	47b8      	blx	r7
 8003698:	3001      	adds	r0, #1
 800369a:	f43f aef8 	beq.w	800348e <_printf_float+0xb6>
 800369e:	f10a 0a01 	add.w	sl, sl, #1
 80036a2:	e7ee      	b.n	8003682 <_printf_float+0x2aa>
 80036a4:	7fefffff 	.word	0x7fefffff
 80036a8:	08006523 	.word	0x08006523
 80036ac:	08006527 	.word	0x08006527
 80036b0:	0800652b 	.word	0x0800652b
 80036b4:	0800652f 	.word	0x0800652f
 80036b8:	08006533 	.word	0x08006533
 80036bc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80036be:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80036c2:	4553      	cmp	r3, sl
 80036c4:	bfa8      	it	ge
 80036c6:	4653      	movge	r3, sl
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	4699      	mov	r9, r3
 80036cc:	dc36      	bgt.n	800373c <_printf_float+0x364>
 80036ce:	f04f 0b00 	mov.w	fp, #0
 80036d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80036d6:	f104 021a 	add.w	r2, r4, #26
 80036da:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80036dc:	930a      	str	r3, [sp, #40]	@ 0x28
 80036de:	eba3 0309 	sub.w	r3, r3, r9
 80036e2:	455b      	cmp	r3, fp
 80036e4:	dc31      	bgt.n	800374a <_printf_float+0x372>
 80036e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80036e8:	459a      	cmp	sl, r3
 80036ea:	dc3a      	bgt.n	8003762 <_printf_float+0x38a>
 80036ec:	6823      	ldr	r3, [r4, #0]
 80036ee:	07da      	lsls	r2, r3, #31
 80036f0:	d437      	bmi.n	8003762 <_printf_float+0x38a>
 80036f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80036f4:	ebaa 0903 	sub.w	r9, sl, r3
 80036f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80036fa:	ebaa 0303 	sub.w	r3, sl, r3
 80036fe:	4599      	cmp	r9, r3
 8003700:	bfa8      	it	ge
 8003702:	4699      	movge	r9, r3
 8003704:	f1b9 0f00 	cmp.w	r9, #0
 8003708:	dc33      	bgt.n	8003772 <_printf_float+0x39a>
 800370a:	f04f 0800 	mov.w	r8, #0
 800370e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003712:	f104 0b1a 	add.w	fp, r4, #26
 8003716:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003718:	ebaa 0303 	sub.w	r3, sl, r3
 800371c:	eba3 0309 	sub.w	r3, r3, r9
 8003720:	4543      	cmp	r3, r8
 8003722:	f77f af7a 	ble.w	800361a <_printf_float+0x242>
 8003726:	2301      	movs	r3, #1
 8003728:	465a      	mov	r2, fp
 800372a:	4631      	mov	r1, r6
 800372c:	4628      	mov	r0, r5
 800372e:	47b8      	blx	r7
 8003730:	3001      	adds	r0, #1
 8003732:	f43f aeac 	beq.w	800348e <_printf_float+0xb6>
 8003736:	f108 0801 	add.w	r8, r8, #1
 800373a:	e7ec      	b.n	8003716 <_printf_float+0x33e>
 800373c:	4642      	mov	r2, r8
 800373e:	4631      	mov	r1, r6
 8003740:	4628      	mov	r0, r5
 8003742:	47b8      	blx	r7
 8003744:	3001      	adds	r0, #1
 8003746:	d1c2      	bne.n	80036ce <_printf_float+0x2f6>
 8003748:	e6a1      	b.n	800348e <_printf_float+0xb6>
 800374a:	2301      	movs	r3, #1
 800374c:	4631      	mov	r1, r6
 800374e:	4628      	mov	r0, r5
 8003750:	920a      	str	r2, [sp, #40]	@ 0x28
 8003752:	47b8      	blx	r7
 8003754:	3001      	adds	r0, #1
 8003756:	f43f ae9a 	beq.w	800348e <_printf_float+0xb6>
 800375a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800375c:	f10b 0b01 	add.w	fp, fp, #1
 8003760:	e7bb      	b.n	80036da <_printf_float+0x302>
 8003762:	4631      	mov	r1, r6
 8003764:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003768:	4628      	mov	r0, r5
 800376a:	47b8      	blx	r7
 800376c:	3001      	adds	r0, #1
 800376e:	d1c0      	bne.n	80036f2 <_printf_float+0x31a>
 8003770:	e68d      	b.n	800348e <_printf_float+0xb6>
 8003772:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003774:	464b      	mov	r3, r9
 8003776:	4631      	mov	r1, r6
 8003778:	4628      	mov	r0, r5
 800377a:	4442      	add	r2, r8
 800377c:	47b8      	blx	r7
 800377e:	3001      	adds	r0, #1
 8003780:	d1c3      	bne.n	800370a <_printf_float+0x332>
 8003782:	e684      	b.n	800348e <_printf_float+0xb6>
 8003784:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003788:	f1ba 0f01 	cmp.w	sl, #1
 800378c:	dc01      	bgt.n	8003792 <_printf_float+0x3ba>
 800378e:	07db      	lsls	r3, r3, #31
 8003790:	d536      	bpl.n	8003800 <_printf_float+0x428>
 8003792:	2301      	movs	r3, #1
 8003794:	4642      	mov	r2, r8
 8003796:	4631      	mov	r1, r6
 8003798:	4628      	mov	r0, r5
 800379a:	47b8      	blx	r7
 800379c:	3001      	adds	r0, #1
 800379e:	f43f ae76 	beq.w	800348e <_printf_float+0xb6>
 80037a2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80037a6:	4631      	mov	r1, r6
 80037a8:	4628      	mov	r0, r5
 80037aa:	47b8      	blx	r7
 80037ac:	3001      	adds	r0, #1
 80037ae:	f43f ae6e 	beq.w	800348e <_printf_float+0xb6>
 80037b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80037b6:	2200      	movs	r2, #0
 80037b8:	2300      	movs	r3, #0
 80037ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80037be:	f7fd f8f3 	bl	80009a8 <__aeabi_dcmpeq>
 80037c2:	b9c0      	cbnz	r0, 80037f6 <_printf_float+0x41e>
 80037c4:	4653      	mov	r3, sl
 80037c6:	f108 0201 	add.w	r2, r8, #1
 80037ca:	4631      	mov	r1, r6
 80037cc:	4628      	mov	r0, r5
 80037ce:	47b8      	blx	r7
 80037d0:	3001      	adds	r0, #1
 80037d2:	d10c      	bne.n	80037ee <_printf_float+0x416>
 80037d4:	e65b      	b.n	800348e <_printf_float+0xb6>
 80037d6:	2301      	movs	r3, #1
 80037d8:	465a      	mov	r2, fp
 80037da:	4631      	mov	r1, r6
 80037dc:	4628      	mov	r0, r5
 80037de:	47b8      	blx	r7
 80037e0:	3001      	adds	r0, #1
 80037e2:	f43f ae54 	beq.w	800348e <_printf_float+0xb6>
 80037e6:	f108 0801 	add.w	r8, r8, #1
 80037ea:	45d0      	cmp	r8, sl
 80037ec:	dbf3      	blt.n	80037d6 <_printf_float+0x3fe>
 80037ee:	464b      	mov	r3, r9
 80037f0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80037f4:	e6e0      	b.n	80035b8 <_printf_float+0x1e0>
 80037f6:	f04f 0800 	mov.w	r8, #0
 80037fa:	f104 0b1a 	add.w	fp, r4, #26
 80037fe:	e7f4      	b.n	80037ea <_printf_float+0x412>
 8003800:	2301      	movs	r3, #1
 8003802:	4642      	mov	r2, r8
 8003804:	e7e1      	b.n	80037ca <_printf_float+0x3f2>
 8003806:	2301      	movs	r3, #1
 8003808:	464a      	mov	r2, r9
 800380a:	4631      	mov	r1, r6
 800380c:	4628      	mov	r0, r5
 800380e:	47b8      	blx	r7
 8003810:	3001      	adds	r0, #1
 8003812:	f43f ae3c 	beq.w	800348e <_printf_float+0xb6>
 8003816:	f108 0801 	add.w	r8, r8, #1
 800381a:	68e3      	ldr	r3, [r4, #12]
 800381c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800381e:	1a5b      	subs	r3, r3, r1
 8003820:	4543      	cmp	r3, r8
 8003822:	dcf0      	bgt.n	8003806 <_printf_float+0x42e>
 8003824:	e6fd      	b.n	8003622 <_printf_float+0x24a>
 8003826:	f04f 0800 	mov.w	r8, #0
 800382a:	f104 0919 	add.w	r9, r4, #25
 800382e:	e7f4      	b.n	800381a <_printf_float+0x442>

08003830 <_printf_common>:
 8003830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003834:	4616      	mov	r6, r2
 8003836:	4698      	mov	r8, r3
 8003838:	688a      	ldr	r2, [r1, #8]
 800383a:	690b      	ldr	r3, [r1, #16]
 800383c:	4607      	mov	r7, r0
 800383e:	4293      	cmp	r3, r2
 8003840:	bfb8      	it	lt
 8003842:	4613      	movlt	r3, r2
 8003844:	6033      	str	r3, [r6, #0]
 8003846:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800384a:	460c      	mov	r4, r1
 800384c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003850:	b10a      	cbz	r2, 8003856 <_printf_common+0x26>
 8003852:	3301      	adds	r3, #1
 8003854:	6033      	str	r3, [r6, #0]
 8003856:	6823      	ldr	r3, [r4, #0]
 8003858:	0699      	lsls	r1, r3, #26
 800385a:	bf42      	ittt	mi
 800385c:	6833      	ldrmi	r3, [r6, #0]
 800385e:	3302      	addmi	r3, #2
 8003860:	6033      	strmi	r3, [r6, #0]
 8003862:	6825      	ldr	r5, [r4, #0]
 8003864:	f015 0506 	ands.w	r5, r5, #6
 8003868:	d106      	bne.n	8003878 <_printf_common+0x48>
 800386a:	f104 0a19 	add.w	sl, r4, #25
 800386e:	68e3      	ldr	r3, [r4, #12]
 8003870:	6832      	ldr	r2, [r6, #0]
 8003872:	1a9b      	subs	r3, r3, r2
 8003874:	42ab      	cmp	r3, r5
 8003876:	dc2b      	bgt.n	80038d0 <_printf_common+0xa0>
 8003878:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800387c:	6822      	ldr	r2, [r4, #0]
 800387e:	3b00      	subs	r3, #0
 8003880:	bf18      	it	ne
 8003882:	2301      	movne	r3, #1
 8003884:	0692      	lsls	r2, r2, #26
 8003886:	d430      	bmi.n	80038ea <_printf_common+0xba>
 8003888:	4641      	mov	r1, r8
 800388a:	4638      	mov	r0, r7
 800388c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003890:	47c8      	blx	r9
 8003892:	3001      	adds	r0, #1
 8003894:	d023      	beq.n	80038de <_printf_common+0xae>
 8003896:	6823      	ldr	r3, [r4, #0]
 8003898:	6922      	ldr	r2, [r4, #16]
 800389a:	f003 0306 	and.w	r3, r3, #6
 800389e:	2b04      	cmp	r3, #4
 80038a0:	bf14      	ite	ne
 80038a2:	2500      	movne	r5, #0
 80038a4:	6833      	ldreq	r3, [r6, #0]
 80038a6:	f04f 0600 	mov.w	r6, #0
 80038aa:	bf08      	it	eq
 80038ac:	68e5      	ldreq	r5, [r4, #12]
 80038ae:	f104 041a 	add.w	r4, r4, #26
 80038b2:	bf08      	it	eq
 80038b4:	1aed      	subeq	r5, r5, r3
 80038b6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80038ba:	bf08      	it	eq
 80038bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038c0:	4293      	cmp	r3, r2
 80038c2:	bfc4      	itt	gt
 80038c4:	1a9b      	subgt	r3, r3, r2
 80038c6:	18ed      	addgt	r5, r5, r3
 80038c8:	42b5      	cmp	r5, r6
 80038ca:	d11a      	bne.n	8003902 <_printf_common+0xd2>
 80038cc:	2000      	movs	r0, #0
 80038ce:	e008      	b.n	80038e2 <_printf_common+0xb2>
 80038d0:	2301      	movs	r3, #1
 80038d2:	4652      	mov	r2, sl
 80038d4:	4641      	mov	r1, r8
 80038d6:	4638      	mov	r0, r7
 80038d8:	47c8      	blx	r9
 80038da:	3001      	adds	r0, #1
 80038dc:	d103      	bne.n	80038e6 <_printf_common+0xb6>
 80038de:	f04f 30ff 	mov.w	r0, #4294967295
 80038e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038e6:	3501      	adds	r5, #1
 80038e8:	e7c1      	b.n	800386e <_printf_common+0x3e>
 80038ea:	2030      	movs	r0, #48	@ 0x30
 80038ec:	18e1      	adds	r1, r4, r3
 80038ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80038f2:	1c5a      	adds	r2, r3, #1
 80038f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80038f8:	4422      	add	r2, r4
 80038fa:	3302      	adds	r3, #2
 80038fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003900:	e7c2      	b.n	8003888 <_printf_common+0x58>
 8003902:	2301      	movs	r3, #1
 8003904:	4622      	mov	r2, r4
 8003906:	4641      	mov	r1, r8
 8003908:	4638      	mov	r0, r7
 800390a:	47c8      	blx	r9
 800390c:	3001      	adds	r0, #1
 800390e:	d0e6      	beq.n	80038de <_printf_common+0xae>
 8003910:	3601      	adds	r6, #1
 8003912:	e7d9      	b.n	80038c8 <_printf_common+0x98>

08003914 <_printf_i>:
 8003914:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003918:	7e0f      	ldrb	r7, [r1, #24]
 800391a:	4691      	mov	r9, r2
 800391c:	2f78      	cmp	r7, #120	@ 0x78
 800391e:	4680      	mov	r8, r0
 8003920:	460c      	mov	r4, r1
 8003922:	469a      	mov	sl, r3
 8003924:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003926:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800392a:	d807      	bhi.n	800393c <_printf_i+0x28>
 800392c:	2f62      	cmp	r7, #98	@ 0x62
 800392e:	d80a      	bhi.n	8003946 <_printf_i+0x32>
 8003930:	2f00      	cmp	r7, #0
 8003932:	f000 80d3 	beq.w	8003adc <_printf_i+0x1c8>
 8003936:	2f58      	cmp	r7, #88	@ 0x58
 8003938:	f000 80ba 	beq.w	8003ab0 <_printf_i+0x19c>
 800393c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003940:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003944:	e03a      	b.n	80039bc <_printf_i+0xa8>
 8003946:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800394a:	2b15      	cmp	r3, #21
 800394c:	d8f6      	bhi.n	800393c <_printf_i+0x28>
 800394e:	a101      	add	r1, pc, #4	@ (adr r1, 8003954 <_printf_i+0x40>)
 8003950:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003954:	080039ad 	.word	0x080039ad
 8003958:	080039c1 	.word	0x080039c1
 800395c:	0800393d 	.word	0x0800393d
 8003960:	0800393d 	.word	0x0800393d
 8003964:	0800393d 	.word	0x0800393d
 8003968:	0800393d 	.word	0x0800393d
 800396c:	080039c1 	.word	0x080039c1
 8003970:	0800393d 	.word	0x0800393d
 8003974:	0800393d 	.word	0x0800393d
 8003978:	0800393d 	.word	0x0800393d
 800397c:	0800393d 	.word	0x0800393d
 8003980:	08003ac3 	.word	0x08003ac3
 8003984:	080039eb 	.word	0x080039eb
 8003988:	08003a7d 	.word	0x08003a7d
 800398c:	0800393d 	.word	0x0800393d
 8003990:	0800393d 	.word	0x0800393d
 8003994:	08003ae5 	.word	0x08003ae5
 8003998:	0800393d 	.word	0x0800393d
 800399c:	080039eb 	.word	0x080039eb
 80039a0:	0800393d 	.word	0x0800393d
 80039a4:	0800393d 	.word	0x0800393d
 80039a8:	08003a85 	.word	0x08003a85
 80039ac:	6833      	ldr	r3, [r6, #0]
 80039ae:	1d1a      	adds	r2, r3, #4
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	6032      	str	r2, [r6, #0]
 80039b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80039b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80039bc:	2301      	movs	r3, #1
 80039be:	e09e      	b.n	8003afe <_printf_i+0x1ea>
 80039c0:	6833      	ldr	r3, [r6, #0]
 80039c2:	6820      	ldr	r0, [r4, #0]
 80039c4:	1d19      	adds	r1, r3, #4
 80039c6:	6031      	str	r1, [r6, #0]
 80039c8:	0606      	lsls	r6, r0, #24
 80039ca:	d501      	bpl.n	80039d0 <_printf_i+0xbc>
 80039cc:	681d      	ldr	r5, [r3, #0]
 80039ce:	e003      	b.n	80039d8 <_printf_i+0xc4>
 80039d0:	0645      	lsls	r5, r0, #25
 80039d2:	d5fb      	bpl.n	80039cc <_printf_i+0xb8>
 80039d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80039d8:	2d00      	cmp	r5, #0
 80039da:	da03      	bge.n	80039e4 <_printf_i+0xd0>
 80039dc:	232d      	movs	r3, #45	@ 0x2d
 80039de:	426d      	negs	r5, r5
 80039e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80039e4:	230a      	movs	r3, #10
 80039e6:	4859      	ldr	r0, [pc, #356]	@ (8003b4c <_printf_i+0x238>)
 80039e8:	e011      	b.n	8003a0e <_printf_i+0xfa>
 80039ea:	6821      	ldr	r1, [r4, #0]
 80039ec:	6833      	ldr	r3, [r6, #0]
 80039ee:	0608      	lsls	r0, r1, #24
 80039f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80039f4:	d402      	bmi.n	80039fc <_printf_i+0xe8>
 80039f6:	0649      	lsls	r1, r1, #25
 80039f8:	bf48      	it	mi
 80039fa:	b2ad      	uxthmi	r5, r5
 80039fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80039fe:	6033      	str	r3, [r6, #0]
 8003a00:	bf14      	ite	ne
 8003a02:	230a      	movne	r3, #10
 8003a04:	2308      	moveq	r3, #8
 8003a06:	4851      	ldr	r0, [pc, #324]	@ (8003b4c <_printf_i+0x238>)
 8003a08:	2100      	movs	r1, #0
 8003a0a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003a0e:	6866      	ldr	r6, [r4, #4]
 8003a10:	2e00      	cmp	r6, #0
 8003a12:	bfa8      	it	ge
 8003a14:	6821      	ldrge	r1, [r4, #0]
 8003a16:	60a6      	str	r6, [r4, #8]
 8003a18:	bfa4      	itt	ge
 8003a1a:	f021 0104 	bicge.w	r1, r1, #4
 8003a1e:	6021      	strge	r1, [r4, #0]
 8003a20:	b90d      	cbnz	r5, 8003a26 <_printf_i+0x112>
 8003a22:	2e00      	cmp	r6, #0
 8003a24:	d04b      	beq.n	8003abe <_printf_i+0x1aa>
 8003a26:	4616      	mov	r6, r2
 8003a28:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a2c:	fb03 5711 	mls	r7, r3, r1, r5
 8003a30:	5dc7      	ldrb	r7, [r0, r7]
 8003a32:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a36:	462f      	mov	r7, r5
 8003a38:	42bb      	cmp	r3, r7
 8003a3a:	460d      	mov	r5, r1
 8003a3c:	d9f4      	bls.n	8003a28 <_printf_i+0x114>
 8003a3e:	2b08      	cmp	r3, #8
 8003a40:	d10b      	bne.n	8003a5a <_printf_i+0x146>
 8003a42:	6823      	ldr	r3, [r4, #0]
 8003a44:	07df      	lsls	r7, r3, #31
 8003a46:	d508      	bpl.n	8003a5a <_printf_i+0x146>
 8003a48:	6923      	ldr	r3, [r4, #16]
 8003a4a:	6861      	ldr	r1, [r4, #4]
 8003a4c:	4299      	cmp	r1, r3
 8003a4e:	bfde      	ittt	le
 8003a50:	2330      	movle	r3, #48	@ 0x30
 8003a52:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003a56:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003a5a:	1b92      	subs	r2, r2, r6
 8003a5c:	6122      	str	r2, [r4, #16]
 8003a5e:	464b      	mov	r3, r9
 8003a60:	4621      	mov	r1, r4
 8003a62:	4640      	mov	r0, r8
 8003a64:	f8cd a000 	str.w	sl, [sp]
 8003a68:	aa03      	add	r2, sp, #12
 8003a6a:	f7ff fee1 	bl	8003830 <_printf_common>
 8003a6e:	3001      	adds	r0, #1
 8003a70:	d14a      	bne.n	8003b08 <_printf_i+0x1f4>
 8003a72:	f04f 30ff 	mov.w	r0, #4294967295
 8003a76:	b004      	add	sp, #16
 8003a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a7c:	6823      	ldr	r3, [r4, #0]
 8003a7e:	f043 0320 	orr.w	r3, r3, #32
 8003a82:	6023      	str	r3, [r4, #0]
 8003a84:	2778      	movs	r7, #120	@ 0x78
 8003a86:	4832      	ldr	r0, [pc, #200]	@ (8003b50 <_printf_i+0x23c>)
 8003a88:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003a8c:	6823      	ldr	r3, [r4, #0]
 8003a8e:	6831      	ldr	r1, [r6, #0]
 8003a90:	061f      	lsls	r7, r3, #24
 8003a92:	f851 5b04 	ldr.w	r5, [r1], #4
 8003a96:	d402      	bmi.n	8003a9e <_printf_i+0x18a>
 8003a98:	065f      	lsls	r7, r3, #25
 8003a9a:	bf48      	it	mi
 8003a9c:	b2ad      	uxthmi	r5, r5
 8003a9e:	6031      	str	r1, [r6, #0]
 8003aa0:	07d9      	lsls	r1, r3, #31
 8003aa2:	bf44      	itt	mi
 8003aa4:	f043 0320 	orrmi.w	r3, r3, #32
 8003aa8:	6023      	strmi	r3, [r4, #0]
 8003aaa:	b11d      	cbz	r5, 8003ab4 <_printf_i+0x1a0>
 8003aac:	2310      	movs	r3, #16
 8003aae:	e7ab      	b.n	8003a08 <_printf_i+0xf4>
 8003ab0:	4826      	ldr	r0, [pc, #152]	@ (8003b4c <_printf_i+0x238>)
 8003ab2:	e7e9      	b.n	8003a88 <_printf_i+0x174>
 8003ab4:	6823      	ldr	r3, [r4, #0]
 8003ab6:	f023 0320 	bic.w	r3, r3, #32
 8003aba:	6023      	str	r3, [r4, #0]
 8003abc:	e7f6      	b.n	8003aac <_printf_i+0x198>
 8003abe:	4616      	mov	r6, r2
 8003ac0:	e7bd      	b.n	8003a3e <_printf_i+0x12a>
 8003ac2:	6833      	ldr	r3, [r6, #0]
 8003ac4:	6825      	ldr	r5, [r4, #0]
 8003ac6:	1d18      	adds	r0, r3, #4
 8003ac8:	6961      	ldr	r1, [r4, #20]
 8003aca:	6030      	str	r0, [r6, #0]
 8003acc:	062e      	lsls	r6, r5, #24
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	d501      	bpl.n	8003ad6 <_printf_i+0x1c2>
 8003ad2:	6019      	str	r1, [r3, #0]
 8003ad4:	e002      	b.n	8003adc <_printf_i+0x1c8>
 8003ad6:	0668      	lsls	r0, r5, #25
 8003ad8:	d5fb      	bpl.n	8003ad2 <_printf_i+0x1be>
 8003ada:	8019      	strh	r1, [r3, #0]
 8003adc:	2300      	movs	r3, #0
 8003ade:	4616      	mov	r6, r2
 8003ae0:	6123      	str	r3, [r4, #16]
 8003ae2:	e7bc      	b.n	8003a5e <_printf_i+0x14a>
 8003ae4:	6833      	ldr	r3, [r6, #0]
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	1d1a      	adds	r2, r3, #4
 8003aea:	6032      	str	r2, [r6, #0]
 8003aec:	681e      	ldr	r6, [r3, #0]
 8003aee:	6862      	ldr	r2, [r4, #4]
 8003af0:	4630      	mov	r0, r6
 8003af2:	f000 f9d4 	bl	8003e9e <memchr>
 8003af6:	b108      	cbz	r0, 8003afc <_printf_i+0x1e8>
 8003af8:	1b80      	subs	r0, r0, r6
 8003afa:	6060      	str	r0, [r4, #4]
 8003afc:	6863      	ldr	r3, [r4, #4]
 8003afe:	6123      	str	r3, [r4, #16]
 8003b00:	2300      	movs	r3, #0
 8003b02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b06:	e7aa      	b.n	8003a5e <_printf_i+0x14a>
 8003b08:	4632      	mov	r2, r6
 8003b0a:	4649      	mov	r1, r9
 8003b0c:	4640      	mov	r0, r8
 8003b0e:	6923      	ldr	r3, [r4, #16]
 8003b10:	47d0      	blx	sl
 8003b12:	3001      	adds	r0, #1
 8003b14:	d0ad      	beq.n	8003a72 <_printf_i+0x15e>
 8003b16:	6823      	ldr	r3, [r4, #0]
 8003b18:	079b      	lsls	r3, r3, #30
 8003b1a:	d413      	bmi.n	8003b44 <_printf_i+0x230>
 8003b1c:	68e0      	ldr	r0, [r4, #12]
 8003b1e:	9b03      	ldr	r3, [sp, #12]
 8003b20:	4298      	cmp	r0, r3
 8003b22:	bfb8      	it	lt
 8003b24:	4618      	movlt	r0, r3
 8003b26:	e7a6      	b.n	8003a76 <_printf_i+0x162>
 8003b28:	2301      	movs	r3, #1
 8003b2a:	4632      	mov	r2, r6
 8003b2c:	4649      	mov	r1, r9
 8003b2e:	4640      	mov	r0, r8
 8003b30:	47d0      	blx	sl
 8003b32:	3001      	adds	r0, #1
 8003b34:	d09d      	beq.n	8003a72 <_printf_i+0x15e>
 8003b36:	3501      	adds	r5, #1
 8003b38:	68e3      	ldr	r3, [r4, #12]
 8003b3a:	9903      	ldr	r1, [sp, #12]
 8003b3c:	1a5b      	subs	r3, r3, r1
 8003b3e:	42ab      	cmp	r3, r5
 8003b40:	dcf2      	bgt.n	8003b28 <_printf_i+0x214>
 8003b42:	e7eb      	b.n	8003b1c <_printf_i+0x208>
 8003b44:	2500      	movs	r5, #0
 8003b46:	f104 0619 	add.w	r6, r4, #25
 8003b4a:	e7f5      	b.n	8003b38 <_printf_i+0x224>
 8003b4c:	08006535 	.word	0x08006535
 8003b50:	08006546 	.word	0x08006546

08003b54 <std>:
 8003b54:	2300      	movs	r3, #0
 8003b56:	b510      	push	{r4, lr}
 8003b58:	4604      	mov	r4, r0
 8003b5a:	e9c0 3300 	strd	r3, r3, [r0]
 8003b5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003b62:	6083      	str	r3, [r0, #8]
 8003b64:	8181      	strh	r1, [r0, #12]
 8003b66:	6643      	str	r3, [r0, #100]	@ 0x64
 8003b68:	81c2      	strh	r2, [r0, #14]
 8003b6a:	6183      	str	r3, [r0, #24]
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	2208      	movs	r2, #8
 8003b70:	305c      	adds	r0, #92	@ 0x5c
 8003b72:	f000 f914 	bl	8003d9e <memset>
 8003b76:	4b0d      	ldr	r3, [pc, #52]	@ (8003bac <std+0x58>)
 8003b78:	6224      	str	r4, [r4, #32]
 8003b7a:	6263      	str	r3, [r4, #36]	@ 0x24
 8003b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8003bb0 <std+0x5c>)
 8003b7e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003b80:	4b0c      	ldr	r3, [pc, #48]	@ (8003bb4 <std+0x60>)
 8003b82:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003b84:	4b0c      	ldr	r3, [pc, #48]	@ (8003bb8 <std+0x64>)
 8003b86:	6323      	str	r3, [r4, #48]	@ 0x30
 8003b88:	4b0c      	ldr	r3, [pc, #48]	@ (8003bbc <std+0x68>)
 8003b8a:	429c      	cmp	r4, r3
 8003b8c:	d006      	beq.n	8003b9c <std+0x48>
 8003b8e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003b92:	4294      	cmp	r4, r2
 8003b94:	d002      	beq.n	8003b9c <std+0x48>
 8003b96:	33d0      	adds	r3, #208	@ 0xd0
 8003b98:	429c      	cmp	r4, r3
 8003b9a:	d105      	bne.n	8003ba8 <std+0x54>
 8003b9c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ba4:	f000 b978 	b.w	8003e98 <__retarget_lock_init_recursive>
 8003ba8:	bd10      	pop	{r4, pc}
 8003baa:	bf00      	nop
 8003bac:	08003d19 	.word	0x08003d19
 8003bb0:	08003d3b 	.word	0x08003d3b
 8003bb4:	08003d73 	.word	0x08003d73
 8003bb8:	08003d97 	.word	0x08003d97
 8003bbc:	200009e4 	.word	0x200009e4

08003bc0 <stdio_exit_handler>:
 8003bc0:	4a02      	ldr	r2, [pc, #8]	@ (8003bcc <stdio_exit_handler+0xc>)
 8003bc2:	4903      	ldr	r1, [pc, #12]	@ (8003bd0 <stdio_exit_handler+0x10>)
 8003bc4:	4803      	ldr	r0, [pc, #12]	@ (8003bd4 <stdio_exit_handler+0x14>)
 8003bc6:	f000 b869 	b.w	8003c9c <_fwalk_sglue>
 8003bca:	bf00      	nop
 8003bcc:	2000000c 	.word	0x2000000c
 8003bd0:	08005845 	.word	0x08005845
 8003bd4:	2000001c 	.word	0x2000001c

08003bd8 <cleanup_stdio>:
 8003bd8:	6841      	ldr	r1, [r0, #4]
 8003bda:	4b0c      	ldr	r3, [pc, #48]	@ (8003c0c <cleanup_stdio+0x34>)
 8003bdc:	b510      	push	{r4, lr}
 8003bde:	4299      	cmp	r1, r3
 8003be0:	4604      	mov	r4, r0
 8003be2:	d001      	beq.n	8003be8 <cleanup_stdio+0x10>
 8003be4:	f001 fe2e 	bl	8005844 <_fflush_r>
 8003be8:	68a1      	ldr	r1, [r4, #8]
 8003bea:	4b09      	ldr	r3, [pc, #36]	@ (8003c10 <cleanup_stdio+0x38>)
 8003bec:	4299      	cmp	r1, r3
 8003bee:	d002      	beq.n	8003bf6 <cleanup_stdio+0x1e>
 8003bf0:	4620      	mov	r0, r4
 8003bf2:	f001 fe27 	bl	8005844 <_fflush_r>
 8003bf6:	68e1      	ldr	r1, [r4, #12]
 8003bf8:	4b06      	ldr	r3, [pc, #24]	@ (8003c14 <cleanup_stdio+0x3c>)
 8003bfa:	4299      	cmp	r1, r3
 8003bfc:	d004      	beq.n	8003c08 <cleanup_stdio+0x30>
 8003bfe:	4620      	mov	r0, r4
 8003c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c04:	f001 be1e 	b.w	8005844 <_fflush_r>
 8003c08:	bd10      	pop	{r4, pc}
 8003c0a:	bf00      	nop
 8003c0c:	200009e4 	.word	0x200009e4
 8003c10:	20000a4c 	.word	0x20000a4c
 8003c14:	20000ab4 	.word	0x20000ab4

08003c18 <global_stdio_init.part.0>:
 8003c18:	b510      	push	{r4, lr}
 8003c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8003c48 <global_stdio_init.part.0+0x30>)
 8003c1c:	4c0b      	ldr	r4, [pc, #44]	@ (8003c4c <global_stdio_init.part.0+0x34>)
 8003c1e:	4a0c      	ldr	r2, [pc, #48]	@ (8003c50 <global_stdio_init.part.0+0x38>)
 8003c20:	4620      	mov	r0, r4
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	2104      	movs	r1, #4
 8003c26:	2200      	movs	r2, #0
 8003c28:	f7ff ff94 	bl	8003b54 <std>
 8003c2c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003c30:	2201      	movs	r2, #1
 8003c32:	2109      	movs	r1, #9
 8003c34:	f7ff ff8e 	bl	8003b54 <std>
 8003c38:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003c3c:	2202      	movs	r2, #2
 8003c3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c42:	2112      	movs	r1, #18
 8003c44:	f7ff bf86 	b.w	8003b54 <std>
 8003c48:	20000b1c 	.word	0x20000b1c
 8003c4c:	200009e4 	.word	0x200009e4
 8003c50:	08003bc1 	.word	0x08003bc1

08003c54 <__sfp_lock_acquire>:
 8003c54:	4801      	ldr	r0, [pc, #4]	@ (8003c5c <__sfp_lock_acquire+0x8>)
 8003c56:	f000 b920 	b.w	8003e9a <__retarget_lock_acquire_recursive>
 8003c5a:	bf00      	nop
 8003c5c:	20000b25 	.word	0x20000b25

08003c60 <__sfp_lock_release>:
 8003c60:	4801      	ldr	r0, [pc, #4]	@ (8003c68 <__sfp_lock_release+0x8>)
 8003c62:	f000 b91b 	b.w	8003e9c <__retarget_lock_release_recursive>
 8003c66:	bf00      	nop
 8003c68:	20000b25 	.word	0x20000b25

08003c6c <__sinit>:
 8003c6c:	b510      	push	{r4, lr}
 8003c6e:	4604      	mov	r4, r0
 8003c70:	f7ff fff0 	bl	8003c54 <__sfp_lock_acquire>
 8003c74:	6a23      	ldr	r3, [r4, #32]
 8003c76:	b11b      	cbz	r3, 8003c80 <__sinit+0x14>
 8003c78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c7c:	f7ff bff0 	b.w	8003c60 <__sfp_lock_release>
 8003c80:	4b04      	ldr	r3, [pc, #16]	@ (8003c94 <__sinit+0x28>)
 8003c82:	6223      	str	r3, [r4, #32]
 8003c84:	4b04      	ldr	r3, [pc, #16]	@ (8003c98 <__sinit+0x2c>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1f5      	bne.n	8003c78 <__sinit+0xc>
 8003c8c:	f7ff ffc4 	bl	8003c18 <global_stdio_init.part.0>
 8003c90:	e7f2      	b.n	8003c78 <__sinit+0xc>
 8003c92:	bf00      	nop
 8003c94:	08003bd9 	.word	0x08003bd9
 8003c98:	20000b1c 	.word	0x20000b1c

08003c9c <_fwalk_sglue>:
 8003c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ca0:	4607      	mov	r7, r0
 8003ca2:	4688      	mov	r8, r1
 8003ca4:	4614      	mov	r4, r2
 8003ca6:	2600      	movs	r6, #0
 8003ca8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003cac:	f1b9 0901 	subs.w	r9, r9, #1
 8003cb0:	d505      	bpl.n	8003cbe <_fwalk_sglue+0x22>
 8003cb2:	6824      	ldr	r4, [r4, #0]
 8003cb4:	2c00      	cmp	r4, #0
 8003cb6:	d1f7      	bne.n	8003ca8 <_fwalk_sglue+0xc>
 8003cb8:	4630      	mov	r0, r6
 8003cba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003cbe:	89ab      	ldrh	r3, [r5, #12]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d907      	bls.n	8003cd4 <_fwalk_sglue+0x38>
 8003cc4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003cc8:	3301      	adds	r3, #1
 8003cca:	d003      	beq.n	8003cd4 <_fwalk_sglue+0x38>
 8003ccc:	4629      	mov	r1, r5
 8003cce:	4638      	mov	r0, r7
 8003cd0:	47c0      	blx	r8
 8003cd2:	4306      	orrs	r6, r0
 8003cd4:	3568      	adds	r5, #104	@ 0x68
 8003cd6:	e7e9      	b.n	8003cac <_fwalk_sglue+0x10>

08003cd8 <siprintf>:
 8003cd8:	b40e      	push	{r1, r2, r3}
 8003cda:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003cde:	b500      	push	{lr}
 8003ce0:	b09c      	sub	sp, #112	@ 0x70
 8003ce2:	ab1d      	add	r3, sp, #116	@ 0x74
 8003ce4:	9002      	str	r0, [sp, #8]
 8003ce6:	9006      	str	r0, [sp, #24]
 8003ce8:	9107      	str	r1, [sp, #28]
 8003cea:	9104      	str	r1, [sp, #16]
 8003cec:	4808      	ldr	r0, [pc, #32]	@ (8003d10 <siprintf+0x38>)
 8003cee:	4909      	ldr	r1, [pc, #36]	@ (8003d14 <siprintf+0x3c>)
 8003cf0:	f853 2b04 	ldr.w	r2, [r3], #4
 8003cf4:	9105      	str	r1, [sp, #20]
 8003cf6:	6800      	ldr	r0, [r0, #0]
 8003cf8:	a902      	add	r1, sp, #8
 8003cfa:	9301      	str	r3, [sp, #4]
 8003cfc:	f001 fc26 	bl	800554c <_svfiprintf_r>
 8003d00:	2200      	movs	r2, #0
 8003d02:	9b02      	ldr	r3, [sp, #8]
 8003d04:	701a      	strb	r2, [r3, #0]
 8003d06:	b01c      	add	sp, #112	@ 0x70
 8003d08:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d0c:	b003      	add	sp, #12
 8003d0e:	4770      	bx	lr
 8003d10:	20000018 	.word	0x20000018
 8003d14:	ffff0208 	.word	0xffff0208

08003d18 <__sread>:
 8003d18:	b510      	push	{r4, lr}
 8003d1a:	460c      	mov	r4, r1
 8003d1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d20:	f000 f86c 	bl	8003dfc <_read_r>
 8003d24:	2800      	cmp	r0, #0
 8003d26:	bfab      	itete	ge
 8003d28:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003d2a:	89a3      	ldrhlt	r3, [r4, #12]
 8003d2c:	181b      	addge	r3, r3, r0
 8003d2e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003d32:	bfac      	ite	ge
 8003d34:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003d36:	81a3      	strhlt	r3, [r4, #12]
 8003d38:	bd10      	pop	{r4, pc}

08003d3a <__swrite>:
 8003d3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d3e:	461f      	mov	r7, r3
 8003d40:	898b      	ldrh	r3, [r1, #12]
 8003d42:	4605      	mov	r5, r0
 8003d44:	05db      	lsls	r3, r3, #23
 8003d46:	460c      	mov	r4, r1
 8003d48:	4616      	mov	r6, r2
 8003d4a:	d505      	bpl.n	8003d58 <__swrite+0x1e>
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d54:	f000 f840 	bl	8003dd8 <_lseek_r>
 8003d58:	89a3      	ldrh	r3, [r4, #12]
 8003d5a:	4632      	mov	r2, r6
 8003d5c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d60:	81a3      	strh	r3, [r4, #12]
 8003d62:	4628      	mov	r0, r5
 8003d64:	463b      	mov	r3, r7
 8003d66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d6e:	f000 b857 	b.w	8003e20 <_write_r>

08003d72 <__sseek>:
 8003d72:	b510      	push	{r4, lr}
 8003d74:	460c      	mov	r4, r1
 8003d76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d7a:	f000 f82d 	bl	8003dd8 <_lseek_r>
 8003d7e:	1c43      	adds	r3, r0, #1
 8003d80:	89a3      	ldrh	r3, [r4, #12]
 8003d82:	bf15      	itete	ne
 8003d84:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003d86:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003d8a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003d8e:	81a3      	strheq	r3, [r4, #12]
 8003d90:	bf18      	it	ne
 8003d92:	81a3      	strhne	r3, [r4, #12]
 8003d94:	bd10      	pop	{r4, pc}

08003d96 <__sclose>:
 8003d96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d9a:	f000 b80d 	b.w	8003db8 <_close_r>

08003d9e <memset>:
 8003d9e:	4603      	mov	r3, r0
 8003da0:	4402      	add	r2, r0
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d100      	bne.n	8003da8 <memset+0xa>
 8003da6:	4770      	bx	lr
 8003da8:	f803 1b01 	strb.w	r1, [r3], #1
 8003dac:	e7f9      	b.n	8003da2 <memset+0x4>
	...

08003db0 <_localeconv_r>:
 8003db0:	4800      	ldr	r0, [pc, #0]	@ (8003db4 <_localeconv_r+0x4>)
 8003db2:	4770      	bx	lr
 8003db4:	20000158 	.word	0x20000158

08003db8 <_close_r>:
 8003db8:	b538      	push	{r3, r4, r5, lr}
 8003dba:	2300      	movs	r3, #0
 8003dbc:	4d05      	ldr	r5, [pc, #20]	@ (8003dd4 <_close_r+0x1c>)
 8003dbe:	4604      	mov	r4, r0
 8003dc0:	4608      	mov	r0, r1
 8003dc2:	602b      	str	r3, [r5, #0]
 8003dc4:	f7fd fb98 	bl	80014f8 <_close>
 8003dc8:	1c43      	adds	r3, r0, #1
 8003dca:	d102      	bne.n	8003dd2 <_close_r+0x1a>
 8003dcc:	682b      	ldr	r3, [r5, #0]
 8003dce:	b103      	cbz	r3, 8003dd2 <_close_r+0x1a>
 8003dd0:	6023      	str	r3, [r4, #0]
 8003dd2:	bd38      	pop	{r3, r4, r5, pc}
 8003dd4:	20000b20 	.word	0x20000b20

08003dd8 <_lseek_r>:
 8003dd8:	b538      	push	{r3, r4, r5, lr}
 8003dda:	4604      	mov	r4, r0
 8003ddc:	4608      	mov	r0, r1
 8003dde:	4611      	mov	r1, r2
 8003de0:	2200      	movs	r2, #0
 8003de2:	4d05      	ldr	r5, [pc, #20]	@ (8003df8 <_lseek_r+0x20>)
 8003de4:	602a      	str	r2, [r5, #0]
 8003de6:	461a      	mov	r2, r3
 8003de8:	f7fd fb92 	bl	8001510 <_lseek>
 8003dec:	1c43      	adds	r3, r0, #1
 8003dee:	d102      	bne.n	8003df6 <_lseek_r+0x1e>
 8003df0:	682b      	ldr	r3, [r5, #0]
 8003df2:	b103      	cbz	r3, 8003df6 <_lseek_r+0x1e>
 8003df4:	6023      	str	r3, [r4, #0]
 8003df6:	bd38      	pop	{r3, r4, r5, pc}
 8003df8:	20000b20 	.word	0x20000b20

08003dfc <_read_r>:
 8003dfc:	b538      	push	{r3, r4, r5, lr}
 8003dfe:	4604      	mov	r4, r0
 8003e00:	4608      	mov	r0, r1
 8003e02:	4611      	mov	r1, r2
 8003e04:	2200      	movs	r2, #0
 8003e06:	4d05      	ldr	r5, [pc, #20]	@ (8003e1c <_read_r+0x20>)
 8003e08:	602a      	str	r2, [r5, #0]
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	f7fd fb66 	bl	80014dc <_read>
 8003e10:	1c43      	adds	r3, r0, #1
 8003e12:	d102      	bne.n	8003e1a <_read_r+0x1e>
 8003e14:	682b      	ldr	r3, [r5, #0]
 8003e16:	b103      	cbz	r3, 8003e1a <_read_r+0x1e>
 8003e18:	6023      	str	r3, [r4, #0]
 8003e1a:	bd38      	pop	{r3, r4, r5, pc}
 8003e1c:	20000b20 	.word	0x20000b20

08003e20 <_write_r>:
 8003e20:	b538      	push	{r3, r4, r5, lr}
 8003e22:	4604      	mov	r4, r0
 8003e24:	4608      	mov	r0, r1
 8003e26:	4611      	mov	r1, r2
 8003e28:	2200      	movs	r2, #0
 8003e2a:	4d05      	ldr	r5, [pc, #20]	@ (8003e40 <_write_r+0x20>)
 8003e2c:	602a      	str	r2, [r5, #0]
 8003e2e:	461a      	mov	r2, r3
 8003e30:	f7fc ff68 	bl	8000d04 <_write>
 8003e34:	1c43      	adds	r3, r0, #1
 8003e36:	d102      	bne.n	8003e3e <_write_r+0x1e>
 8003e38:	682b      	ldr	r3, [r5, #0]
 8003e3a:	b103      	cbz	r3, 8003e3e <_write_r+0x1e>
 8003e3c:	6023      	str	r3, [r4, #0]
 8003e3e:	bd38      	pop	{r3, r4, r5, pc}
 8003e40:	20000b20 	.word	0x20000b20

08003e44 <__errno>:
 8003e44:	4b01      	ldr	r3, [pc, #4]	@ (8003e4c <__errno+0x8>)
 8003e46:	6818      	ldr	r0, [r3, #0]
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	20000018 	.word	0x20000018

08003e50 <__libc_init_array>:
 8003e50:	b570      	push	{r4, r5, r6, lr}
 8003e52:	2600      	movs	r6, #0
 8003e54:	4d0c      	ldr	r5, [pc, #48]	@ (8003e88 <__libc_init_array+0x38>)
 8003e56:	4c0d      	ldr	r4, [pc, #52]	@ (8003e8c <__libc_init_array+0x3c>)
 8003e58:	1b64      	subs	r4, r4, r5
 8003e5a:	10a4      	asrs	r4, r4, #2
 8003e5c:	42a6      	cmp	r6, r4
 8003e5e:	d109      	bne.n	8003e74 <__libc_init_array+0x24>
 8003e60:	f002 f86e 	bl	8005f40 <_init>
 8003e64:	2600      	movs	r6, #0
 8003e66:	4d0a      	ldr	r5, [pc, #40]	@ (8003e90 <__libc_init_array+0x40>)
 8003e68:	4c0a      	ldr	r4, [pc, #40]	@ (8003e94 <__libc_init_array+0x44>)
 8003e6a:	1b64      	subs	r4, r4, r5
 8003e6c:	10a4      	asrs	r4, r4, #2
 8003e6e:	42a6      	cmp	r6, r4
 8003e70:	d105      	bne.n	8003e7e <__libc_init_array+0x2e>
 8003e72:	bd70      	pop	{r4, r5, r6, pc}
 8003e74:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e78:	4798      	blx	r3
 8003e7a:	3601      	adds	r6, #1
 8003e7c:	e7ee      	b.n	8003e5c <__libc_init_array+0xc>
 8003e7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e82:	4798      	blx	r3
 8003e84:	3601      	adds	r6, #1
 8003e86:	e7f2      	b.n	8003e6e <__libc_init_array+0x1e>
 8003e88:	08006884 	.word	0x08006884
 8003e8c:	08006884 	.word	0x08006884
 8003e90:	08006884 	.word	0x08006884
 8003e94:	08006888 	.word	0x08006888

08003e98 <__retarget_lock_init_recursive>:
 8003e98:	4770      	bx	lr

08003e9a <__retarget_lock_acquire_recursive>:
 8003e9a:	4770      	bx	lr

08003e9c <__retarget_lock_release_recursive>:
 8003e9c:	4770      	bx	lr

08003e9e <memchr>:
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	b510      	push	{r4, lr}
 8003ea2:	b2c9      	uxtb	r1, r1
 8003ea4:	4402      	add	r2, r0
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	d101      	bne.n	8003eb0 <memchr+0x12>
 8003eac:	2000      	movs	r0, #0
 8003eae:	e003      	b.n	8003eb8 <memchr+0x1a>
 8003eb0:	7804      	ldrb	r4, [r0, #0]
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	428c      	cmp	r4, r1
 8003eb6:	d1f6      	bne.n	8003ea6 <memchr+0x8>
 8003eb8:	bd10      	pop	{r4, pc}
	...

08003ebc <__assert_func>:
 8003ebc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003ebe:	4614      	mov	r4, r2
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	4b09      	ldr	r3, [pc, #36]	@ (8003ee8 <__assert_func+0x2c>)
 8003ec4:	4605      	mov	r5, r0
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68d8      	ldr	r0, [r3, #12]
 8003eca:	b954      	cbnz	r4, 8003ee2 <__assert_func+0x26>
 8003ecc:	4b07      	ldr	r3, [pc, #28]	@ (8003eec <__assert_func+0x30>)
 8003ece:	461c      	mov	r4, r3
 8003ed0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003ed4:	9100      	str	r1, [sp, #0]
 8003ed6:	462b      	mov	r3, r5
 8003ed8:	4905      	ldr	r1, [pc, #20]	@ (8003ef0 <__assert_func+0x34>)
 8003eda:	f001 fcdb 	bl	8005894 <fiprintf>
 8003ede:	f001 fd23 	bl	8005928 <abort>
 8003ee2:	4b04      	ldr	r3, [pc, #16]	@ (8003ef4 <__assert_func+0x38>)
 8003ee4:	e7f4      	b.n	8003ed0 <__assert_func+0x14>
 8003ee6:	bf00      	nop
 8003ee8:	20000018 	.word	0x20000018
 8003eec:	08006592 	.word	0x08006592
 8003ef0:	08006564 	.word	0x08006564
 8003ef4:	08006557 	.word	0x08006557

08003ef8 <quorem>:
 8003ef8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003efc:	6903      	ldr	r3, [r0, #16]
 8003efe:	690c      	ldr	r4, [r1, #16]
 8003f00:	4607      	mov	r7, r0
 8003f02:	42a3      	cmp	r3, r4
 8003f04:	db7e      	blt.n	8004004 <quorem+0x10c>
 8003f06:	3c01      	subs	r4, #1
 8003f08:	00a3      	lsls	r3, r4, #2
 8003f0a:	f100 0514 	add.w	r5, r0, #20
 8003f0e:	f101 0814 	add.w	r8, r1, #20
 8003f12:	9300      	str	r3, [sp, #0]
 8003f14:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003f18:	9301      	str	r3, [sp, #4]
 8003f1a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003f1e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003f22:	3301      	adds	r3, #1
 8003f24:	429a      	cmp	r2, r3
 8003f26:	fbb2 f6f3 	udiv	r6, r2, r3
 8003f2a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003f2e:	d32e      	bcc.n	8003f8e <quorem+0x96>
 8003f30:	f04f 0a00 	mov.w	sl, #0
 8003f34:	46c4      	mov	ip, r8
 8003f36:	46ae      	mov	lr, r5
 8003f38:	46d3      	mov	fp, sl
 8003f3a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003f3e:	b298      	uxth	r0, r3
 8003f40:	fb06 a000 	mla	r0, r6, r0, sl
 8003f44:	0c1b      	lsrs	r3, r3, #16
 8003f46:	0c02      	lsrs	r2, r0, #16
 8003f48:	fb06 2303 	mla	r3, r6, r3, r2
 8003f4c:	f8de 2000 	ldr.w	r2, [lr]
 8003f50:	b280      	uxth	r0, r0
 8003f52:	b292      	uxth	r2, r2
 8003f54:	1a12      	subs	r2, r2, r0
 8003f56:	445a      	add	r2, fp
 8003f58:	f8de 0000 	ldr.w	r0, [lr]
 8003f5c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003f66:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003f6a:	b292      	uxth	r2, r2
 8003f6c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003f70:	45e1      	cmp	r9, ip
 8003f72:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8003f76:	f84e 2b04 	str.w	r2, [lr], #4
 8003f7a:	d2de      	bcs.n	8003f3a <quorem+0x42>
 8003f7c:	9b00      	ldr	r3, [sp, #0]
 8003f7e:	58eb      	ldr	r3, [r5, r3]
 8003f80:	b92b      	cbnz	r3, 8003f8e <quorem+0x96>
 8003f82:	9b01      	ldr	r3, [sp, #4]
 8003f84:	3b04      	subs	r3, #4
 8003f86:	429d      	cmp	r5, r3
 8003f88:	461a      	mov	r2, r3
 8003f8a:	d32f      	bcc.n	8003fec <quorem+0xf4>
 8003f8c:	613c      	str	r4, [r7, #16]
 8003f8e:	4638      	mov	r0, r7
 8003f90:	f001 f978 	bl	8005284 <__mcmp>
 8003f94:	2800      	cmp	r0, #0
 8003f96:	db25      	blt.n	8003fe4 <quorem+0xec>
 8003f98:	4629      	mov	r1, r5
 8003f9a:	2000      	movs	r0, #0
 8003f9c:	f858 2b04 	ldr.w	r2, [r8], #4
 8003fa0:	f8d1 c000 	ldr.w	ip, [r1]
 8003fa4:	fa1f fe82 	uxth.w	lr, r2
 8003fa8:	fa1f f38c 	uxth.w	r3, ip
 8003fac:	eba3 030e 	sub.w	r3, r3, lr
 8003fb0:	4403      	add	r3, r0
 8003fb2:	0c12      	lsrs	r2, r2, #16
 8003fb4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8003fb8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003fc2:	45c1      	cmp	r9, r8
 8003fc4:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003fc8:	f841 3b04 	str.w	r3, [r1], #4
 8003fcc:	d2e6      	bcs.n	8003f9c <quorem+0xa4>
 8003fce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003fd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003fd6:	b922      	cbnz	r2, 8003fe2 <quorem+0xea>
 8003fd8:	3b04      	subs	r3, #4
 8003fda:	429d      	cmp	r5, r3
 8003fdc:	461a      	mov	r2, r3
 8003fde:	d30b      	bcc.n	8003ff8 <quorem+0x100>
 8003fe0:	613c      	str	r4, [r7, #16]
 8003fe2:	3601      	adds	r6, #1
 8003fe4:	4630      	mov	r0, r6
 8003fe6:	b003      	add	sp, #12
 8003fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fec:	6812      	ldr	r2, [r2, #0]
 8003fee:	3b04      	subs	r3, #4
 8003ff0:	2a00      	cmp	r2, #0
 8003ff2:	d1cb      	bne.n	8003f8c <quorem+0x94>
 8003ff4:	3c01      	subs	r4, #1
 8003ff6:	e7c6      	b.n	8003f86 <quorem+0x8e>
 8003ff8:	6812      	ldr	r2, [r2, #0]
 8003ffa:	3b04      	subs	r3, #4
 8003ffc:	2a00      	cmp	r2, #0
 8003ffe:	d1ef      	bne.n	8003fe0 <quorem+0xe8>
 8004000:	3c01      	subs	r4, #1
 8004002:	e7ea      	b.n	8003fda <quorem+0xe2>
 8004004:	2000      	movs	r0, #0
 8004006:	e7ee      	b.n	8003fe6 <quorem+0xee>

08004008 <_dtoa_r>:
 8004008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800400c:	4614      	mov	r4, r2
 800400e:	461d      	mov	r5, r3
 8004010:	69c7      	ldr	r7, [r0, #28]
 8004012:	b097      	sub	sp, #92	@ 0x5c
 8004014:	4683      	mov	fp, r0
 8004016:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800401a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800401c:	b97f      	cbnz	r7, 800403e <_dtoa_r+0x36>
 800401e:	2010      	movs	r0, #16
 8004020:	f000 fe02 	bl	8004c28 <malloc>
 8004024:	4602      	mov	r2, r0
 8004026:	f8cb 001c 	str.w	r0, [fp, #28]
 800402a:	b920      	cbnz	r0, 8004036 <_dtoa_r+0x2e>
 800402c:	21ef      	movs	r1, #239	@ 0xef
 800402e:	4ba8      	ldr	r3, [pc, #672]	@ (80042d0 <_dtoa_r+0x2c8>)
 8004030:	48a8      	ldr	r0, [pc, #672]	@ (80042d4 <_dtoa_r+0x2cc>)
 8004032:	f7ff ff43 	bl	8003ebc <__assert_func>
 8004036:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800403a:	6007      	str	r7, [r0, #0]
 800403c:	60c7      	str	r7, [r0, #12]
 800403e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004042:	6819      	ldr	r1, [r3, #0]
 8004044:	b159      	cbz	r1, 800405e <_dtoa_r+0x56>
 8004046:	685a      	ldr	r2, [r3, #4]
 8004048:	2301      	movs	r3, #1
 800404a:	4093      	lsls	r3, r2
 800404c:	604a      	str	r2, [r1, #4]
 800404e:	608b      	str	r3, [r1, #8]
 8004050:	4658      	mov	r0, fp
 8004052:	f000 fedf 	bl	8004e14 <_Bfree>
 8004056:	2200      	movs	r2, #0
 8004058:	f8db 301c 	ldr.w	r3, [fp, #28]
 800405c:	601a      	str	r2, [r3, #0]
 800405e:	1e2b      	subs	r3, r5, #0
 8004060:	bfaf      	iteee	ge
 8004062:	2300      	movge	r3, #0
 8004064:	2201      	movlt	r2, #1
 8004066:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800406a:	9303      	strlt	r3, [sp, #12]
 800406c:	bfa8      	it	ge
 800406e:	6033      	strge	r3, [r6, #0]
 8004070:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004074:	4b98      	ldr	r3, [pc, #608]	@ (80042d8 <_dtoa_r+0x2d0>)
 8004076:	bfb8      	it	lt
 8004078:	6032      	strlt	r2, [r6, #0]
 800407a:	ea33 0308 	bics.w	r3, r3, r8
 800407e:	d112      	bne.n	80040a6 <_dtoa_r+0x9e>
 8004080:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004084:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004086:	6013      	str	r3, [r2, #0]
 8004088:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800408c:	4323      	orrs	r3, r4
 800408e:	f000 8550 	beq.w	8004b32 <_dtoa_r+0xb2a>
 8004092:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004094:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80042dc <_dtoa_r+0x2d4>
 8004098:	2b00      	cmp	r3, #0
 800409a:	f000 8552 	beq.w	8004b42 <_dtoa_r+0xb3a>
 800409e:	f10a 0303 	add.w	r3, sl, #3
 80040a2:	f000 bd4c 	b.w	8004b3e <_dtoa_r+0xb36>
 80040a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80040aa:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80040ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80040b2:	2200      	movs	r2, #0
 80040b4:	2300      	movs	r3, #0
 80040b6:	f7fc fc77 	bl	80009a8 <__aeabi_dcmpeq>
 80040ba:	4607      	mov	r7, r0
 80040bc:	b158      	cbz	r0, 80040d6 <_dtoa_r+0xce>
 80040be:	2301      	movs	r3, #1
 80040c0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80040c2:	6013      	str	r3, [r2, #0]
 80040c4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80040c6:	b113      	cbz	r3, 80040ce <_dtoa_r+0xc6>
 80040c8:	4b85      	ldr	r3, [pc, #532]	@ (80042e0 <_dtoa_r+0x2d8>)
 80040ca:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80040cc:	6013      	str	r3, [r2, #0]
 80040ce:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80042e4 <_dtoa_r+0x2dc>
 80040d2:	f000 bd36 	b.w	8004b42 <_dtoa_r+0xb3a>
 80040d6:	ab14      	add	r3, sp, #80	@ 0x50
 80040d8:	9301      	str	r3, [sp, #4]
 80040da:	ab15      	add	r3, sp, #84	@ 0x54
 80040dc:	9300      	str	r3, [sp, #0]
 80040de:	4658      	mov	r0, fp
 80040e0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80040e4:	f001 f97e 	bl	80053e4 <__d2b>
 80040e8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80040ec:	4681      	mov	r9, r0
 80040ee:	2e00      	cmp	r6, #0
 80040f0:	d077      	beq.n	80041e2 <_dtoa_r+0x1da>
 80040f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80040f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80040f8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80040fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004100:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004104:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004108:	9712      	str	r7, [sp, #72]	@ 0x48
 800410a:	4619      	mov	r1, r3
 800410c:	2200      	movs	r2, #0
 800410e:	4b76      	ldr	r3, [pc, #472]	@ (80042e8 <_dtoa_r+0x2e0>)
 8004110:	f7fc f82a 	bl	8000168 <__aeabi_dsub>
 8004114:	a368      	add	r3, pc, #416	@ (adr r3, 80042b8 <_dtoa_r+0x2b0>)
 8004116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800411a:	f7fc f9dd 	bl	80004d8 <__aeabi_dmul>
 800411e:	a368      	add	r3, pc, #416	@ (adr r3, 80042c0 <_dtoa_r+0x2b8>)
 8004120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004124:	f7fc f822 	bl	800016c <__adddf3>
 8004128:	4604      	mov	r4, r0
 800412a:	4630      	mov	r0, r6
 800412c:	460d      	mov	r5, r1
 800412e:	f7fc f969 	bl	8000404 <__aeabi_i2d>
 8004132:	a365      	add	r3, pc, #404	@ (adr r3, 80042c8 <_dtoa_r+0x2c0>)
 8004134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004138:	f7fc f9ce 	bl	80004d8 <__aeabi_dmul>
 800413c:	4602      	mov	r2, r0
 800413e:	460b      	mov	r3, r1
 8004140:	4620      	mov	r0, r4
 8004142:	4629      	mov	r1, r5
 8004144:	f7fc f812 	bl	800016c <__adddf3>
 8004148:	4604      	mov	r4, r0
 800414a:	460d      	mov	r5, r1
 800414c:	f7fc fc74 	bl	8000a38 <__aeabi_d2iz>
 8004150:	2200      	movs	r2, #0
 8004152:	4607      	mov	r7, r0
 8004154:	2300      	movs	r3, #0
 8004156:	4620      	mov	r0, r4
 8004158:	4629      	mov	r1, r5
 800415a:	f7fc fc2f 	bl	80009bc <__aeabi_dcmplt>
 800415e:	b140      	cbz	r0, 8004172 <_dtoa_r+0x16a>
 8004160:	4638      	mov	r0, r7
 8004162:	f7fc f94f 	bl	8000404 <__aeabi_i2d>
 8004166:	4622      	mov	r2, r4
 8004168:	462b      	mov	r3, r5
 800416a:	f7fc fc1d 	bl	80009a8 <__aeabi_dcmpeq>
 800416e:	b900      	cbnz	r0, 8004172 <_dtoa_r+0x16a>
 8004170:	3f01      	subs	r7, #1
 8004172:	2f16      	cmp	r7, #22
 8004174:	d853      	bhi.n	800421e <_dtoa_r+0x216>
 8004176:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800417a:	4b5c      	ldr	r3, [pc, #368]	@ (80042ec <_dtoa_r+0x2e4>)
 800417c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004184:	f7fc fc1a 	bl	80009bc <__aeabi_dcmplt>
 8004188:	2800      	cmp	r0, #0
 800418a:	d04a      	beq.n	8004222 <_dtoa_r+0x21a>
 800418c:	2300      	movs	r3, #0
 800418e:	3f01      	subs	r7, #1
 8004190:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004192:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004194:	1b9b      	subs	r3, r3, r6
 8004196:	1e5a      	subs	r2, r3, #1
 8004198:	bf46      	itte	mi
 800419a:	f1c3 0801 	rsbmi	r8, r3, #1
 800419e:	2300      	movmi	r3, #0
 80041a0:	f04f 0800 	movpl.w	r8, #0
 80041a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80041a6:	bf48      	it	mi
 80041a8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80041aa:	2f00      	cmp	r7, #0
 80041ac:	db3b      	blt.n	8004226 <_dtoa_r+0x21e>
 80041ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80041b0:	970e      	str	r7, [sp, #56]	@ 0x38
 80041b2:	443b      	add	r3, r7
 80041b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80041b6:	2300      	movs	r3, #0
 80041b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80041ba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80041bc:	2b09      	cmp	r3, #9
 80041be:	d866      	bhi.n	800428e <_dtoa_r+0x286>
 80041c0:	2b05      	cmp	r3, #5
 80041c2:	bfc4      	itt	gt
 80041c4:	3b04      	subgt	r3, #4
 80041c6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80041c8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80041ca:	bfc8      	it	gt
 80041cc:	2400      	movgt	r4, #0
 80041ce:	f1a3 0302 	sub.w	r3, r3, #2
 80041d2:	bfd8      	it	le
 80041d4:	2401      	movle	r4, #1
 80041d6:	2b03      	cmp	r3, #3
 80041d8:	d864      	bhi.n	80042a4 <_dtoa_r+0x29c>
 80041da:	e8df f003 	tbb	[pc, r3]
 80041de:	382b      	.short	0x382b
 80041e0:	5636      	.short	0x5636
 80041e2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80041e6:	441e      	add	r6, r3
 80041e8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80041ec:	2b20      	cmp	r3, #32
 80041ee:	bfc1      	itttt	gt
 80041f0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80041f4:	fa08 f803 	lslgt.w	r8, r8, r3
 80041f8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80041fc:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004200:	bfd6      	itet	le
 8004202:	f1c3 0320 	rsble	r3, r3, #32
 8004206:	ea48 0003 	orrgt.w	r0, r8, r3
 800420a:	fa04 f003 	lslle.w	r0, r4, r3
 800420e:	f7fc f8e9 	bl	80003e4 <__aeabi_ui2d>
 8004212:	2201      	movs	r2, #1
 8004214:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004218:	3e01      	subs	r6, #1
 800421a:	9212      	str	r2, [sp, #72]	@ 0x48
 800421c:	e775      	b.n	800410a <_dtoa_r+0x102>
 800421e:	2301      	movs	r3, #1
 8004220:	e7b6      	b.n	8004190 <_dtoa_r+0x188>
 8004222:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004224:	e7b5      	b.n	8004192 <_dtoa_r+0x18a>
 8004226:	427b      	negs	r3, r7
 8004228:	930a      	str	r3, [sp, #40]	@ 0x28
 800422a:	2300      	movs	r3, #0
 800422c:	eba8 0807 	sub.w	r8, r8, r7
 8004230:	930e      	str	r3, [sp, #56]	@ 0x38
 8004232:	e7c2      	b.n	80041ba <_dtoa_r+0x1b2>
 8004234:	2300      	movs	r3, #0
 8004236:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004238:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800423a:	2b00      	cmp	r3, #0
 800423c:	dc35      	bgt.n	80042aa <_dtoa_r+0x2a2>
 800423e:	2301      	movs	r3, #1
 8004240:	461a      	mov	r2, r3
 8004242:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004246:	9221      	str	r2, [sp, #132]	@ 0x84
 8004248:	e00b      	b.n	8004262 <_dtoa_r+0x25a>
 800424a:	2301      	movs	r3, #1
 800424c:	e7f3      	b.n	8004236 <_dtoa_r+0x22e>
 800424e:	2300      	movs	r3, #0
 8004250:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004252:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004254:	18fb      	adds	r3, r7, r3
 8004256:	9308      	str	r3, [sp, #32]
 8004258:	3301      	adds	r3, #1
 800425a:	2b01      	cmp	r3, #1
 800425c:	9307      	str	r3, [sp, #28]
 800425e:	bfb8      	it	lt
 8004260:	2301      	movlt	r3, #1
 8004262:	2100      	movs	r1, #0
 8004264:	2204      	movs	r2, #4
 8004266:	f8db 001c 	ldr.w	r0, [fp, #28]
 800426a:	f102 0514 	add.w	r5, r2, #20
 800426e:	429d      	cmp	r5, r3
 8004270:	d91f      	bls.n	80042b2 <_dtoa_r+0x2aa>
 8004272:	6041      	str	r1, [r0, #4]
 8004274:	4658      	mov	r0, fp
 8004276:	f000 fd8d 	bl	8004d94 <_Balloc>
 800427a:	4682      	mov	sl, r0
 800427c:	2800      	cmp	r0, #0
 800427e:	d139      	bne.n	80042f4 <_dtoa_r+0x2ec>
 8004280:	4602      	mov	r2, r0
 8004282:	f240 11af 	movw	r1, #431	@ 0x1af
 8004286:	4b1a      	ldr	r3, [pc, #104]	@ (80042f0 <_dtoa_r+0x2e8>)
 8004288:	e6d2      	b.n	8004030 <_dtoa_r+0x28>
 800428a:	2301      	movs	r3, #1
 800428c:	e7e0      	b.n	8004250 <_dtoa_r+0x248>
 800428e:	2401      	movs	r4, #1
 8004290:	2300      	movs	r3, #0
 8004292:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004294:	9320      	str	r3, [sp, #128]	@ 0x80
 8004296:	f04f 33ff 	mov.w	r3, #4294967295
 800429a:	2200      	movs	r2, #0
 800429c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80042a0:	2312      	movs	r3, #18
 80042a2:	e7d0      	b.n	8004246 <_dtoa_r+0x23e>
 80042a4:	2301      	movs	r3, #1
 80042a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80042a8:	e7f5      	b.n	8004296 <_dtoa_r+0x28e>
 80042aa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80042ac:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80042b0:	e7d7      	b.n	8004262 <_dtoa_r+0x25a>
 80042b2:	3101      	adds	r1, #1
 80042b4:	0052      	lsls	r2, r2, #1
 80042b6:	e7d8      	b.n	800426a <_dtoa_r+0x262>
 80042b8:	636f4361 	.word	0x636f4361
 80042bc:	3fd287a7 	.word	0x3fd287a7
 80042c0:	8b60c8b3 	.word	0x8b60c8b3
 80042c4:	3fc68a28 	.word	0x3fc68a28
 80042c8:	509f79fb 	.word	0x509f79fb
 80042cc:	3fd34413 	.word	0x3fd34413
 80042d0:	080064b4 	.word	0x080064b4
 80042d4:	080065a0 	.word	0x080065a0
 80042d8:	7ff00000 	.word	0x7ff00000
 80042dc:	0800659c 	.word	0x0800659c
 80042e0:	08006534 	.word	0x08006534
 80042e4:	08006533 	.word	0x08006533
 80042e8:	3ff80000 	.word	0x3ff80000
 80042ec:	08006698 	.word	0x08006698
 80042f0:	080065f8 	.word	0x080065f8
 80042f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80042f8:	6018      	str	r0, [r3, #0]
 80042fa:	9b07      	ldr	r3, [sp, #28]
 80042fc:	2b0e      	cmp	r3, #14
 80042fe:	f200 80a4 	bhi.w	800444a <_dtoa_r+0x442>
 8004302:	2c00      	cmp	r4, #0
 8004304:	f000 80a1 	beq.w	800444a <_dtoa_r+0x442>
 8004308:	2f00      	cmp	r7, #0
 800430a:	dd33      	ble.n	8004374 <_dtoa_r+0x36c>
 800430c:	4b86      	ldr	r3, [pc, #536]	@ (8004528 <_dtoa_r+0x520>)
 800430e:	f007 020f 	and.w	r2, r7, #15
 8004312:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004316:	05f8      	lsls	r0, r7, #23
 8004318:	e9d3 3400 	ldrd	r3, r4, [r3]
 800431c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004320:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004324:	d516      	bpl.n	8004354 <_dtoa_r+0x34c>
 8004326:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800432a:	4b80      	ldr	r3, [pc, #512]	@ (800452c <_dtoa_r+0x524>)
 800432c:	2603      	movs	r6, #3
 800432e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004332:	f7fc f9fb 	bl	800072c <__aeabi_ddiv>
 8004336:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800433a:	f004 040f 	and.w	r4, r4, #15
 800433e:	4d7b      	ldr	r5, [pc, #492]	@ (800452c <_dtoa_r+0x524>)
 8004340:	b954      	cbnz	r4, 8004358 <_dtoa_r+0x350>
 8004342:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004346:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800434a:	f7fc f9ef 	bl	800072c <__aeabi_ddiv>
 800434e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004352:	e028      	b.n	80043a6 <_dtoa_r+0x39e>
 8004354:	2602      	movs	r6, #2
 8004356:	e7f2      	b.n	800433e <_dtoa_r+0x336>
 8004358:	07e1      	lsls	r1, r4, #31
 800435a:	d508      	bpl.n	800436e <_dtoa_r+0x366>
 800435c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004360:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004364:	f7fc f8b8 	bl	80004d8 <__aeabi_dmul>
 8004368:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800436c:	3601      	adds	r6, #1
 800436e:	1064      	asrs	r4, r4, #1
 8004370:	3508      	adds	r5, #8
 8004372:	e7e5      	b.n	8004340 <_dtoa_r+0x338>
 8004374:	f000 80d2 	beq.w	800451c <_dtoa_r+0x514>
 8004378:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800437c:	427c      	negs	r4, r7
 800437e:	4b6a      	ldr	r3, [pc, #424]	@ (8004528 <_dtoa_r+0x520>)
 8004380:	f004 020f 	and.w	r2, r4, #15
 8004384:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438c:	f7fc f8a4 	bl	80004d8 <__aeabi_dmul>
 8004390:	2602      	movs	r6, #2
 8004392:	2300      	movs	r3, #0
 8004394:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004398:	4d64      	ldr	r5, [pc, #400]	@ (800452c <_dtoa_r+0x524>)
 800439a:	1124      	asrs	r4, r4, #4
 800439c:	2c00      	cmp	r4, #0
 800439e:	f040 80b2 	bne.w	8004506 <_dtoa_r+0x4fe>
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1d3      	bne.n	800434e <_dtoa_r+0x346>
 80043a6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80043aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f000 80b7 	beq.w	8004520 <_dtoa_r+0x518>
 80043b2:	2200      	movs	r2, #0
 80043b4:	4620      	mov	r0, r4
 80043b6:	4629      	mov	r1, r5
 80043b8:	4b5d      	ldr	r3, [pc, #372]	@ (8004530 <_dtoa_r+0x528>)
 80043ba:	f7fc faff 	bl	80009bc <__aeabi_dcmplt>
 80043be:	2800      	cmp	r0, #0
 80043c0:	f000 80ae 	beq.w	8004520 <_dtoa_r+0x518>
 80043c4:	9b07      	ldr	r3, [sp, #28]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f000 80aa 	beq.w	8004520 <_dtoa_r+0x518>
 80043cc:	9b08      	ldr	r3, [sp, #32]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	dd37      	ble.n	8004442 <_dtoa_r+0x43a>
 80043d2:	1e7b      	subs	r3, r7, #1
 80043d4:	4620      	mov	r0, r4
 80043d6:	9304      	str	r3, [sp, #16]
 80043d8:	2200      	movs	r2, #0
 80043da:	4629      	mov	r1, r5
 80043dc:	4b55      	ldr	r3, [pc, #340]	@ (8004534 <_dtoa_r+0x52c>)
 80043de:	f7fc f87b 	bl	80004d8 <__aeabi_dmul>
 80043e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80043e6:	9c08      	ldr	r4, [sp, #32]
 80043e8:	3601      	adds	r6, #1
 80043ea:	4630      	mov	r0, r6
 80043ec:	f7fc f80a 	bl	8000404 <__aeabi_i2d>
 80043f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80043f4:	f7fc f870 	bl	80004d8 <__aeabi_dmul>
 80043f8:	2200      	movs	r2, #0
 80043fa:	4b4f      	ldr	r3, [pc, #316]	@ (8004538 <_dtoa_r+0x530>)
 80043fc:	f7fb feb6 	bl	800016c <__adddf3>
 8004400:	4605      	mov	r5, r0
 8004402:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004406:	2c00      	cmp	r4, #0
 8004408:	f040 809a 	bne.w	8004540 <_dtoa_r+0x538>
 800440c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004410:	2200      	movs	r2, #0
 8004412:	4b4a      	ldr	r3, [pc, #296]	@ (800453c <_dtoa_r+0x534>)
 8004414:	f7fb fea8 	bl	8000168 <__aeabi_dsub>
 8004418:	4602      	mov	r2, r0
 800441a:	460b      	mov	r3, r1
 800441c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004420:	462a      	mov	r2, r5
 8004422:	4633      	mov	r3, r6
 8004424:	f7fc fae8 	bl	80009f8 <__aeabi_dcmpgt>
 8004428:	2800      	cmp	r0, #0
 800442a:	f040 828e 	bne.w	800494a <_dtoa_r+0x942>
 800442e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004432:	462a      	mov	r2, r5
 8004434:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004438:	f7fc fac0 	bl	80009bc <__aeabi_dcmplt>
 800443c:	2800      	cmp	r0, #0
 800443e:	f040 8127 	bne.w	8004690 <_dtoa_r+0x688>
 8004442:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004446:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800444a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800444c:	2b00      	cmp	r3, #0
 800444e:	f2c0 8163 	blt.w	8004718 <_dtoa_r+0x710>
 8004452:	2f0e      	cmp	r7, #14
 8004454:	f300 8160 	bgt.w	8004718 <_dtoa_r+0x710>
 8004458:	4b33      	ldr	r3, [pc, #204]	@ (8004528 <_dtoa_r+0x520>)
 800445a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800445e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004462:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004466:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004468:	2b00      	cmp	r3, #0
 800446a:	da03      	bge.n	8004474 <_dtoa_r+0x46c>
 800446c:	9b07      	ldr	r3, [sp, #28]
 800446e:	2b00      	cmp	r3, #0
 8004470:	f340 8100 	ble.w	8004674 <_dtoa_r+0x66c>
 8004474:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004478:	4656      	mov	r6, sl
 800447a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800447e:	4620      	mov	r0, r4
 8004480:	4629      	mov	r1, r5
 8004482:	f7fc f953 	bl	800072c <__aeabi_ddiv>
 8004486:	f7fc fad7 	bl	8000a38 <__aeabi_d2iz>
 800448a:	4680      	mov	r8, r0
 800448c:	f7fb ffba 	bl	8000404 <__aeabi_i2d>
 8004490:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004494:	f7fc f820 	bl	80004d8 <__aeabi_dmul>
 8004498:	4602      	mov	r2, r0
 800449a:	460b      	mov	r3, r1
 800449c:	4620      	mov	r0, r4
 800449e:	4629      	mov	r1, r5
 80044a0:	f7fb fe62 	bl	8000168 <__aeabi_dsub>
 80044a4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80044a8:	9d07      	ldr	r5, [sp, #28]
 80044aa:	f806 4b01 	strb.w	r4, [r6], #1
 80044ae:	eba6 040a 	sub.w	r4, r6, sl
 80044b2:	42a5      	cmp	r5, r4
 80044b4:	4602      	mov	r2, r0
 80044b6:	460b      	mov	r3, r1
 80044b8:	f040 8116 	bne.w	80046e8 <_dtoa_r+0x6e0>
 80044bc:	f7fb fe56 	bl	800016c <__adddf3>
 80044c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80044c4:	4604      	mov	r4, r0
 80044c6:	460d      	mov	r5, r1
 80044c8:	f7fc fa96 	bl	80009f8 <__aeabi_dcmpgt>
 80044cc:	2800      	cmp	r0, #0
 80044ce:	f040 80f8 	bne.w	80046c2 <_dtoa_r+0x6ba>
 80044d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80044d6:	4620      	mov	r0, r4
 80044d8:	4629      	mov	r1, r5
 80044da:	f7fc fa65 	bl	80009a8 <__aeabi_dcmpeq>
 80044de:	b118      	cbz	r0, 80044e8 <_dtoa_r+0x4e0>
 80044e0:	f018 0f01 	tst.w	r8, #1
 80044e4:	f040 80ed 	bne.w	80046c2 <_dtoa_r+0x6ba>
 80044e8:	4649      	mov	r1, r9
 80044ea:	4658      	mov	r0, fp
 80044ec:	f000 fc92 	bl	8004e14 <_Bfree>
 80044f0:	2300      	movs	r3, #0
 80044f2:	7033      	strb	r3, [r6, #0]
 80044f4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80044f6:	3701      	adds	r7, #1
 80044f8:	601f      	str	r7, [r3, #0]
 80044fa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f000 8320 	beq.w	8004b42 <_dtoa_r+0xb3a>
 8004502:	601e      	str	r6, [r3, #0]
 8004504:	e31d      	b.n	8004b42 <_dtoa_r+0xb3a>
 8004506:	07e2      	lsls	r2, r4, #31
 8004508:	d505      	bpl.n	8004516 <_dtoa_r+0x50e>
 800450a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800450e:	f7fb ffe3 	bl	80004d8 <__aeabi_dmul>
 8004512:	2301      	movs	r3, #1
 8004514:	3601      	adds	r6, #1
 8004516:	1064      	asrs	r4, r4, #1
 8004518:	3508      	adds	r5, #8
 800451a:	e73f      	b.n	800439c <_dtoa_r+0x394>
 800451c:	2602      	movs	r6, #2
 800451e:	e742      	b.n	80043a6 <_dtoa_r+0x39e>
 8004520:	9c07      	ldr	r4, [sp, #28]
 8004522:	9704      	str	r7, [sp, #16]
 8004524:	e761      	b.n	80043ea <_dtoa_r+0x3e2>
 8004526:	bf00      	nop
 8004528:	08006698 	.word	0x08006698
 800452c:	08006670 	.word	0x08006670
 8004530:	3ff00000 	.word	0x3ff00000
 8004534:	40240000 	.word	0x40240000
 8004538:	401c0000 	.word	0x401c0000
 800453c:	40140000 	.word	0x40140000
 8004540:	4b70      	ldr	r3, [pc, #448]	@ (8004704 <_dtoa_r+0x6fc>)
 8004542:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004544:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004548:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800454c:	4454      	add	r4, sl
 800454e:	2900      	cmp	r1, #0
 8004550:	d045      	beq.n	80045de <_dtoa_r+0x5d6>
 8004552:	2000      	movs	r0, #0
 8004554:	496c      	ldr	r1, [pc, #432]	@ (8004708 <_dtoa_r+0x700>)
 8004556:	f7fc f8e9 	bl	800072c <__aeabi_ddiv>
 800455a:	4633      	mov	r3, r6
 800455c:	462a      	mov	r2, r5
 800455e:	f7fb fe03 	bl	8000168 <__aeabi_dsub>
 8004562:	4656      	mov	r6, sl
 8004564:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004568:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800456c:	f7fc fa64 	bl	8000a38 <__aeabi_d2iz>
 8004570:	4605      	mov	r5, r0
 8004572:	f7fb ff47 	bl	8000404 <__aeabi_i2d>
 8004576:	4602      	mov	r2, r0
 8004578:	460b      	mov	r3, r1
 800457a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800457e:	f7fb fdf3 	bl	8000168 <__aeabi_dsub>
 8004582:	4602      	mov	r2, r0
 8004584:	460b      	mov	r3, r1
 8004586:	3530      	adds	r5, #48	@ 0x30
 8004588:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800458c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004590:	f806 5b01 	strb.w	r5, [r6], #1
 8004594:	f7fc fa12 	bl	80009bc <__aeabi_dcmplt>
 8004598:	2800      	cmp	r0, #0
 800459a:	d163      	bne.n	8004664 <_dtoa_r+0x65c>
 800459c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80045a0:	2000      	movs	r0, #0
 80045a2:	495a      	ldr	r1, [pc, #360]	@ (800470c <_dtoa_r+0x704>)
 80045a4:	f7fb fde0 	bl	8000168 <__aeabi_dsub>
 80045a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80045ac:	f7fc fa06 	bl	80009bc <__aeabi_dcmplt>
 80045b0:	2800      	cmp	r0, #0
 80045b2:	f040 8087 	bne.w	80046c4 <_dtoa_r+0x6bc>
 80045b6:	42a6      	cmp	r6, r4
 80045b8:	f43f af43 	beq.w	8004442 <_dtoa_r+0x43a>
 80045bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80045c0:	2200      	movs	r2, #0
 80045c2:	4b53      	ldr	r3, [pc, #332]	@ (8004710 <_dtoa_r+0x708>)
 80045c4:	f7fb ff88 	bl	80004d8 <__aeabi_dmul>
 80045c8:	2200      	movs	r2, #0
 80045ca:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80045ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045d2:	4b4f      	ldr	r3, [pc, #316]	@ (8004710 <_dtoa_r+0x708>)
 80045d4:	f7fb ff80 	bl	80004d8 <__aeabi_dmul>
 80045d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80045dc:	e7c4      	b.n	8004568 <_dtoa_r+0x560>
 80045de:	4631      	mov	r1, r6
 80045e0:	4628      	mov	r0, r5
 80045e2:	f7fb ff79 	bl	80004d8 <__aeabi_dmul>
 80045e6:	4656      	mov	r6, sl
 80045e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80045ec:	9413      	str	r4, [sp, #76]	@ 0x4c
 80045ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045f2:	f7fc fa21 	bl	8000a38 <__aeabi_d2iz>
 80045f6:	4605      	mov	r5, r0
 80045f8:	f7fb ff04 	bl	8000404 <__aeabi_i2d>
 80045fc:	4602      	mov	r2, r0
 80045fe:	460b      	mov	r3, r1
 8004600:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004604:	f7fb fdb0 	bl	8000168 <__aeabi_dsub>
 8004608:	4602      	mov	r2, r0
 800460a:	460b      	mov	r3, r1
 800460c:	3530      	adds	r5, #48	@ 0x30
 800460e:	f806 5b01 	strb.w	r5, [r6], #1
 8004612:	42a6      	cmp	r6, r4
 8004614:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004618:	f04f 0200 	mov.w	r2, #0
 800461c:	d124      	bne.n	8004668 <_dtoa_r+0x660>
 800461e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004622:	4b39      	ldr	r3, [pc, #228]	@ (8004708 <_dtoa_r+0x700>)
 8004624:	f7fb fda2 	bl	800016c <__adddf3>
 8004628:	4602      	mov	r2, r0
 800462a:	460b      	mov	r3, r1
 800462c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004630:	f7fc f9e2 	bl	80009f8 <__aeabi_dcmpgt>
 8004634:	2800      	cmp	r0, #0
 8004636:	d145      	bne.n	80046c4 <_dtoa_r+0x6bc>
 8004638:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800463c:	2000      	movs	r0, #0
 800463e:	4932      	ldr	r1, [pc, #200]	@ (8004708 <_dtoa_r+0x700>)
 8004640:	f7fb fd92 	bl	8000168 <__aeabi_dsub>
 8004644:	4602      	mov	r2, r0
 8004646:	460b      	mov	r3, r1
 8004648:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800464c:	f7fc f9b6 	bl	80009bc <__aeabi_dcmplt>
 8004650:	2800      	cmp	r0, #0
 8004652:	f43f aef6 	beq.w	8004442 <_dtoa_r+0x43a>
 8004656:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004658:	1e73      	subs	r3, r6, #1
 800465a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800465c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004660:	2b30      	cmp	r3, #48	@ 0x30
 8004662:	d0f8      	beq.n	8004656 <_dtoa_r+0x64e>
 8004664:	9f04      	ldr	r7, [sp, #16]
 8004666:	e73f      	b.n	80044e8 <_dtoa_r+0x4e0>
 8004668:	4b29      	ldr	r3, [pc, #164]	@ (8004710 <_dtoa_r+0x708>)
 800466a:	f7fb ff35 	bl	80004d8 <__aeabi_dmul>
 800466e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004672:	e7bc      	b.n	80045ee <_dtoa_r+0x5e6>
 8004674:	d10c      	bne.n	8004690 <_dtoa_r+0x688>
 8004676:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800467a:	2200      	movs	r2, #0
 800467c:	4b25      	ldr	r3, [pc, #148]	@ (8004714 <_dtoa_r+0x70c>)
 800467e:	f7fb ff2b 	bl	80004d8 <__aeabi_dmul>
 8004682:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004686:	f7fc f9ad 	bl	80009e4 <__aeabi_dcmpge>
 800468a:	2800      	cmp	r0, #0
 800468c:	f000 815b 	beq.w	8004946 <_dtoa_r+0x93e>
 8004690:	2400      	movs	r4, #0
 8004692:	4625      	mov	r5, r4
 8004694:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004696:	4656      	mov	r6, sl
 8004698:	43db      	mvns	r3, r3
 800469a:	9304      	str	r3, [sp, #16]
 800469c:	2700      	movs	r7, #0
 800469e:	4621      	mov	r1, r4
 80046a0:	4658      	mov	r0, fp
 80046a2:	f000 fbb7 	bl	8004e14 <_Bfree>
 80046a6:	2d00      	cmp	r5, #0
 80046a8:	d0dc      	beq.n	8004664 <_dtoa_r+0x65c>
 80046aa:	b12f      	cbz	r7, 80046b8 <_dtoa_r+0x6b0>
 80046ac:	42af      	cmp	r7, r5
 80046ae:	d003      	beq.n	80046b8 <_dtoa_r+0x6b0>
 80046b0:	4639      	mov	r1, r7
 80046b2:	4658      	mov	r0, fp
 80046b4:	f000 fbae 	bl	8004e14 <_Bfree>
 80046b8:	4629      	mov	r1, r5
 80046ba:	4658      	mov	r0, fp
 80046bc:	f000 fbaa 	bl	8004e14 <_Bfree>
 80046c0:	e7d0      	b.n	8004664 <_dtoa_r+0x65c>
 80046c2:	9704      	str	r7, [sp, #16]
 80046c4:	4633      	mov	r3, r6
 80046c6:	461e      	mov	r6, r3
 80046c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80046cc:	2a39      	cmp	r2, #57	@ 0x39
 80046ce:	d107      	bne.n	80046e0 <_dtoa_r+0x6d8>
 80046d0:	459a      	cmp	sl, r3
 80046d2:	d1f8      	bne.n	80046c6 <_dtoa_r+0x6be>
 80046d4:	9a04      	ldr	r2, [sp, #16]
 80046d6:	3201      	adds	r2, #1
 80046d8:	9204      	str	r2, [sp, #16]
 80046da:	2230      	movs	r2, #48	@ 0x30
 80046dc:	f88a 2000 	strb.w	r2, [sl]
 80046e0:	781a      	ldrb	r2, [r3, #0]
 80046e2:	3201      	adds	r2, #1
 80046e4:	701a      	strb	r2, [r3, #0]
 80046e6:	e7bd      	b.n	8004664 <_dtoa_r+0x65c>
 80046e8:	2200      	movs	r2, #0
 80046ea:	4b09      	ldr	r3, [pc, #36]	@ (8004710 <_dtoa_r+0x708>)
 80046ec:	f7fb fef4 	bl	80004d8 <__aeabi_dmul>
 80046f0:	2200      	movs	r2, #0
 80046f2:	2300      	movs	r3, #0
 80046f4:	4604      	mov	r4, r0
 80046f6:	460d      	mov	r5, r1
 80046f8:	f7fc f956 	bl	80009a8 <__aeabi_dcmpeq>
 80046fc:	2800      	cmp	r0, #0
 80046fe:	f43f aebc 	beq.w	800447a <_dtoa_r+0x472>
 8004702:	e6f1      	b.n	80044e8 <_dtoa_r+0x4e0>
 8004704:	08006698 	.word	0x08006698
 8004708:	3fe00000 	.word	0x3fe00000
 800470c:	3ff00000 	.word	0x3ff00000
 8004710:	40240000 	.word	0x40240000
 8004714:	40140000 	.word	0x40140000
 8004718:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800471a:	2a00      	cmp	r2, #0
 800471c:	f000 80db 	beq.w	80048d6 <_dtoa_r+0x8ce>
 8004720:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004722:	2a01      	cmp	r2, #1
 8004724:	f300 80bf 	bgt.w	80048a6 <_dtoa_r+0x89e>
 8004728:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800472a:	2a00      	cmp	r2, #0
 800472c:	f000 80b7 	beq.w	800489e <_dtoa_r+0x896>
 8004730:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004734:	4646      	mov	r6, r8
 8004736:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004738:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800473a:	2101      	movs	r1, #1
 800473c:	441a      	add	r2, r3
 800473e:	4658      	mov	r0, fp
 8004740:	4498      	add	r8, r3
 8004742:	9209      	str	r2, [sp, #36]	@ 0x24
 8004744:	f000 fc1a 	bl	8004f7c <__i2b>
 8004748:	4605      	mov	r5, r0
 800474a:	b15e      	cbz	r6, 8004764 <_dtoa_r+0x75c>
 800474c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800474e:	2b00      	cmp	r3, #0
 8004750:	dd08      	ble.n	8004764 <_dtoa_r+0x75c>
 8004752:	42b3      	cmp	r3, r6
 8004754:	bfa8      	it	ge
 8004756:	4633      	movge	r3, r6
 8004758:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800475a:	eba8 0803 	sub.w	r8, r8, r3
 800475e:	1af6      	subs	r6, r6, r3
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	9309      	str	r3, [sp, #36]	@ 0x24
 8004764:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004766:	b1f3      	cbz	r3, 80047a6 <_dtoa_r+0x79e>
 8004768:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800476a:	2b00      	cmp	r3, #0
 800476c:	f000 80b7 	beq.w	80048de <_dtoa_r+0x8d6>
 8004770:	b18c      	cbz	r4, 8004796 <_dtoa_r+0x78e>
 8004772:	4629      	mov	r1, r5
 8004774:	4622      	mov	r2, r4
 8004776:	4658      	mov	r0, fp
 8004778:	f000 fcbe 	bl	80050f8 <__pow5mult>
 800477c:	464a      	mov	r2, r9
 800477e:	4601      	mov	r1, r0
 8004780:	4605      	mov	r5, r0
 8004782:	4658      	mov	r0, fp
 8004784:	f000 fc10 	bl	8004fa8 <__multiply>
 8004788:	4649      	mov	r1, r9
 800478a:	9004      	str	r0, [sp, #16]
 800478c:	4658      	mov	r0, fp
 800478e:	f000 fb41 	bl	8004e14 <_Bfree>
 8004792:	9b04      	ldr	r3, [sp, #16]
 8004794:	4699      	mov	r9, r3
 8004796:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004798:	1b1a      	subs	r2, r3, r4
 800479a:	d004      	beq.n	80047a6 <_dtoa_r+0x79e>
 800479c:	4649      	mov	r1, r9
 800479e:	4658      	mov	r0, fp
 80047a0:	f000 fcaa 	bl	80050f8 <__pow5mult>
 80047a4:	4681      	mov	r9, r0
 80047a6:	2101      	movs	r1, #1
 80047a8:	4658      	mov	r0, fp
 80047aa:	f000 fbe7 	bl	8004f7c <__i2b>
 80047ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80047b0:	4604      	mov	r4, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	f000 81c9 	beq.w	8004b4a <_dtoa_r+0xb42>
 80047b8:	461a      	mov	r2, r3
 80047ba:	4601      	mov	r1, r0
 80047bc:	4658      	mov	r0, fp
 80047be:	f000 fc9b 	bl	80050f8 <__pow5mult>
 80047c2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80047c4:	4604      	mov	r4, r0
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	f300 808f 	bgt.w	80048ea <_dtoa_r+0x8e2>
 80047cc:	9b02      	ldr	r3, [sp, #8]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	f040 8087 	bne.w	80048e2 <_dtoa_r+0x8da>
 80047d4:	9b03      	ldr	r3, [sp, #12]
 80047d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047da:	2b00      	cmp	r3, #0
 80047dc:	f040 8083 	bne.w	80048e6 <_dtoa_r+0x8de>
 80047e0:	9b03      	ldr	r3, [sp, #12]
 80047e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80047e6:	0d1b      	lsrs	r3, r3, #20
 80047e8:	051b      	lsls	r3, r3, #20
 80047ea:	b12b      	cbz	r3, 80047f8 <_dtoa_r+0x7f0>
 80047ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047ee:	f108 0801 	add.w	r8, r8, #1
 80047f2:	3301      	adds	r3, #1
 80047f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80047f6:	2301      	movs	r3, #1
 80047f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80047fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f000 81aa 	beq.w	8004b56 <_dtoa_r+0xb4e>
 8004802:	6923      	ldr	r3, [r4, #16]
 8004804:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004808:	6918      	ldr	r0, [r3, #16]
 800480a:	f000 fb6b 	bl	8004ee4 <__hi0bits>
 800480e:	f1c0 0020 	rsb	r0, r0, #32
 8004812:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004814:	4418      	add	r0, r3
 8004816:	f010 001f 	ands.w	r0, r0, #31
 800481a:	d071      	beq.n	8004900 <_dtoa_r+0x8f8>
 800481c:	f1c0 0320 	rsb	r3, r0, #32
 8004820:	2b04      	cmp	r3, #4
 8004822:	dd65      	ble.n	80048f0 <_dtoa_r+0x8e8>
 8004824:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004826:	f1c0 001c 	rsb	r0, r0, #28
 800482a:	4403      	add	r3, r0
 800482c:	4480      	add	r8, r0
 800482e:	4406      	add	r6, r0
 8004830:	9309      	str	r3, [sp, #36]	@ 0x24
 8004832:	f1b8 0f00 	cmp.w	r8, #0
 8004836:	dd05      	ble.n	8004844 <_dtoa_r+0x83c>
 8004838:	4649      	mov	r1, r9
 800483a:	4642      	mov	r2, r8
 800483c:	4658      	mov	r0, fp
 800483e:	f000 fcb5 	bl	80051ac <__lshift>
 8004842:	4681      	mov	r9, r0
 8004844:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004846:	2b00      	cmp	r3, #0
 8004848:	dd05      	ble.n	8004856 <_dtoa_r+0x84e>
 800484a:	4621      	mov	r1, r4
 800484c:	461a      	mov	r2, r3
 800484e:	4658      	mov	r0, fp
 8004850:	f000 fcac 	bl	80051ac <__lshift>
 8004854:	4604      	mov	r4, r0
 8004856:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004858:	2b00      	cmp	r3, #0
 800485a:	d053      	beq.n	8004904 <_dtoa_r+0x8fc>
 800485c:	4621      	mov	r1, r4
 800485e:	4648      	mov	r0, r9
 8004860:	f000 fd10 	bl	8005284 <__mcmp>
 8004864:	2800      	cmp	r0, #0
 8004866:	da4d      	bge.n	8004904 <_dtoa_r+0x8fc>
 8004868:	1e7b      	subs	r3, r7, #1
 800486a:	4649      	mov	r1, r9
 800486c:	9304      	str	r3, [sp, #16]
 800486e:	220a      	movs	r2, #10
 8004870:	2300      	movs	r3, #0
 8004872:	4658      	mov	r0, fp
 8004874:	f000 faf0 	bl	8004e58 <__multadd>
 8004878:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800487a:	4681      	mov	r9, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	f000 816c 	beq.w	8004b5a <_dtoa_r+0xb52>
 8004882:	2300      	movs	r3, #0
 8004884:	4629      	mov	r1, r5
 8004886:	220a      	movs	r2, #10
 8004888:	4658      	mov	r0, fp
 800488a:	f000 fae5 	bl	8004e58 <__multadd>
 800488e:	9b08      	ldr	r3, [sp, #32]
 8004890:	4605      	mov	r5, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	dc61      	bgt.n	800495a <_dtoa_r+0x952>
 8004896:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004898:	2b02      	cmp	r3, #2
 800489a:	dc3b      	bgt.n	8004914 <_dtoa_r+0x90c>
 800489c:	e05d      	b.n	800495a <_dtoa_r+0x952>
 800489e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80048a0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80048a4:	e746      	b.n	8004734 <_dtoa_r+0x72c>
 80048a6:	9b07      	ldr	r3, [sp, #28]
 80048a8:	1e5c      	subs	r4, r3, #1
 80048aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80048ac:	42a3      	cmp	r3, r4
 80048ae:	bfbf      	itttt	lt
 80048b0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80048b2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80048b4:	1ae3      	sublt	r3, r4, r3
 80048b6:	18d2      	addlt	r2, r2, r3
 80048b8:	bfa8      	it	ge
 80048ba:	1b1c      	subge	r4, r3, r4
 80048bc:	9b07      	ldr	r3, [sp, #28]
 80048be:	bfbe      	ittt	lt
 80048c0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80048c2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80048c4:	2400      	movlt	r4, #0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	bfb5      	itete	lt
 80048ca:	eba8 0603 	sublt.w	r6, r8, r3
 80048ce:	4646      	movge	r6, r8
 80048d0:	2300      	movlt	r3, #0
 80048d2:	9b07      	ldrge	r3, [sp, #28]
 80048d4:	e730      	b.n	8004738 <_dtoa_r+0x730>
 80048d6:	4646      	mov	r6, r8
 80048d8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80048da:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80048dc:	e735      	b.n	800474a <_dtoa_r+0x742>
 80048de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80048e0:	e75c      	b.n	800479c <_dtoa_r+0x794>
 80048e2:	2300      	movs	r3, #0
 80048e4:	e788      	b.n	80047f8 <_dtoa_r+0x7f0>
 80048e6:	9b02      	ldr	r3, [sp, #8]
 80048e8:	e786      	b.n	80047f8 <_dtoa_r+0x7f0>
 80048ea:	2300      	movs	r3, #0
 80048ec:	930a      	str	r3, [sp, #40]	@ 0x28
 80048ee:	e788      	b.n	8004802 <_dtoa_r+0x7fa>
 80048f0:	d09f      	beq.n	8004832 <_dtoa_r+0x82a>
 80048f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80048f4:	331c      	adds	r3, #28
 80048f6:	441a      	add	r2, r3
 80048f8:	4498      	add	r8, r3
 80048fa:	441e      	add	r6, r3
 80048fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80048fe:	e798      	b.n	8004832 <_dtoa_r+0x82a>
 8004900:	4603      	mov	r3, r0
 8004902:	e7f6      	b.n	80048f2 <_dtoa_r+0x8ea>
 8004904:	9b07      	ldr	r3, [sp, #28]
 8004906:	9704      	str	r7, [sp, #16]
 8004908:	2b00      	cmp	r3, #0
 800490a:	dc20      	bgt.n	800494e <_dtoa_r+0x946>
 800490c:	9308      	str	r3, [sp, #32]
 800490e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004910:	2b02      	cmp	r3, #2
 8004912:	dd1e      	ble.n	8004952 <_dtoa_r+0x94a>
 8004914:	9b08      	ldr	r3, [sp, #32]
 8004916:	2b00      	cmp	r3, #0
 8004918:	f47f aebc 	bne.w	8004694 <_dtoa_r+0x68c>
 800491c:	4621      	mov	r1, r4
 800491e:	2205      	movs	r2, #5
 8004920:	4658      	mov	r0, fp
 8004922:	f000 fa99 	bl	8004e58 <__multadd>
 8004926:	4601      	mov	r1, r0
 8004928:	4604      	mov	r4, r0
 800492a:	4648      	mov	r0, r9
 800492c:	f000 fcaa 	bl	8005284 <__mcmp>
 8004930:	2800      	cmp	r0, #0
 8004932:	f77f aeaf 	ble.w	8004694 <_dtoa_r+0x68c>
 8004936:	2331      	movs	r3, #49	@ 0x31
 8004938:	4656      	mov	r6, sl
 800493a:	f806 3b01 	strb.w	r3, [r6], #1
 800493e:	9b04      	ldr	r3, [sp, #16]
 8004940:	3301      	adds	r3, #1
 8004942:	9304      	str	r3, [sp, #16]
 8004944:	e6aa      	b.n	800469c <_dtoa_r+0x694>
 8004946:	9c07      	ldr	r4, [sp, #28]
 8004948:	9704      	str	r7, [sp, #16]
 800494a:	4625      	mov	r5, r4
 800494c:	e7f3      	b.n	8004936 <_dtoa_r+0x92e>
 800494e:	9b07      	ldr	r3, [sp, #28]
 8004950:	9308      	str	r3, [sp, #32]
 8004952:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004954:	2b00      	cmp	r3, #0
 8004956:	f000 8104 	beq.w	8004b62 <_dtoa_r+0xb5a>
 800495a:	2e00      	cmp	r6, #0
 800495c:	dd05      	ble.n	800496a <_dtoa_r+0x962>
 800495e:	4629      	mov	r1, r5
 8004960:	4632      	mov	r2, r6
 8004962:	4658      	mov	r0, fp
 8004964:	f000 fc22 	bl	80051ac <__lshift>
 8004968:	4605      	mov	r5, r0
 800496a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800496c:	2b00      	cmp	r3, #0
 800496e:	d05a      	beq.n	8004a26 <_dtoa_r+0xa1e>
 8004970:	4658      	mov	r0, fp
 8004972:	6869      	ldr	r1, [r5, #4]
 8004974:	f000 fa0e 	bl	8004d94 <_Balloc>
 8004978:	4606      	mov	r6, r0
 800497a:	b928      	cbnz	r0, 8004988 <_dtoa_r+0x980>
 800497c:	4602      	mov	r2, r0
 800497e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004982:	4b83      	ldr	r3, [pc, #524]	@ (8004b90 <_dtoa_r+0xb88>)
 8004984:	f7ff bb54 	b.w	8004030 <_dtoa_r+0x28>
 8004988:	692a      	ldr	r2, [r5, #16]
 800498a:	f105 010c 	add.w	r1, r5, #12
 800498e:	3202      	adds	r2, #2
 8004990:	0092      	lsls	r2, r2, #2
 8004992:	300c      	adds	r0, #12
 8004994:	f000 ffba 	bl	800590c <memcpy>
 8004998:	2201      	movs	r2, #1
 800499a:	4631      	mov	r1, r6
 800499c:	4658      	mov	r0, fp
 800499e:	f000 fc05 	bl	80051ac <__lshift>
 80049a2:	462f      	mov	r7, r5
 80049a4:	4605      	mov	r5, r0
 80049a6:	f10a 0301 	add.w	r3, sl, #1
 80049aa:	9307      	str	r3, [sp, #28]
 80049ac:	9b08      	ldr	r3, [sp, #32]
 80049ae:	4453      	add	r3, sl
 80049b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80049b2:	9b02      	ldr	r3, [sp, #8]
 80049b4:	f003 0301 	and.w	r3, r3, #1
 80049b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80049ba:	9b07      	ldr	r3, [sp, #28]
 80049bc:	4621      	mov	r1, r4
 80049be:	3b01      	subs	r3, #1
 80049c0:	4648      	mov	r0, r9
 80049c2:	9302      	str	r3, [sp, #8]
 80049c4:	f7ff fa98 	bl	8003ef8 <quorem>
 80049c8:	4639      	mov	r1, r7
 80049ca:	9008      	str	r0, [sp, #32]
 80049cc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80049d0:	4648      	mov	r0, r9
 80049d2:	f000 fc57 	bl	8005284 <__mcmp>
 80049d6:	462a      	mov	r2, r5
 80049d8:	9009      	str	r0, [sp, #36]	@ 0x24
 80049da:	4621      	mov	r1, r4
 80049dc:	4658      	mov	r0, fp
 80049de:	f000 fc6d 	bl	80052bc <__mdiff>
 80049e2:	68c2      	ldr	r2, [r0, #12]
 80049e4:	4606      	mov	r6, r0
 80049e6:	bb02      	cbnz	r2, 8004a2a <_dtoa_r+0xa22>
 80049e8:	4601      	mov	r1, r0
 80049ea:	4648      	mov	r0, r9
 80049ec:	f000 fc4a 	bl	8005284 <__mcmp>
 80049f0:	4602      	mov	r2, r0
 80049f2:	4631      	mov	r1, r6
 80049f4:	4658      	mov	r0, fp
 80049f6:	920c      	str	r2, [sp, #48]	@ 0x30
 80049f8:	f000 fa0c 	bl	8004e14 <_Bfree>
 80049fc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80049fe:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004a00:	9e07      	ldr	r6, [sp, #28]
 8004a02:	ea43 0102 	orr.w	r1, r3, r2
 8004a06:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004a08:	4319      	orrs	r1, r3
 8004a0a:	d110      	bne.n	8004a2e <_dtoa_r+0xa26>
 8004a0c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004a10:	d029      	beq.n	8004a66 <_dtoa_r+0xa5e>
 8004a12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	dd02      	ble.n	8004a1e <_dtoa_r+0xa16>
 8004a18:	9b08      	ldr	r3, [sp, #32]
 8004a1a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8004a1e:	9b02      	ldr	r3, [sp, #8]
 8004a20:	f883 8000 	strb.w	r8, [r3]
 8004a24:	e63b      	b.n	800469e <_dtoa_r+0x696>
 8004a26:	4628      	mov	r0, r5
 8004a28:	e7bb      	b.n	80049a2 <_dtoa_r+0x99a>
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	e7e1      	b.n	80049f2 <_dtoa_r+0x9ea>
 8004a2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	db04      	blt.n	8004a3e <_dtoa_r+0xa36>
 8004a34:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8004a36:	430b      	orrs	r3, r1
 8004a38:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004a3a:	430b      	orrs	r3, r1
 8004a3c:	d120      	bne.n	8004a80 <_dtoa_r+0xa78>
 8004a3e:	2a00      	cmp	r2, #0
 8004a40:	dded      	ble.n	8004a1e <_dtoa_r+0xa16>
 8004a42:	4649      	mov	r1, r9
 8004a44:	2201      	movs	r2, #1
 8004a46:	4658      	mov	r0, fp
 8004a48:	f000 fbb0 	bl	80051ac <__lshift>
 8004a4c:	4621      	mov	r1, r4
 8004a4e:	4681      	mov	r9, r0
 8004a50:	f000 fc18 	bl	8005284 <__mcmp>
 8004a54:	2800      	cmp	r0, #0
 8004a56:	dc03      	bgt.n	8004a60 <_dtoa_r+0xa58>
 8004a58:	d1e1      	bne.n	8004a1e <_dtoa_r+0xa16>
 8004a5a:	f018 0f01 	tst.w	r8, #1
 8004a5e:	d0de      	beq.n	8004a1e <_dtoa_r+0xa16>
 8004a60:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004a64:	d1d8      	bne.n	8004a18 <_dtoa_r+0xa10>
 8004a66:	2339      	movs	r3, #57	@ 0x39
 8004a68:	9a02      	ldr	r2, [sp, #8]
 8004a6a:	7013      	strb	r3, [r2, #0]
 8004a6c:	4633      	mov	r3, r6
 8004a6e:	461e      	mov	r6, r3
 8004a70:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004a74:	3b01      	subs	r3, #1
 8004a76:	2a39      	cmp	r2, #57	@ 0x39
 8004a78:	d052      	beq.n	8004b20 <_dtoa_r+0xb18>
 8004a7a:	3201      	adds	r2, #1
 8004a7c:	701a      	strb	r2, [r3, #0]
 8004a7e:	e60e      	b.n	800469e <_dtoa_r+0x696>
 8004a80:	2a00      	cmp	r2, #0
 8004a82:	dd07      	ble.n	8004a94 <_dtoa_r+0xa8c>
 8004a84:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004a88:	d0ed      	beq.n	8004a66 <_dtoa_r+0xa5e>
 8004a8a:	9a02      	ldr	r2, [sp, #8]
 8004a8c:	f108 0301 	add.w	r3, r8, #1
 8004a90:	7013      	strb	r3, [r2, #0]
 8004a92:	e604      	b.n	800469e <_dtoa_r+0x696>
 8004a94:	9b07      	ldr	r3, [sp, #28]
 8004a96:	9a07      	ldr	r2, [sp, #28]
 8004a98:	f803 8c01 	strb.w	r8, [r3, #-1]
 8004a9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d028      	beq.n	8004af4 <_dtoa_r+0xaec>
 8004aa2:	4649      	mov	r1, r9
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	220a      	movs	r2, #10
 8004aa8:	4658      	mov	r0, fp
 8004aaa:	f000 f9d5 	bl	8004e58 <__multadd>
 8004aae:	42af      	cmp	r7, r5
 8004ab0:	4681      	mov	r9, r0
 8004ab2:	f04f 0300 	mov.w	r3, #0
 8004ab6:	f04f 020a 	mov.w	r2, #10
 8004aba:	4639      	mov	r1, r7
 8004abc:	4658      	mov	r0, fp
 8004abe:	d107      	bne.n	8004ad0 <_dtoa_r+0xac8>
 8004ac0:	f000 f9ca 	bl	8004e58 <__multadd>
 8004ac4:	4607      	mov	r7, r0
 8004ac6:	4605      	mov	r5, r0
 8004ac8:	9b07      	ldr	r3, [sp, #28]
 8004aca:	3301      	adds	r3, #1
 8004acc:	9307      	str	r3, [sp, #28]
 8004ace:	e774      	b.n	80049ba <_dtoa_r+0x9b2>
 8004ad0:	f000 f9c2 	bl	8004e58 <__multadd>
 8004ad4:	4629      	mov	r1, r5
 8004ad6:	4607      	mov	r7, r0
 8004ad8:	2300      	movs	r3, #0
 8004ada:	220a      	movs	r2, #10
 8004adc:	4658      	mov	r0, fp
 8004ade:	f000 f9bb 	bl	8004e58 <__multadd>
 8004ae2:	4605      	mov	r5, r0
 8004ae4:	e7f0      	b.n	8004ac8 <_dtoa_r+0xac0>
 8004ae6:	9b08      	ldr	r3, [sp, #32]
 8004ae8:	2700      	movs	r7, #0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	bfcc      	ite	gt
 8004aee:	461e      	movgt	r6, r3
 8004af0:	2601      	movle	r6, #1
 8004af2:	4456      	add	r6, sl
 8004af4:	4649      	mov	r1, r9
 8004af6:	2201      	movs	r2, #1
 8004af8:	4658      	mov	r0, fp
 8004afa:	f000 fb57 	bl	80051ac <__lshift>
 8004afe:	4621      	mov	r1, r4
 8004b00:	4681      	mov	r9, r0
 8004b02:	f000 fbbf 	bl	8005284 <__mcmp>
 8004b06:	2800      	cmp	r0, #0
 8004b08:	dcb0      	bgt.n	8004a6c <_dtoa_r+0xa64>
 8004b0a:	d102      	bne.n	8004b12 <_dtoa_r+0xb0a>
 8004b0c:	f018 0f01 	tst.w	r8, #1
 8004b10:	d1ac      	bne.n	8004a6c <_dtoa_r+0xa64>
 8004b12:	4633      	mov	r3, r6
 8004b14:	461e      	mov	r6, r3
 8004b16:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004b1a:	2a30      	cmp	r2, #48	@ 0x30
 8004b1c:	d0fa      	beq.n	8004b14 <_dtoa_r+0xb0c>
 8004b1e:	e5be      	b.n	800469e <_dtoa_r+0x696>
 8004b20:	459a      	cmp	sl, r3
 8004b22:	d1a4      	bne.n	8004a6e <_dtoa_r+0xa66>
 8004b24:	9b04      	ldr	r3, [sp, #16]
 8004b26:	3301      	adds	r3, #1
 8004b28:	9304      	str	r3, [sp, #16]
 8004b2a:	2331      	movs	r3, #49	@ 0x31
 8004b2c:	f88a 3000 	strb.w	r3, [sl]
 8004b30:	e5b5      	b.n	800469e <_dtoa_r+0x696>
 8004b32:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004b34:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8004b94 <_dtoa_r+0xb8c>
 8004b38:	b11b      	cbz	r3, 8004b42 <_dtoa_r+0xb3a>
 8004b3a:	f10a 0308 	add.w	r3, sl, #8
 8004b3e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004b40:	6013      	str	r3, [r2, #0]
 8004b42:	4650      	mov	r0, sl
 8004b44:	b017      	add	sp, #92	@ 0x5c
 8004b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b4a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	f77f ae3d 	ble.w	80047cc <_dtoa_r+0x7c4>
 8004b52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004b54:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b56:	2001      	movs	r0, #1
 8004b58:	e65b      	b.n	8004812 <_dtoa_r+0x80a>
 8004b5a:	9b08      	ldr	r3, [sp, #32]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f77f aed6 	ble.w	800490e <_dtoa_r+0x906>
 8004b62:	4656      	mov	r6, sl
 8004b64:	4621      	mov	r1, r4
 8004b66:	4648      	mov	r0, r9
 8004b68:	f7ff f9c6 	bl	8003ef8 <quorem>
 8004b6c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004b70:	9b08      	ldr	r3, [sp, #32]
 8004b72:	f806 8b01 	strb.w	r8, [r6], #1
 8004b76:	eba6 020a 	sub.w	r2, r6, sl
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	ddb3      	ble.n	8004ae6 <_dtoa_r+0xade>
 8004b7e:	4649      	mov	r1, r9
 8004b80:	2300      	movs	r3, #0
 8004b82:	220a      	movs	r2, #10
 8004b84:	4658      	mov	r0, fp
 8004b86:	f000 f967 	bl	8004e58 <__multadd>
 8004b8a:	4681      	mov	r9, r0
 8004b8c:	e7ea      	b.n	8004b64 <_dtoa_r+0xb5c>
 8004b8e:	bf00      	nop
 8004b90:	080065f8 	.word	0x080065f8
 8004b94:	08006593 	.word	0x08006593

08004b98 <_free_r>:
 8004b98:	b538      	push	{r3, r4, r5, lr}
 8004b9a:	4605      	mov	r5, r0
 8004b9c:	2900      	cmp	r1, #0
 8004b9e:	d040      	beq.n	8004c22 <_free_r+0x8a>
 8004ba0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ba4:	1f0c      	subs	r4, r1, #4
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	bfb8      	it	lt
 8004baa:	18e4      	addlt	r4, r4, r3
 8004bac:	f000 f8e6 	bl	8004d7c <__malloc_lock>
 8004bb0:	4a1c      	ldr	r2, [pc, #112]	@ (8004c24 <_free_r+0x8c>)
 8004bb2:	6813      	ldr	r3, [r2, #0]
 8004bb4:	b933      	cbnz	r3, 8004bc4 <_free_r+0x2c>
 8004bb6:	6063      	str	r3, [r4, #4]
 8004bb8:	6014      	str	r4, [r2, #0]
 8004bba:	4628      	mov	r0, r5
 8004bbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004bc0:	f000 b8e2 	b.w	8004d88 <__malloc_unlock>
 8004bc4:	42a3      	cmp	r3, r4
 8004bc6:	d908      	bls.n	8004bda <_free_r+0x42>
 8004bc8:	6820      	ldr	r0, [r4, #0]
 8004bca:	1821      	adds	r1, r4, r0
 8004bcc:	428b      	cmp	r3, r1
 8004bce:	bf01      	itttt	eq
 8004bd0:	6819      	ldreq	r1, [r3, #0]
 8004bd2:	685b      	ldreq	r3, [r3, #4]
 8004bd4:	1809      	addeq	r1, r1, r0
 8004bd6:	6021      	streq	r1, [r4, #0]
 8004bd8:	e7ed      	b.n	8004bb6 <_free_r+0x1e>
 8004bda:	461a      	mov	r2, r3
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	b10b      	cbz	r3, 8004be4 <_free_r+0x4c>
 8004be0:	42a3      	cmp	r3, r4
 8004be2:	d9fa      	bls.n	8004bda <_free_r+0x42>
 8004be4:	6811      	ldr	r1, [r2, #0]
 8004be6:	1850      	adds	r0, r2, r1
 8004be8:	42a0      	cmp	r0, r4
 8004bea:	d10b      	bne.n	8004c04 <_free_r+0x6c>
 8004bec:	6820      	ldr	r0, [r4, #0]
 8004bee:	4401      	add	r1, r0
 8004bf0:	1850      	adds	r0, r2, r1
 8004bf2:	4283      	cmp	r3, r0
 8004bf4:	6011      	str	r1, [r2, #0]
 8004bf6:	d1e0      	bne.n	8004bba <_free_r+0x22>
 8004bf8:	6818      	ldr	r0, [r3, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	4408      	add	r0, r1
 8004bfe:	6010      	str	r0, [r2, #0]
 8004c00:	6053      	str	r3, [r2, #4]
 8004c02:	e7da      	b.n	8004bba <_free_r+0x22>
 8004c04:	d902      	bls.n	8004c0c <_free_r+0x74>
 8004c06:	230c      	movs	r3, #12
 8004c08:	602b      	str	r3, [r5, #0]
 8004c0a:	e7d6      	b.n	8004bba <_free_r+0x22>
 8004c0c:	6820      	ldr	r0, [r4, #0]
 8004c0e:	1821      	adds	r1, r4, r0
 8004c10:	428b      	cmp	r3, r1
 8004c12:	bf01      	itttt	eq
 8004c14:	6819      	ldreq	r1, [r3, #0]
 8004c16:	685b      	ldreq	r3, [r3, #4]
 8004c18:	1809      	addeq	r1, r1, r0
 8004c1a:	6021      	streq	r1, [r4, #0]
 8004c1c:	6063      	str	r3, [r4, #4]
 8004c1e:	6054      	str	r4, [r2, #4]
 8004c20:	e7cb      	b.n	8004bba <_free_r+0x22>
 8004c22:	bd38      	pop	{r3, r4, r5, pc}
 8004c24:	20000b2c 	.word	0x20000b2c

08004c28 <malloc>:
 8004c28:	4b02      	ldr	r3, [pc, #8]	@ (8004c34 <malloc+0xc>)
 8004c2a:	4601      	mov	r1, r0
 8004c2c:	6818      	ldr	r0, [r3, #0]
 8004c2e:	f000 b825 	b.w	8004c7c <_malloc_r>
 8004c32:	bf00      	nop
 8004c34:	20000018 	.word	0x20000018

08004c38 <sbrk_aligned>:
 8004c38:	b570      	push	{r4, r5, r6, lr}
 8004c3a:	4e0f      	ldr	r6, [pc, #60]	@ (8004c78 <sbrk_aligned+0x40>)
 8004c3c:	460c      	mov	r4, r1
 8004c3e:	6831      	ldr	r1, [r6, #0]
 8004c40:	4605      	mov	r5, r0
 8004c42:	b911      	cbnz	r1, 8004c4a <sbrk_aligned+0x12>
 8004c44:	f000 fe52 	bl	80058ec <_sbrk_r>
 8004c48:	6030      	str	r0, [r6, #0]
 8004c4a:	4621      	mov	r1, r4
 8004c4c:	4628      	mov	r0, r5
 8004c4e:	f000 fe4d 	bl	80058ec <_sbrk_r>
 8004c52:	1c43      	adds	r3, r0, #1
 8004c54:	d103      	bne.n	8004c5e <sbrk_aligned+0x26>
 8004c56:	f04f 34ff 	mov.w	r4, #4294967295
 8004c5a:	4620      	mov	r0, r4
 8004c5c:	bd70      	pop	{r4, r5, r6, pc}
 8004c5e:	1cc4      	adds	r4, r0, #3
 8004c60:	f024 0403 	bic.w	r4, r4, #3
 8004c64:	42a0      	cmp	r0, r4
 8004c66:	d0f8      	beq.n	8004c5a <sbrk_aligned+0x22>
 8004c68:	1a21      	subs	r1, r4, r0
 8004c6a:	4628      	mov	r0, r5
 8004c6c:	f000 fe3e 	bl	80058ec <_sbrk_r>
 8004c70:	3001      	adds	r0, #1
 8004c72:	d1f2      	bne.n	8004c5a <sbrk_aligned+0x22>
 8004c74:	e7ef      	b.n	8004c56 <sbrk_aligned+0x1e>
 8004c76:	bf00      	nop
 8004c78:	20000b28 	.word	0x20000b28

08004c7c <_malloc_r>:
 8004c7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c80:	1ccd      	adds	r5, r1, #3
 8004c82:	f025 0503 	bic.w	r5, r5, #3
 8004c86:	3508      	adds	r5, #8
 8004c88:	2d0c      	cmp	r5, #12
 8004c8a:	bf38      	it	cc
 8004c8c:	250c      	movcc	r5, #12
 8004c8e:	2d00      	cmp	r5, #0
 8004c90:	4606      	mov	r6, r0
 8004c92:	db01      	blt.n	8004c98 <_malloc_r+0x1c>
 8004c94:	42a9      	cmp	r1, r5
 8004c96:	d904      	bls.n	8004ca2 <_malloc_r+0x26>
 8004c98:	230c      	movs	r3, #12
 8004c9a:	6033      	str	r3, [r6, #0]
 8004c9c:	2000      	movs	r0, #0
 8004c9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ca2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004d78 <_malloc_r+0xfc>
 8004ca6:	f000 f869 	bl	8004d7c <__malloc_lock>
 8004caa:	f8d8 3000 	ldr.w	r3, [r8]
 8004cae:	461c      	mov	r4, r3
 8004cb0:	bb44      	cbnz	r4, 8004d04 <_malloc_r+0x88>
 8004cb2:	4629      	mov	r1, r5
 8004cb4:	4630      	mov	r0, r6
 8004cb6:	f7ff ffbf 	bl	8004c38 <sbrk_aligned>
 8004cba:	1c43      	adds	r3, r0, #1
 8004cbc:	4604      	mov	r4, r0
 8004cbe:	d158      	bne.n	8004d72 <_malloc_r+0xf6>
 8004cc0:	f8d8 4000 	ldr.w	r4, [r8]
 8004cc4:	4627      	mov	r7, r4
 8004cc6:	2f00      	cmp	r7, #0
 8004cc8:	d143      	bne.n	8004d52 <_malloc_r+0xd6>
 8004cca:	2c00      	cmp	r4, #0
 8004ccc:	d04b      	beq.n	8004d66 <_malloc_r+0xea>
 8004cce:	6823      	ldr	r3, [r4, #0]
 8004cd0:	4639      	mov	r1, r7
 8004cd2:	4630      	mov	r0, r6
 8004cd4:	eb04 0903 	add.w	r9, r4, r3
 8004cd8:	f000 fe08 	bl	80058ec <_sbrk_r>
 8004cdc:	4581      	cmp	r9, r0
 8004cde:	d142      	bne.n	8004d66 <_malloc_r+0xea>
 8004ce0:	6821      	ldr	r1, [r4, #0]
 8004ce2:	4630      	mov	r0, r6
 8004ce4:	1a6d      	subs	r5, r5, r1
 8004ce6:	4629      	mov	r1, r5
 8004ce8:	f7ff ffa6 	bl	8004c38 <sbrk_aligned>
 8004cec:	3001      	adds	r0, #1
 8004cee:	d03a      	beq.n	8004d66 <_malloc_r+0xea>
 8004cf0:	6823      	ldr	r3, [r4, #0]
 8004cf2:	442b      	add	r3, r5
 8004cf4:	6023      	str	r3, [r4, #0]
 8004cf6:	f8d8 3000 	ldr.w	r3, [r8]
 8004cfa:	685a      	ldr	r2, [r3, #4]
 8004cfc:	bb62      	cbnz	r2, 8004d58 <_malloc_r+0xdc>
 8004cfe:	f8c8 7000 	str.w	r7, [r8]
 8004d02:	e00f      	b.n	8004d24 <_malloc_r+0xa8>
 8004d04:	6822      	ldr	r2, [r4, #0]
 8004d06:	1b52      	subs	r2, r2, r5
 8004d08:	d420      	bmi.n	8004d4c <_malloc_r+0xd0>
 8004d0a:	2a0b      	cmp	r2, #11
 8004d0c:	d917      	bls.n	8004d3e <_malloc_r+0xc2>
 8004d0e:	1961      	adds	r1, r4, r5
 8004d10:	42a3      	cmp	r3, r4
 8004d12:	6025      	str	r5, [r4, #0]
 8004d14:	bf18      	it	ne
 8004d16:	6059      	strne	r1, [r3, #4]
 8004d18:	6863      	ldr	r3, [r4, #4]
 8004d1a:	bf08      	it	eq
 8004d1c:	f8c8 1000 	streq.w	r1, [r8]
 8004d20:	5162      	str	r2, [r4, r5]
 8004d22:	604b      	str	r3, [r1, #4]
 8004d24:	4630      	mov	r0, r6
 8004d26:	f000 f82f 	bl	8004d88 <__malloc_unlock>
 8004d2a:	f104 000b 	add.w	r0, r4, #11
 8004d2e:	1d23      	adds	r3, r4, #4
 8004d30:	f020 0007 	bic.w	r0, r0, #7
 8004d34:	1ac2      	subs	r2, r0, r3
 8004d36:	bf1c      	itt	ne
 8004d38:	1a1b      	subne	r3, r3, r0
 8004d3a:	50a3      	strne	r3, [r4, r2]
 8004d3c:	e7af      	b.n	8004c9e <_malloc_r+0x22>
 8004d3e:	6862      	ldr	r2, [r4, #4]
 8004d40:	42a3      	cmp	r3, r4
 8004d42:	bf0c      	ite	eq
 8004d44:	f8c8 2000 	streq.w	r2, [r8]
 8004d48:	605a      	strne	r2, [r3, #4]
 8004d4a:	e7eb      	b.n	8004d24 <_malloc_r+0xa8>
 8004d4c:	4623      	mov	r3, r4
 8004d4e:	6864      	ldr	r4, [r4, #4]
 8004d50:	e7ae      	b.n	8004cb0 <_malloc_r+0x34>
 8004d52:	463c      	mov	r4, r7
 8004d54:	687f      	ldr	r7, [r7, #4]
 8004d56:	e7b6      	b.n	8004cc6 <_malloc_r+0x4a>
 8004d58:	461a      	mov	r2, r3
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	42a3      	cmp	r3, r4
 8004d5e:	d1fb      	bne.n	8004d58 <_malloc_r+0xdc>
 8004d60:	2300      	movs	r3, #0
 8004d62:	6053      	str	r3, [r2, #4]
 8004d64:	e7de      	b.n	8004d24 <_malloc_r+0xa8>
 8004d66:	230c      	movs	r3, #12
 8004d68:	4630      	mov	r0, r6
 8004d6a:	6033      	str	r3, [r6, #0]
 8004d6c:	f000 f80c 	bl	8004d88 <__malloc_unlock>
 8004d70:	e794      	b.n	8004c9c <_malloc_r+0x20>
 8004d72:	6005      	str	r5, [r0, #0]
 8004d74:	e7d6      	b.n	8004d24 <_malloc_r+0xa8>
 8004d76:	bf00      	nop
 8004d78:	20000b2c 	.word	0x20000b2c

08004d7c <__malloc_lock>:
 8004d7c:	4801      	ldr	r0, [pc, #4]	@ (8004d84 <__malloc_lock+0x8>)
 8004d7e:	f7ff b88c 	b.w	8003e9a <__retarget_lock_acquire_recursive>
 8004d82:	bf00      	nop
 8004d84:	20000b24 	.word	0x20000b24

08004d88 <__malloc_unlock>:
 8004d88:	4801      	ldr	r0, [pc, #4]	@ (8004d90 <__malloc_unlock+0x8>)
 8004d8a:	f7ff b887 	b.w	8003e9c <__retarget_lock_release_recursive>
 8004d8e:	bf00      	nop
 8004d90:	20000b24 	.word	0x20000b24

08004d94 <_Balloc>:
 8004d94:	b570      	push	{r4, r5, r6, lr}
 8004d96:	69c6      	ldr	r6, [r0, #28]
 8004d98:	4604      	mov	r4, r0
 8004d9a:	460d      	mov	r5, r1
 8004d9c:	b976      	cbnz	r6, 8004dbc <_Balloc+0x28>
 8004d9e:	2010      	movs	r0, #16
 8004da0:	f7ff ff42 	bl	8004c28 <malloc>
 8004da4:	4602      	mov	r2, r0
 8004da6:	61e0      	str	r0, [r4, #28]
 8004da8:	b920      	cbnz	r0, 8004db4 <_Balloc+0x20>
 8004daa:	216b      	movs	r1, #107	@ 0x6b
 8004dac:	4b17      	ldr	r3, [pc, #92]	@ (8004e0c <_Balloc+0x78>)
 8004dae:	4818      	ldr	r0, [pc, #96]	@ (8004e10 <_Balloc+0x7c>)
 8004db0:	f7ff f884 	bl	8003ebc <__assert_func>
 8004db4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004db8:	6006      	str	r6, [r0, #0]
 8004dba:	60c6      	str	r6, [r0, #12]
 8004dbc:	69e6      	ldr	r6, [r4, #28]
 8004dbe:	68f3      	ldr	r3, [r6, #12]
 8004dc0:	b183      	cbz	r3, 8004de4 <_Balloc+0x50>
 8004dc2:	69e3      	ldr	r3, [r4, #28]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004dca:	b9b8      	cbnz	r0, 8004dfc <_Balloc+0x68>
 8004dcc:	2101      	movs	r1, #1
 8004dce:	fa01 f605 	lsl.w	r6, r1, r5
 8004dd2:	1d72      	adds	r2, r6, #5
 8004dd4:	4620      	mov	r0, r4
 8004dd6:	0092      	lsls	r2, r2, #2
 8004dd8:	f000 fdad 	bl	8005936 <_calloc_r>
 8004ddc:	b160      	cbz	r0, 8004df8 <_Balloc+0x64>
 8004dde:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004de2:	e00e      	b.n	8004e02 <_Balloc+0x6e>
 8004de4:	2221      	movs	r2, #33	@ 0x21
 8004de6:	2104      	movs	r1, #4
 8004de8:	4620      	mov	r0, r4
 8004dea:	f000 fda4 	bl	8005936 <_calloc_r>
 8004dee:	69e3      	ldr	r3, [r4, #28]
 8004df0:	60f0      	str	r0, [r6, #12]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1e4      	bne.n	8004dc2 <_Balloc+0x2e>
 8004df8:	2000      	movs	r0, #0
 8004dfa:	bd70      	pop	{r4, r5, r6, pc}
 8004dfc:	6802      	ldr	r2, [r0, #0]
 8004dfe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004e02:	2300      	movs	r3, #0
 8004e04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004e08:	e7f7      	b.n	8004dfa <_Balloc+0x66>
 8004e0a:	bf00      	nop
 8004e0c:	080064b4 	.word	0x080064b4
 8004e10:	08006609 	.word	0x08006609

08004e14 <_Bfree>:
 8004e14:	b570      	push	{r4, r5, r6, lr}
 8004e16:	69c6      	ldr	r6, [r0, #28]
 8004e18:	4605      	mov	r5, r0
 8004e1a:	460c      	mov	r4, r1
 8004e1c:	b976      	cbnz	r6, 8004e3c <_Bfree+0x28>
 8004e1e:	2010      	movs	r0, #16
 8004e20:	f7ff ff02 	bl	8004c28 <malloc>
 8004e24:	4602      	mov	r2, r0
 8004e26:	61e8      	str	r0, [r5, #28]
 8004e28:	b920      	cbnz	r0, 8004e34 <_Bfree+0x20>
 8004e2a:	218f      	movs	r1, #143	@ 0x8f
 8004e2c:	4b08      	ldr	r3, [pc, #32]	@ (8004e50 <_Bfree+0x3c>)
 8004e2e:	4809      	ldr	r0, [pc, #36]	@ (8004e54 <_Bfree+0x40>)
 8004e30:	f7ff f844 	bl	8003ebc <__assert_func>
 8004e34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004e38:	6006      	str	r6, [r0, #0]
 8004e3a:	60c6      	str	r6, [r0, #12]
 8004e3c:	b13c      	cbz	r4, 8004e4e <_Bfree+0x3a>
 8004e3e:	69eb      	ldr	r3, [r5, #28]
 8004e40:	6862      	ldr	r2, [r4, #4]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004e48:	6021      	str	r1, [r4, #0]
 8004e4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004e4e:	bd70      	pop	{r4, r5, r6, pc}
 8004e50:	080064b4 	.word	0x080064b4
 8004e54:	08006609 	.word	0x08006609

08004e58 <__multadd>:
 8004e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e5c:	4607      	mov	r7, r0
 8004e5e:	460c      	mov	r4, r1
 8004e60:	461e      	mov	r6, r3
 8004e62:	2000      	movs	r0, #0
 8004e64:	690d      	ldr	r5, [r1, #16]
 8004e66:	f101 0c14 	add.w	ip, r1, #20
 8004e6a:	f8dc 3000 	ldr.w	r3, [ip]
 8004e6e:	3001      	adds	r0, #1
 8004e70:	b299      	uxth	r1, r3
 8004e72:	fb02 6101 	mla	r1, r2, r1, r6
 8004e76:	0c1e      	lsrs	r6, r3, #16
 8004e78:	0c0b      	lsrs	r3, r1, #16
 8004e7a:	fb02 3306 	mla	r3, r2, r6, r3
 8004e7e:	b289      	uxth	r1, r1
 8004e80:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004e84:	4285      	cmp	r5, r0
 8004e86:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004e8a:	f84c 1b04 	str.w	r1, [ip], #4
 8004e8e:	dcec      	bgt.n	8004e6a <__multadd+0x12>
 8004e90:	b30e      	cbz	r6, 8004ed6 <__multadd+0x7e>
 8004e92:	68a3      	ldr	r3, [r4, #8]
 8004e94:	42ab      	cmp	r3, r5
 8004e96:	dc19      	bgt.n	8004ecc <__multadd+0x74>
 8004e98:	6861      	ldr	r1, [r4, #4]
 8004e9a:	4638      	mov	r0, r7
 8004e9c:	3101      	adds	r1, #1
 8004e9e:	f7ff ff79 	bl	8004d94 <_Balloc>
 8004ea2:	4680      	mov	r8, r0
 8004ea4:	b928      	cbnz	r0, 8004eb2 <__multadd+0x5a>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	21ba      	movs	r1, #186	@ 0xba
 8004eaa:	4b0c      	ldr	r3, [pc, #48]	@ (8004edc <__multadd+0x84>)
 8004eac:	480c      	ldr	r0, [pc, #48]	@ (8004ee0 <__multadd+0x88>)
 8004eae:	f7ff f805 	bl	8003ebc <__assert_func>
 8004eb2:	6922      	ldr	r2, [r4, #16]
 8004eb4:	f104 010c 	add.w	r1, r4, #12
 8004eb8:	3202      	adds	r2, #2
 8004eba:	0092      	lsls	r2, r2, #2
 8004ebc:	300c      	adds	r0, #12
 8004ebe:	f000 fd25 	bl	800590c <memcpy>
 8004ec2:	4621      	mov	r1, r4
 8004ec4:	4638      	mov	r0, r7
 8004ec6:	f7ff ffa5 	bl	8004e14 <_Bfree>
 8004eca:	4644      	mov	r4, r8
 8004ecc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004ed0:	3501      	adds	r5, #1
 8004ed2:	615e      	str	r6, [r3, #20]
 8004ed4:	6125      	str	r5, [r4, #16]
 8004ed6:	4620      	mov	r0, r4
 8004ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004edc:	080065f8 	.word	0x080065f8
 8004ee0:	08006609 	.word	0x08006609

08004ee4 <__hi0bits>:
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004eea:	bf3a      	itte	cc
 8004eec:	0403      	lslcc	r3, r0, #16
 8004eee:	2010      	movcc	r0, #16
 8004ef0:	2000      	movcs	r0, #0
 8004ef2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ef6:	bf3c      	itt	cc
 8004ef8:	021b      	lslcc	r3, r3, #8
 8004efa:	3008      	addcc	r0, #8
 8004efc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f00:	bf3c      	itt	cc
 8004f02:	011b      	lslcc	r3, r3, #4
 8004f04:	3004      	addcc	r0, #4
 8004f06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f0a:	bf3c      	itt	cc
 8004f0c:	009b      	lslcc	r3, r3, #2
 8004f0e:	3002      	addcc	r0, #2
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	db05      	blt.n	8004f20 <__hi0bits+0x3c>
 8004f14:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004f18:	f100 0001 	add.w	r0, r0, #1
 8004f1c:	bf08      	it	eq
 8004f1e:	2020      	moveq	r0, #32
 8004f20:	4770      	bx	lr

08004f22 <__lo0bits>:
 8004f22:	6803      	ldr	r3, [r0, #0]
 8004f24:	4602      	mov	r2, r0
 8004f26:	f013 0007 	ands.w	r0, r3, #7
 8004f2a:	d00b      	beq.n	8004f44 <__lo0bits+0x22>
 8004f2c:	07d9      	lsls	r1, r3, #31
 8004f2e:	d421      	bmi.n	8004f74 <__lo0bits+0x52>
 8004f30:	0798      	lsls	r0, r3, #30
 8004f32:	bf49      	itett	mi
 8004f34:	085b      	lsrmi	r3, r3, #1
 8004f36:	089b      	lsrpl	r3, r3, #2
 8004f38:	2001      	movmi	r0, #1
 8004f3a:	6013      	strmi	r3, [r2, #0]
 8004f3c:	bf5c      	itt	pl
 8004f3e:	2002      	movpl	r0, #2
 8004f40:	6013      	strpl	r3, [r2, #0]
 8004f42:	4770      	bx	lr
 8004f44:	b299      	uxth	r1, r3
 8004f46:	b909      	cbnz	r1, 8004f4c <__lo0bits+0x2a>
 8004f48:	2010      	movs	r0, #16
 8004f4a:	0c1b      	lsrs	r3, r3, #16
 8004f4c:	b2d9      	uxtb	r1, r3
 8004f4e:	b909      	cbnz	r1, 8004f54 <__lo0bits+0x32>
 8004f50:	3008      	adds	r0, #8
 8004f52:	0a1b      	lsrs	r3, r3, #8
 8004f54:	0719      	lsls	r1, r3, #28
 8004f56:	bf04      	itt	eq
 8004f58:	091b      	lsreq	r3, r3, #4
 8004f5a:	3004      	addeq	r0, #4
 8004f5c:	0799      	lsls	r1, r3, #30
 8004f5e:	bf04      	itt	eq
 8004f60:	089b      	lsreq	r3, r3, #2
 8004f62:	3002      	addeq	r0, #2
 8004f64:	07d9      	lsls	r1, r3, #31
 8004f66:	d403      	bmi.n	8004f70 <__lo0bits+0x4e>
 8004f68:	085b      	lsrs	r3, r3, #1
 8004f6a:	f100 0001 	add.w	r0, r0, #1
 8004f6e:	d003      	beq.n	8004f78 <__lo0bits+0x56>
 8004f70:	6013      	str	r3, [r2, #0]
 8004f72:	4770      	bx	lr
 8004f74:	2000      	movs	r0, #0
 8004f76:	4770      	bx	lr
 8004f78:	2020      	movs	r0, #32
 8004f7a:	4770      	bx	lr

08004f7c <__i2b>:
 8004f7c:	b510      	push	{r4, lr}
 8004f7e:	460c      	mov	r4, r1
 8004f80:	2101      	movs	r1, #1
 8004f82:	f7ff ff07 	bl	8004d94 <_Balloc>
 8004f86:	4602      	mov	r2, r0
 8004f88:	b928      	cbnz	r0, 8004f96 <__i2b+0x1a>
 8004f8a:	f240 1145 	movw	r1, #325	@ 0x145
 8004f8e:	4b04      	ldr	r3, [pc, #16]	@ (8004fa0 <__i2b+0x24>)
 8004f90:	4804      	ldr	r0, [pc, #16]	@ (8004fa4 <__i2b+0x28>)
 8004f92:	f7fe ff93 	bl	8003ebc <__assert_func>
 8004f96:	2301      	movs	r3, #1
 8004f98:	6144      	str	r4, [r0, #20]
 8004f9a:	6103      	str	r3, [r0, #16]
 8004f9c:	bd10      	pop	{r4, pc}
 8004f9e:	bf00      	nop
 8004fa0:	080065f8 	.word	0x080065f8
 8004fa4:	08006609 	.word	0x08006609

08004fa8 <__multiply>:
 8004fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fac:	4614      	mov	r4, r2
 8004fae:	690a      	ldr	r2, [r1, #16]
 8004fb0:	6923      	ldr	r3, [r4, #16]
 8004fb2:	460f      	mov	r7, r1
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	bfa2      	ittt	ge
 8004fb8:	4623      	movge	r3, r4
 8004fba:	460c      	movge	r4, r1
 8004fbc:	461f      	movge	r7, r3
 8004fbe:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004fc2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8004fc6:	68a3      	ldr	r3, [r4, #8]
 8004fc8:	6861      	ldr	r1, [r4, #4]
 8004fca:	eb0a 0609 	add.w	r6, sl, r9
 8004fce:	42b3      	cmp	r3, r6
 8004fd0:	b085      	sub	sp, #20
 8004fd2:	bfb8      	it	lt
 8004fd4:	3101      	addlt	r1, #1
 8004fd6:	f7ff fedd 	bl	8004d94 <_Balloc>
 8004fda:	b930      	cbnz	r0, 8004fea <__multiply+0x42>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004fe2:	4b43      	ldr	r3, [pc, #268]	@ (80050f0 <__multiply+0x148>)
 8004fe4:	4843      	ldr	r0, [pc, #268]	@ (80050f4 <__multiply+0x14c>)
 8004fe6:	f7fe ff69 	bl	8003ebc <__assert_func>
 8004fea:	f100 0514 	add.w	r5, r0, #20
 8004fee:	462b      	mov	r3, r5
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004ff6:	4543      	cmp	r3, r8
 8004ff8:	d321      	bcc.n	800503e <__multiply+0x96>
 8004ffa:	f107 0114 	add.w	r1, r7, #20
 8004ffe:	f104 0214 	add.w	r2, r4, #20
 8005002:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005006:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800500a:	9302      	str	r3, [sp, #8]
 800500c:	1b13      	subs	r3, r2, r4
 800500e:	3b15      	subs	r3, #21
 8005010:	f023 0303 	bic.w	r3, r3, #3
 8005014:	3304      	adds	r3, #4
 8005016:	f104 0715 	add.w	r7, r4, #21
 800501a:	42ba      	cmp	r2, r7
 800501c:	bf38      	it	cc
 800501e:	2304      	movcc	r3, #4
 8005020:	9301      	str	r3, [sp, #4]
 8005022:	9b02      	ldr	r3, [sp, #8]
 8005024:	9103      	str	r1, [sp, #12]
 8005026:	428b      	cmp	r3, r1
 8005028:	d80c      	bhi.n	8005044 <__multiply+0x9c>
 800502a:	2e00      	cmp	r6, #0
 800502c:	dd03      	ble.n	8005036 <__multiply+0x8e>
 800502e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005032:	2b00      	cmp	r3, #0
 8005034:	d05a      	beq.n	80050ec <__multiply+0x144>
 8005036:	6106      	str	r6, [r0, #16]
 8005038:	b005      	add	sp, #20
 800503a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800503e:	f843 2b04 	str.w	r2, [r3], #4
 8005042:	e7d8      	b.n	8004ff6 <__multiply+0x4e>
 8005044:	f8b1 a000 	ldrh.w	sl, [r1]
 8005048:	f1ba 0f00 	cmp.w	sl, #0
 800504c:	d023      	beq.n	8005096 <__multiply+0xee>
 800504e:	46a9      	mov	r9, r5
 8005050:	f04f 0c00 	mov.w	ip, #0
 8005054:	f104 0e14 	add.w	lr, r4, #20
 8005058:	f85e 7b04 	ldr.w	r7, [lr], #4
 800505c:	f8d9 3000 	ldr.w	r3, [r9]
 8005060:	fa1f fb87 	uxth.w	fp, r7
 8005064:	b29b      	uxth	r3, r3
 8005066:	fb0a 330b 	mla	r3, sl, fp, r3
 800506a:	4463      	add	r3, ip
 800506c:	f8d9 c000 	ldr.w	ip, [r9]
 8005070:	0c3f      	lsrs	r7, r7, #16
 8005072:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005076:	fb0a c707 	mla	r7, sl, r7, ip
 800507a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800507e:	b29b      	uxth	r3, r3
 8005080:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005084:	4572      	cmp	r2, lr
 8005086:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800508a:	f849 3b04 	str.w	r3, [r9], #4
 800508e:	d8e3      	bhi.n	8005058 <__multiply+0xb0>
 8005090:	9b01      	ldr	r3, [sp, #4]
 8005092:	f845 c003 	str.w	ip, [r5, r3]
 8005096:	9b03      	ldr	r3, [sp, #12]
 8005098:	3104      	adds	r1, #4
 800509a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800509e:	f1b9 0f00 	cmp.w	r9, #0
 80050a2:	d021      	beq.n	80050e8 <__multiply+0x140>
 80050a4:	46ae      	mov	lr, r5
 80050a6:	f04f 0a00 	mov.w	sl, #0
 80050aa:	682b      	ldr	r3, [r5, #0]
 80050ac:	f104 0c14 	add.w	ip, r4, #20
 80050b0:	f8bc b000 	ldrh.w	fp, [ip]
 80050b4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	fb09 770b 	mla	r7, r9, fp, r7
 80050be:	4457      	add	r7, sl
 80050c0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80050c4:	f84e 3b04 	str.w	r3, [lr], #4
 80050c8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80050cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80050d0:	f8be 3000 	ldrh.w	r3, [lr]
 80050d4:	4562      	cmp	r2, ip
 80050d6:	fb09 330a 	mla	r3, r9, sl, r3
 80050da:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80050de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80050e2:	d8e5      	bhi.n	80050b0 <__multiply+0x108>
 80050e4:	9f01      	ldr	r7, [sp, #4]
 80050e6:	51eb      	str	r3, [r5, r7]
 80050e8:	3504      	adds	r5, #4
 80050ea:	e79a      	b.n	8005022 <__multiply+0x7a>
 80050ec:	3e01      	subs	r6, #1
 80050ee:	e79c      	b.n	800502a <__multiply+0x82>
 80050f0:	080065f8 	.word	0x080065f8
 80050f4:	08006609 	.word	0x08006609

080050f8 <__pow5mult>:
 80050f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050fc:	4615      	mov	r5, r2
 80050fe:	f012 0203 	ands.w	r2, r2, #3
 8005102:	4607      	mov	r7, r0
 8005104:	460e      	mov	r6, r1
 8005106:	d007      	beq.n	8005118 <__pow5mult+0x20>
 8005108:	4c25      	ldr	r4, [pc, #148]	@ (80051a0 <__pow5mult+0xa8>)
 800510a:	3a01      	subs	r2, #1
 800510c:	2300      	movs	r3, #0
 800510e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005112:	f7ff fea1 	bl	8004e58 <__multadd>
 8005116:	4606      	mov	r6, r0
 8005118:	10ad      	asrs	r5, r5, #2
 800511a:	d03d      	beq.n	8005198 <__pow5mult+0xa0>
 800511c:	69fc      	ldr	r4, [r7, #28]
 800511e:	b97c      	cbnz	r4, 8005140 <__pow5mult+0x48>
 8005120:	2010      	movs	r0, #16
 8005122:	f7ff fd81 	bl	8004c28 <malloc>
 8005126:	4602      	mov	r2, r0
 8005128:	61f8      	str	r0, [r7, #28]
 800512a:	b928      	cbnz	r0, 8005138 <__pow5mult+0x40>
 800512c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005130:	4b1c      	ldr	r3, [pc, #112]	@ (80051a4 <__pow5mult+0xac>)
 8005132:	481d      	ldr	r0, [pc, #116]	@ (80051a8 <__pow5mult+0xb0>)
 8005134:	f7fe fec2 	bl	8003ebc <__assert_func>
 8005138:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800513c:	6004      	str	r4, [r0, #0]
 800513e:	60c4      	str	r4, [r0, #12]
 8005140:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005144:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005148:	b94c      	cbnz	r4, 800515e <__pow5mult+0x66>
 800514a:	f240 2171 	movw	r1, #625	@ 0x271
 800514e:	4638      	mov	r0, r7
 8005150:	f7ff ff14 	bl	8004f7c <__i2b>
 8005154:	2300      	movs	r3, #0
 8005156:	4604      	mov	r4, r0
 8005158:	f8c8 0008 	str.w	r0, [r8, #8]
 800515c:	6003      	str	r3, [r0, #0]
 800515e:	f04f 0900 	mov.w	r9, #0
 8005162:	07eb      	lsls	r3, r5, #31
 8005164:	d50a      	bpl.n	800517c <__pow5mult+0x84>
 8005166:	4631      	mov	r1, r6
 8005168:	4622      	mov	r2, r4
 800516a:	4638      	mov	r0, r7
 800516c:	f7ff ff1c 	bl	8004fa8 <__multiply>
 8005170:	4680      	mov	r8, r0
 8005172:	4631      	mov	r1, r6
 8005174:	4638      	mov	r0, r7
 8005176:	f7ff fe4d 	bl	8004e14 <_Bfree>
 800517a:	4646      	mov	r6, r8
 800517c:	106d      	asrs	r5, r5, #1
 800517e:	d00b      	beq.n	8005198 <__pow5mult+0xa0>
 8005180:	6820      	ldr	r0, [r4, #0]
 8005182:	b938      	cbnz	r0, 8005194 <__pow5mult+0x9c>
 8005184:	4622      	mov	r2, r4
 8005186:	4621      	mov	r1, r4
 8005188:	4638      	mov	r0, r7
 800518a:	f7ff ff0d 	bl	8004fa8 <__multiply>
 800518e:	6020      	str	r0, [r4, #0]
 8005190:	f8c0 9000 	str.w	r9, [r0]
 8005194:	4604      	mov	r4, r0
 8005196:	e7e4      	b.n	8005162 <__pow5mult+0x6a>
 8005198:	4630      	mov	r0, r6
 800519a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800519e:	bf00      	nop
 80051a0:	08006664 	.word	0x08006664
 80051a4:	080064b4 	.word	0x080064b4
 80051a8:	08006609 	.word	0x08006609

080051ac <__lshift>:
 80051ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051b0:	460c      	mov	r4, r1
 80051b2:	4607      	mov	r7, r0
 80051b4:	4691      	mov	r9, r2
 80051b6:	6923      	ldr	r3, [r4, #16]
 80051b8:	6849      	ldr	r1, [r1, #4]
 80051ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80051be:	68a3      	ldr	r3, [r4, #8]
 80051c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80051c4:	f108 0601 	add.w	r6, r8, #1
 80051c8:	42b3      	cmp	r3, r6
 80051ca:	db0b      	blt.n	80051e4 <__lshift+0x38>
 80051cc:	4638      	mov	r0, r7
 80051ce:	f7ff fde1 	bl	8004d94 <_Balloc>
 80051d2:	4605      	mov	r5, r0
 80051d4:	b948      	cbnz	r0, 80051ea <__lshift+0x3e>
 80051d6:	4602      	mov	r2, r0
 80051d8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80051dc:	4b27      	ldr	r3, [pc, #156]	@ (800527c <__lshift+0xd0>)
 80051de:	4828      	ldr	r0, [pc, #160]	@ (8005280 <__lshift+0xd4>)
 80051e0:	f7fe fe6c 	bl	8003ebc <__assert_func>
 80051e4:	3101      	adds	r1, #1
 80051e6:	005b      	lsls	r3, r3, #1
 80051e8:	e7ee      	b.n	80051c8 <__lshift+0x1c>
 80051ea:	2300      	movs	r3, #0
 80051ec:	f100 0114 	add.w	r1, r0, #20
 80051f0:	f100 0210 	add.w	r2, r0, #16
 80051f4:	4618      	mov	r0, r3
 80051f6:	4553      	cmp	r3, sl
 80051f8:	db33      	blt.n	8005262 <__lshift+0xb6>
 80051fa:	6920      	ldr	r0, [r4, #16]
 80051fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005200:	f104 0314 	add.w	r3, r4, #20
 8005204:	f019 091f 	ands.w	r9, r9, #31
 8005208:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800520c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005210:	d02b      	beq.n	800526a <__lshift+0xbe>
 8005212:	468a      	mov	sl, r1
 8005214:	2200      	movs	r2, #0
 8005216:	f1c9 0e20 	rsb	lr, r9, #32
 800521a:	6818      	ldr	r0, [r3, #0]
 800521c:	fa00 f009 	lsl.w	r0, r0, r9
 8005220:	4310      	orrs	r0, r2
 8005222:	f84a 0b04 	str.w	r0, [sl], #4
 8005226:	f853 2b04 	ldr.w	r2, [r3], #4
 800522a:	459c      	cmp	ip, r3
 800522c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005230:	d8f3      	bhi.n	800521a <__lshift+0x6e>
 8005232:	ebac 0304 	sub.w	r3, ip, r4
 8005236:	3b15      	subs	r3, #21
 8005238:	f023 0303 	bic.w	r3, r3, #3
 800523c:	3304      	adds	r3, #4
 800523e:	f104 0015 	add.w	r0, r4, #21
 8005242:	4584      	cmp	ip, r0
 8005244:	bf38      	it	cc
 8005246:	2304      	movcc	r3, #4
 8005248:	50ca      	str	r2, [r1, r3]
 800524a:	b10a      	cbz	r2, 8005250 <__lshift+0xa4>
 800524c:	f108 0602 	add.w	r6, r8, #2
 8005250:	3e01      	subs	r6, #1
 8005252:	4638      	mov	r0, r7
 8005254:	4621      	mov	r1, r4
 8005256:	612e      	str	r6, [r5, #16]
 8005258:	f7ff fddc 	bl	8004e14 <_Bfree>
 800525c:	4628      	mov	r0, r5
 800525e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005262:	f842 0f04 	str.w	r0, [r2, #4]!
 8005266:	3301      	adds	r3, #1
 8005268:	e7c5      	b.n	80051f6 <__lshift+0x4a>
 800526a:	3904      	subs	r1, #4
 800526c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005270:	459c      	cmp	ip, r3
 8005272:	f841 2f04 	str.w	r2, [r1, #4]!
 8005276:	d8f9      	bhi.n	800526c <__lshift+0xc0>
 8005278:	e7ea      	b.n	8005250 <__lshift+0xa4>
 800527a:	bf00      	nop
 800527c:	080065f8 	.word	0x080065f8
 8005280:	08006609 	.word	0x08006609

08005284 <__mcmp>:
 8005284:	4603      	mov	r3, r0
 8005286:	690a      	ldr	r2, [r1, #16]
 8005288:	6900      	ldr	r0, [r0, #16]
 800528a:	b530      	push	{r4, r5, lr}
 800528c:	1a80      	subs	r0, r0, r2
 800528e:	d10e      	bne.n	80052ae <__mcmp+0x2a>
 8005290:	3314      	adds	r3, #20
 8005292:	3114      	adds	r1, #20
 8005294:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005298:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800529c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80052a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80052a4:	4295      	cmp	r5, r2
 80052a6:	d003      	beq.n	80052b0 <__mcmp+0x2c>
 80052a8:	d205      	bcs.n	80052b6 <__mcmp+0x32>
 80052aa:	f04f 30ff 	mov.w	r0, #4294967295
 80052ae:	bd30      	pop	{r4, r5, pc}
 80052b0:	42a3      	cmp	r3, r4
 80052b2:	d3f3      	bcc.n	800529c <__mcmp+0x18>
 80052b4:	e7fb      	b.n	80052ae <__mcmp+0x2a>
 80052b6:	2001      	movs	r0, #1
 80052b8:	e7f9      	b.n	80052ae <__mcmp+0x2a>
	...

080052bc <__mdiff>:
 80052bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052c0:	4689      	mov	r9, r1
 80052c2:	4606      	mov	r6, r0
 80052c4:	4611      	mov	r1, r2
 80052c6:	4648      	mov	r0, r9
 80052c8:	4614      	mov	r4, r2
 80052ca:	f7ff ffdb 	bl	8005284 <__mcmp>
 80052ce:	1e05      	subs	r5, r0, #0
 80052d0:	d112      	bne.n	80052f8 <__mdiff+0x3c>
 80052d2:	4629      	mov	r1, r5
 80052d4:	4630      	mov	r0, r6
 80052d6:	f7ff fd5d 	bl	8004d94 <_Balloc>
 80052da:	4602      	mov	r2, r0
 80052dc:	b928      	cbnz	r0, 80052ea <__mdiff+0x2e>
 80052de:	f240 2137 	movw	r1, #567	@ 0x237
 80052e2:	4b3e      	ldr	r3, [pc, #248]	@ (80053dc <__mdiff+0x120>)
 80052e4:	483e      	ldr	r0, [pc, #248]	@ (80053e0 <__mdiff+0x124>)
 80052e6:	f7fe fde9 	bl	8003ebc <__assert_func>
 80052ea:	2301      	movs	r3, #1
 80052ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80052f0:	4610      	mov	r0, r2
 80052f2:	b003      	add	sp, #12
 80052f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052f8:	bfbc      	itt	lt
 80052fa:	464b      	movlt	r3, r9
 80052fc:	46a1      	movlt	r9, r4
 80052fe:	4630      	mov	r0, r6
 8005300:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005304:	bfba      	itte	lt
 8005306:	461c      	movlt	r4, r3
 8005308:	2501      	movlt	r5, #1
 800530a:	2500      	movge	r5, #0
 800530c:	f7ff fd42 	bl	8004d94 <_Balloc>
 8005310:	4602      	mov	r2, r0
 8005312:	b918      	cbnz	r0, 800531c <__mdiff+0x60>
 8005314:	f240 2145 	movw	r1, #581	@ 0x245
 8005318:	4b30      	ldr	r3, [pc, #192]	@ (80053dc <__mdiff+0x120>)
 800531a:	e7e3      	b.n	80052e4 <__mdiff+0x28>
 800531c:	f100 0b14 	add.w	fp, r0, #20
 8005320:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005324:	f109 0310 	add.w	r3, r9, #16
 8005328:	60c5      	str	r5, [r0, #12]
 800532a:	f04f 0c00 	mov.w	ip, #0
 800532e:	f109 0514 	add.w	r5, r9, #20
 8005332:	46d9      	mov	r9, fp
 8005334:	6926      	ldr	r6, [r4, #16]
 8005336:	f104 0e14 	add.w	lr, r4, #20
 800533a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800533e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005342:	9301      	str	r3, [sp, #4]
 8005344:	9b01      	ldr	r3, [sp, #4]
 8005346:	f85e 0b04 	ldr.w	r0, [lr], #4
 800534a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800534e:	b281      	uxth	r1, r0
 8005350:	9301      	str	r3, [sp, #4]
 8005352:	fa1f f38a 	uxth.w	r3, sl
 8005356:	1a5b      	subs	r3, r3, r1
 8005358:	0c00      	lsrs	r0, r0, #16
 800535a:	4463      	add	r3, ip
 800535c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005360:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005364:	b29b      	uxth	r3, r3
 8005366:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800536a:	4576      	cmp	r6, lr
 800536c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005370:	f849 3b04 	str.w	r3, [r9], #4
 8005374:	d8e6      	bhi.n	8005344 <__mdiff+0x88>
 8005376:	1b33      	subs	r3, r6, r4
 8005378:	3b15      	subs	r3, #21
 800537a:	f023 0303 	bic.w	r3, r3, #3
 800537e:	3415      	adds	r4, #21
 8005380:	3304      	adds	r3, #4
 8005382:	42a6      	cmp	r6, r4
 8005384:	bf38      	it	cc
 8005386:	2304      	movcc	r3, #4
 8005388:	441d      	add	r5, r3
 800538a:	445b      	add	r3, fp
 800538c:	461e      	mov	r6, r3
 800538e:	462c      	mov	r4, r5
 8005390:	4544      	cmp	r4, r8
 8005392:	d30e      	bcc.n	80053b2 <__mdiff+0xf6>
 8005394:	f108 0103 	add.w	r1, r8, #3
 8005398:	1b49      	subs	r1, r1, r5
 800539a:	f021 0103 	bic.w	r1, r1, #3
 800539e:	3d03      	subs	r5, #3
 80053a0:	45a8      	cmp	r8, r5
 80053a2:	bf38      	it	cc
 80053a4:	2100      	movcc	r1, #0
 80053a6:	440b      	add	r3, r1
 80053a8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80053ac:	b199      	cbz	r1, 80053d6 <__mdiff+0x11a>
 80053ae:	6117      	str	r7, [r2, #16]
 80053b0:	e79e      	b.n	80052f0 <__mdiff+0x34>
 80053b2:	46e6      	mov	lr, ip
 80053b4:	f854 1b04 	ldr.w	r1, [r4], #4
 80053b8:	fa1f fc81 	uxth.w	ip, r1
 80053bc:	44f4      	add	ip, lr
 80053be:	0c08      	lsrs	r0, r1, #16
 80053c0:	4471      	add	r1, lr
 80053c2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80053c6:	b289      	uxth	r1, r1
 80053c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80053cc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80053d0:	f846 1b04 	str.w	r1, [r6], #4
 80053d4:	e7dc      	b.n	8005390 <__mdiff+0xd4>
 80053d6:	3f01      	subs	r7, #1
 80053d8:	e7e6      	b.n	80053a8 <__mdiff+0xec>
 80053da:	bf00      	nop
 80053dc:	080065f8 	.word	0x080065f8
 80053e0:	08006609 	.word	0x08006609

080053e4 <__d2b>:
 80053e4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80053e8:	2101      	movs	r1, #1
 80053ea:	4690      	mov	r8, r2
 80053ec:	4699      	mov	r9, r3
 80053ee:	9e08      	ldr	r6, [sp, #32]
 80053f0:	f7ff fcd0 	bl	8004d94 <_Balloc>
 80053f4:	4604      	mov	r4, r0
 80053f6:	b930      	cbnz	r0, 8005406 <__d2b+0x22>
 80053f8:	4602      	mov	r2, r0
 80053fa:	f240 310f 	movw	r1, #783	@ 0x30f
 80053fe:	4b23      	ldr	r3, [pc, #140]	@ (800548c <__d2b+0xa8>)
 8005400:	4823      	ldr	r0, [pc, #140]	@ (8005490 <__d2b+0xac>)
 8005402:	f7fe fd5b 	bl	8003ebc <__assert_func>
 8005406:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800540a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800540e:	b10d      	cbz	r5, 8005414 <__d2b+0x30>
 8005410:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005414:	9301      	str	r3, [sp, #4]
 8005416:	f1b8 0300 	subs.w	r3, r8, #0
 800541a:	d024      	beq.n	8005466 <__d2b+0x82>
 800541c:	4668      	mov	r0, sp
 800541e:	9300      	str	r3, [sp, #0]
 8005420:	f7ff fd7f 	bl	8004f22 <__lo0bits>
 8005424:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005428:	b1d8      	cbz	r0, 8005462 <__d2b+0x7e>
 800542a:	f1c0 0320 	rsb	r3, r0, #32
 800542e:	fa02 f303 	lsl.w	r3, r2, r3
 8005432:	430b      	orrs	r3, r1
 8005434:	40c2      	lsrs	r2, r0
 8005436:	6163      	str	r3, [r4, #20]
 8005438:	9201      	str	r2, [sp, #4]
 800543a:	9b01      	ldr	r3, [sp, #4]
 800543c:	2b00      	cmp	r3, #0
 800543e:	bf0c      	ite	eq
 8005440:	2201      	moveq	r2, #1
 8005442:	2202      	movne	r2, #2
 8005444:	61a3      	str	r3, [r4, #24]
 8005446:	6122      	str	r2, [r4, #16]
 8005448:	b1ad      	cbz	r5, 8005476 <__d2b+0x92>
 800544a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800544e:	4405      	add	r5, r0
 8005450:	6035      	str	r5, [r6, #0]
 8005452:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005456:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005458:	6018      	str	r0, [r3, #0]
 800545a:	4620      	mov	r0, r4
 800545c:	b002      	add	sp, #8
 800545e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005462:	6161      	str	r1, [r4, #20]
 8005464:	e7e9      	b.n	800543a <__d2b+0x56>
 8005466:	a801      	add	r0, sp, #4
 8005468:	f7ff fd5b 	bl	8004f22 <__lo0bits>
 800546c:	9b01      	ldr	r3, [sp, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	6163      	str	r3, [r4, #20]
 8005472:	3020      	adds	r0, #32
 8005474:	e7e7      	b.n	8005446 <__d2b+0x62>
 8005476:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800547a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800547e:	6030      	str	r0, [r6, #0]
 8005480:	6918      	ldr	r0, [r3, #16]
 8005482:	f7ff fd2f 	bl	8004ee4 <__hi0bits>
 8005486:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800548a:	e7e4      	b.n	8005456 <__d2b+0x72>
 800548c:	080065f8 	.word	0x080065f8
 8005490:	08006609 	.word	0x08006609

08005494 <__ssputs_r>:
 8005494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005498:	461f      	mov	r7, r3
 800549a:	688e      	ldr	r6, [r1, #8]
 800549c:	4682      	mov	sl, r0
 800549e:	42be      	cmp	r6, r7
 80054a0:	460c      	mov	r4, r1
 80054a2:	4690      	mov	r8, r2
 80054a4:	680b      	ldr	r3, [r1, #0]
 80054a6:	d82d      	bhi.n	8005504 <__ssputs_r+0x70>
 80054a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80054ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80054b0:	d026      	beq.n	8005500 <__ssputs_r+0x6c>
 80054b2:	6965      	ldr	r5, [r4, #20]
 80054b4:	6909      	ldr	r1, [r1, #16]
 80054b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80054ba:	eba3 0901 	sub.w	r9, r3, r1
 80054be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80054c2:	1c7b      	adds	r3, r7, #1
 80054c4:	444b      	add	r3, r9
 80054c6:	106d      	asrs	r5, r5, #1
 80054c8:	429d      	cmp	r5, r3
 80054ca:	bf38      	it	cc
 80054cc:	461d      	movcc	r5, r3
 80054ce:	0553      	lsls	r3, r2, #21
 80054d0:	d527      	bpl.n	8005522 <__ssputs_r+0x8e>
 80054d2:	4629      	mov	r1, r5
 80054d4:	f7ff fbd2 	bl	8004c7c <_malloc_r>
 80054d8:	4606      	mov	r6, r0
 80054da:	b360      	cbz	r0, 8005536 <__ssputs_r+0xa2>
 80054dc:	464a      	mov	r2, r9
 80054de:	6921      	ldr	r1, [r4, #16]
 80054e0:	f000 fa14 	bl	800590c <memcpy>
 80054e4:	89a3      	ldrh	r3, [r4, #12]
 80054e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80054ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054ee:	81a3      	strh	r3, [r4, #12]
 80054f0:	6126      	str	r6, [r4, #16]
 80054f2:	444e      	add	r6, r9
 80054f4:	6026      	str	r6, [r4, #0]
 80054f6:	463e      	mov	r6, r7
 80054f8:	6165      	str	r5, [r4, #20]
 80054fa:	eba5 0509 	sub.w	r5, r5, r9
 80054fe:	60a5      	str	r5, [r4, #8]
 8005500:	42be      	cmp	r6, r7
 8005502:	d900      	bls.n	8005506 <__ssputs_r+0x72>
 8005504:	463e      	mov	r6, r7
 8005506:	4632      	mov	r2, r6
 8005508:	4641      	mov	r1, r8
 800550a:	6820      	ldr	r0, [r4, #0]
 800550c:	f000 f9d4 	bl	80058b8 <memmove>
 8005510:	2000      	movs	r0, #0
 8005512:	68a3      	ldr	r3, [r4, #8]
 8005514:	1b9b      	subs	r3, r3, r6
 8005516:	60a3      	str	r3, [r4, #8]
 8005518:	6823      	ldr	r3, [r4, #0]
 800551a:	4433      	add	r3, r6
 800551c:	6023      	str	r3, [r4, #0]
 800551e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005522:	462a      	mov	r2, r5
 8005524:	f000 fa2d 	bl	8005982 <_realloc_r>
 8005528:	4606      	mov	r6, r0
 800552a:	2800      	cmp	r0, #0
 800552c:	d1e0      	bne.n	80054f0 <__ssputs_r+0x5c>
 800552e:	4650      	mov	r0, sl
 8005530:	6921      	ldr	r1, [r4, #16]
 8005532:	f7ff fb31 	bl	8004b98 <_free_r>
 8005536:	230c      	movs	r3, #12
 8005538:	f8ca 3000 	str.w	r3, [sl]
 800553c:	89a3      	ldrh	r3, [r4, #12]
 800553e:	f04f 30ff 	mov.w	r0, #4294967295
 8005542:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005546:	81a3      	strh	r3, [r4, #12]
 8005548:	e7e9      	b.n	800551e <__ssputs_r+0x8a>
	...

0800554c <_svfiprintf_r>:
 800554c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005550:	4698      	mov	r8, r3
 8005552:	898b      	ldrh	r3, [r1, #12]
 8005554:	4607      	mov	r7, r0
 8005556:	061b      	lsls	r3, r3, #24
 8005558:	460d      	mov	r5, r1
 800555a:	4614      	mov	r4, r2
 800555c:	b09d      	sub	sp, #116	@ 0x74
 800555e:	d510      	bpl.n	8005582 <_svfiprintf_r+0x36>
 8005560:	690b      	ldr	r3, [r1, #16]
 8005562:	b973      	cbnz	r3, 8005582 <_svfiprintf_r+0x36>
 8005564:	2140      	movs	r1, #64	@ 0x40
 8005566:	f7ff fb89 	bl	8004c7c <_malloc_r>
 800556a:	6028      	str	r0, [r5, #0]
 800556c:	6128      	str	r0, [r5, #16]
 800556e:	b930      	cbnz	r0, 800557e <_svfiprintf_r+0x32>
 8005570:	230c      	movs	r3, #12
 8005572:	603b      	str	r3, [r7, #0]
 8005574:	f04f 30ff 	mov.w	r0, #4294967295
 8005578:	b01d      	add	sp, #116	@ 0x74
 800557a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800557e:	2340      	movs	r3, #64	@ 0x40
 8005580:	616b      	str	r3, [r5, #20]
 8005582:	2300      	movs	r3, #0
 8005584:	9309      	str	r3, [sp, #36]	@ 0x24
 8005586:	2320      	movs	r3, #32
 8005588:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800558c:	2330      	movs	r3, #48	@ 0x30
 800558e:	f04f 0901 	mov.w	r9, #1
 8005592:	f8cd 800c 	str.w	r8, [sp, #12]
 8005596:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005730 <_svfiprintf_r+0x1e4>
 800559a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800559e:	4623      	mov	r3, r4
 80055a0:	469a      	mov	sl, r3
 80055a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055a6:	b10a      	cbz	r2, 80055ac <_svfiprintf_r+0x60>
 80055a8:	2a25      	cmp	r2, #37	@ 0x25
 80055aa:	d1f9      	bne.n	80055a0 <_svfiprintf_r+0x54>
 80055ac:	ebba 0b04 	subs.w	fp, sl, r4
 80055b0:	d00b      	beq.n	80055ca <_svfiprintf_r+0x7e>
 80055b2:	465b      	mov	r3, fp
 80055b4:	4622      	mov	r2, r4
 80055b6:	4629      	mov	r1, r5
 80055b8:	4638      	mov	r0, r7
 80055ba:	f7ff ff6b 	bl	8005494 <__ssputs_r>
 80055be:	3001      	adds	r0, #1
 80055c0:	f000 80a7 	beq.w	8005712 <_svfiprintf_r+0x1c6>
 80055c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80055c6:	445a      	add	r2, fp
 80055c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80055ca:	f89a 3000 	ldrb.w	r3, [sl]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	f000 809f 	beq.w	8005712 <_svfiprintf_r+0x1c6>
 80055d4:	2300      	movs	r3, #0
 80055d6:	f04f 32ff 	mov.w	r2, #4294967295
 80055da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055de:	f10a 0a01 	add.w	sl, sl, #1
 80055e2:	9304      	str	r3, [sp, #16]
 80055e4:	9307      	str	r3, [sp, #28]
 80055e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80055ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80055ec:	4654      	mov	r4, sl
 80055ee:	2205      	movs	r2, #5
 80055f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055f4:	484e      	ldr	r0, [pc, #312]	@ (8005730 <_svfiprintf_r+0x1e4>)
 80055f6:	f7fe fc52 	bl	8003e9e <memchr>
 80055fa:	9a04      	ldr	r2, [sp, #16]
 80055fc:	b9d8      	cbnz	r0, 8005636 <_svfiprintf_r+0xea>
 80055fe:	06d0      	lsls	r0, r2, #27
 8005600:	bf44      	itt	mi
 8005602:	2320      	movmi	r3, #32
 8005604:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005608:	0711      	lsls	r1, r2, #28
 800560a:	bf44      	itt	mi
 800560c:	232b      	movmi	r3, #43	@ 0x2b
 800560e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005612:	f89a 3000 	ldrb.w	r3, [sl]
 8005616:	2b2a      	cmp	r3, #42	@ 0x2a
 8005618:	d015      	beq.n	8005646 <_svfiprintf_r+0xfa>
 800561a:	4654      	mov	r4, sl
 800561c:	2000      	movs	r0, #0
 800561e:	f04f 0c0a 	mov.w	ip, #10
 8005622:	9a07      	ldr	r2, [sp, #28]
 8005624:	4621      	mov	r1, r4
 8005626:	f811 3b01 	ldrb.w	r3, [r1], #1
 800562a:	3b30      	subs	r3, #48	@ 0x30
 800562c:	2b09      	cmp	r3, #9
 800562e:	d94b      	bls.n	80056c8 <_svfiprintf_r+0x17c>
 8005630:	b1b0      	cbz	r0, 8005660 <_svfiprintf_r+0x114>
 8005632:	9207      	str	r2, [sp, #28]
 8005634:	e014      	b.n	8005660 <_svfiprintf_r+0x114>
 8005636:	eba0 0308 	sub.w	r3, r0, r8
 800563a:	fa09 f303 	lsl.w	r3, r9, r3
 800563e:	4313      	orrs	r3, r2
 8005640:	46a2      	mov	sl, r4
 8005642:	9304      	str	r3, [sp, #16]
 8005644:	e7d2      	b.n	80055ec <_svfiprintf_r+0xa0>
 8005646:	9b03      	ldr	r3, [sp, #12]
 8005648:	1d19      	adds	r1, r3, #4
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	9103      	str	r1, [sp, #12]
 800564e:	2b00      	cmp	r3, #0
 8005650:	bfbb      	ittet	lt
 8005652:	425b      	neglt	r3, r3
 8005654:	f042 0202 	orrlt.w	r2, r2, #2
 8005658:	9307      	strge	r3, [sp, #28]
 800565a:	9307      	strlt	r3, [sp, #28]
 800565c:	bfb8      	it	lt
 800565e:	9204      	strlt	r2, [sp, #16]
 8005660:	7823      	ldrb	r3, [r4, #0]
 8005662:	2b2e      	cmp	r3, #46	@ 0x2e
 8005664:	d10a      	bne.n	800567c <_svfiprintf_r+0x130>
 8005666:	7863      	ldrb	r3, [r4, #1]
 8005668:	2b2a      	cmp	r3, #42	@ 0x2a
 800566a:	d132      	bne.n	80056d2 <_svfiprintf_r+0x186>
 800566c:	9b03      	ldr	r3, [sp, #12]
 800566e:	3402      	adds	r4, #2
 8005670:	1d1a      	adds	r2, r3, #4
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	9203      	str	r2, [sp, #12]
 8005676:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800567a:	9305      	str	r3, [sp, #20]
 800567c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005734 <_svfiprintf_r+0x1e8>
 8005680:	2203      	movs	r2, #3
 8005682:	4650      	mov	r0, sl
 8005684:	7821      	ldrb	r1, [r4, #0]
 8005686:	f7fe fc0a 	bl	8003e9e <memchr>
 800568a:	b138      	cbz	r0, 800569c <_svfiprintf_r+0x150>
 800568c:	2240      	movs	r2, #64	@ 0x40
 800568e:	9b04      	ldr	r3, [sp, #16]
 8005690:	eba0 000a 	sub.w	r0, r0, sl
 8005694:	4082      	lsls	r2, r0
 8005696:	4313      	orrs	r3, r2
 8005698:	3401      	adds	r4, #1
 800569a:	9304      	str	r3, [sp, #16]
 800569c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056a0:	2206      	movs	r2, #6
 80056a2:	4825      	ldr	r0, [pc, #148]	@ (8005738 <_svfiprintf_r+0x1ec>)
 80056a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80056a8:	f7fe fbf9 	bl	8003e9e <memchr>
 80056ac:	2800      	cmp	r0, #0
 80056ae:	d036      	beq.n	800571e <_svfiprintf_r+0x1d2>
 80056b0:	4b22      	ldr	r3, [pc, #136]	@ (800573c <_svfiprintf_r+0x1f0>)
 80056b2:	bb1b      	cbnz	r3, 80056fc <_svfiprintf_r+0x1b0>
 80056b4:	9b03      	ldr	r3, [sp, #12]
 80056b6:	3307      	adds	r3, #7
 80056b8:	f023 0307 	bic.w	r3, r3, #7
 80056bc:	3308      	adds	r3, #8
 80056be:	9303      	str	r3, [sp, #12]
 80056c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056c2:	4433      	add	r3, r6
 80056c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80056c6:	e76a      	b.n	800559e <_svfiprintf_r+0x52>
 80056c8:	460c      	mov	r4, r1
 80056ca:	2001      	movs	r0, #1
 80056cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80056d0:	e7a8      	b.n	8005624 <_svfiprintf_r+0xd8>
 80056d2:	2300      	movs	r3, #0
 80056d4:	f04f 0c0a 	mov.w	ip, #10
 80056d8:	4619      	mov	r1, r3
 80056da:	3401      	adds	r4, #1
 80056dc:	9305      	str	r3, [sp, #20]
 80056de:	4620      	mov	r0, r4
 80056e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056e4:	3a30      	subs	r2, #48	@ 0x30
 80056e6:	2a09      	cmp	r2, #9
 80056e8:	d903      	bls.n	80056f2 <_svfiprintf_r+0x1a6>
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d0c6      	beq.n	800567c <_svfiprintf_r+0x130>
 80056ee:	9105      	str	r1, [sp, #20]
 80056f0:	e7c4      	b.n	800567c <_svfiprintf_r+0x130>
 80056f2:	4604      	mov	r4, r0
 80056f4:	2301      	movs	r3, #1
 80056f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80056fa:	e7f0      	b.n	80056de <_svfiprintf_r+0x192>
 80056fc:	ab03      	add	r3, sp, #12
 80056fe:	9300      	str	r3, [sp, #0]
 8005700:	462a      	mov	r2, r5
 8005702:	4638      	mov	r0, r7
 8005704:	4b0e      	ldr	r3, [pc, #56]	@ (8005740 <_svfiprintf_r+0x1f4>)
 8005706:	a904      	add	r1, sp, #16
 8005708:	f7fd fe66 	bl	80033d8 <_printf_float>
 800570c:	1c42      	adds	r2, r0, #1
 800570e:	4606      	mov	r6, r0
 8005710:	d1d6      	bne.n	80056c0 <_svfiprintf_r+0x174>
 8005712:	89ab      	ldrh	r3, [r5, #12]
 8005714:	065b      	lsls	r3, r3, #25
 8005716:	f53f af2d 	bmi.w	8005574 <_svfiprintf_r+0x28>
 800571a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800571c:	e72c      	b.n	8005578 <_svfiprintf_r+0x2c>
 800571e:	ab03      	add	r3, sp, #12
 8005720:	9300      	str	r3, [sp, #0]
 8005722:	462a      	mov	r2, r5
 8005724:	4638      	mov	r0, r7
 8005726:	4b06      	ldr	r3, [pc, #24]	@ (8005740 <_svfiprintf_r+0x1f4>)
 8005728:	a904      	add	r1, sp, #16
 800572a:	f7fe f8f3 	bl	8003914 <_printf_i>
 800572e:	e7ed      	b.n	800570c <_svfiprintf_r+0x1c0>
 8005730:	08006760 	.word	0x08006760
 8005734:	08006766 	.word	0x08006766
 8005738:	0800676a 	.word	0x0800676a
 800573c:	080033d9 	.word	0x080033d9
 8005740:	08005495 	.word	0x08005495

08005744 <__sflush_r>:
 8005744:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800574a:	0716      	lsls	r6, r2, #28
 800574c:	4605      	mov	r5, r0
 800574e:	460c      	mov	r4, r1
 8005750:	d454      	bmi.n	80057fc <__sflush_r+0xb8>
 8005752:	684b      	ldr	r3, [r1, #4]
 8005754:	2b00      	cmp	r3, #0
 8005756:	dc02      	bgt.n	800575e <__sflush_r+0x1a>
 8005758:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800575a:	2b00      	cmp	r3, #0
 800575c:	dd48      	ble.n	80057f0 <__sflush_r+0xac>
 800575e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005760:	2e00      	cmp	r6, #0
 8005762:	d045      	beq.n	80057f0 <__sflush_r+0xac>
 8005764:	2300      	movs	r3, #0
 8005766:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800576a:	682f      	ldr	r7, [r5, #0]
 800576c:	6a21      	ldr	r1, [r4, #32]
 800576e:	602b      	str	r3, [r5, #0]
 8005770:	d030      	beq.n	80057d4 <__sflush_r+0x90>
 8005772:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005774:	89a3      	ldrh	r3, [r4, #12]
 8005776:	0759      	lsls	r1, r3, #29
 8005778:	d505      	bpl.n	8005786 <__sflush_r+0x42>
 800577a:	6863      	ldr	r3, [r4, #4]
 800577c:	1ad2      	subs	r2, r2, r3
 800577e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005780:	b10b      	cbz	r3, 8005786 <__sflush_r+0x42>
 8005782:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005784:	1ad2      	subs	r2, r2, r3
 8005786:	2300      	movs	r3, #0
 8005788:	4628      	mov	r0, r5
 800578a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800578c:	6a21      	ldr	r1, [r4, #32]
 800578e:	47b0      	blx	r6
 8005790:	1c43      	adds	r3, r0, #1
 8005792:	89a3      	ldrh	r3, [r4, #12]
 8005794:	d106      	bne.n	80057a4 <__sflush_r+0x60>
 8005796:	6829      	ldr	r1, [r5, #0]
 8005798:	291d      	cmp	r1, #29
 800579a:	d82b      	bhi.n	80057f4 <__sflush_r+0xb0>
 800579c:	4a28      	ldr	r2, [pc, #160]	@ (8005840 <__sflush_r+0xfc>)
 800579e:	410a      	asrs	r2, r1
 80057a0:	07d6      	lsls	r6, r2, #31
 80057a2:	d427      	bmi.n	80057f4 <__sflush_r+0xb0>
 80057a4:	2200      	movs	r2, #0
 80057a6:	6062      	str	r2, [r4, #4]
 80057a8:	6922      	ldr	r2, [r4, #16]
 80057aa:	04d9      	lsls	r1, r3, #19
 80057ac:	6022      	str	r2, [r4, #0]
 80057ae:	d504      	bpl.n	80057ba <__sflush_r+0x76>
 80057b0:	1c42      	adds	r2, r0, #1
 80057b2:	d101      	bne.n	80057b8 <__sflush_r+0x74>
 80057b4:	682b      	ldr	r3, [r5, #0]
 80057b6:	b903      	cbnz	r3, 80057ba <__sflush_r+0x76>
 80057b8:	6560      	str	r0, [r4, #84]	@ 0x54
 80057ba:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80057bc:	602f      	str	r7, [r5, #0]
 80057be:	b1b9      	cbz	r1, 80057f0 <__sflush_r+0xac>
 80057c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80057c4:	4299      	cmp	r1, r3
 80057c6:	d002      	beq.n	80057ce <__sflush_r+0x8a>
 80057c8:	4628      	mov	r0, r5
 80057ca:	f7ff f9e5 	bl	8004b98 <_free_r>
 80057ce:	2300      	movs	r3, #0
 80057d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80057d2:	e00d      	b.n	80057f0 <__sflush_r+0xac>
 80057d4:	2301      	movs	r3, #1
 80057d6:	4628      	mov	r0, r5
 80057d8:	47b0      	blx	r6
 80057da:	4602      	mov	r2, r0
 80057dc:	1c50      	adds	r0, r2, #1
 80057de:	d1c9      	bne.n	8005774 <__sflush_r+0x30>
 80057e0:	682b      	ldr	r3, [r5, #0]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d0c6      	beq.n	8005774 <__sflush_r+0x30>
 80057e6:	2b1d      	cmp	r3, #29
 80057e8:	d001      	beq.n	80057ee <__sflush_r+0xaa>
 80057ea:	2b16      	cmp	r3, #22
 80057ec:	d11d      	bne.n	800582a <__sflush_r+0xe6>
 80057ee:	602f      	str	r7, [r5, #0]
 80057f0:	2000      	movs	r0, #0
 80057f2:	e021      	b.n	8005838 <__sflush_r+0xf4>
 80057f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057f8:	b21b      	sxth	r3, r3
 80057fa:	e01a      	b.n	8005832 <__sflush_r+0xee>
 80057fc:	690f      	ldr	r7, [r1, #16]
 80057fe:	2f00      	cmp	r7, #0
 8005800:	d0f6      	beq.n	80057f0 <__sflush_r+0xac>
 8005802:	0793      	lsls	r3, r2, #30
 8005804:	bf18      	it	ne
 8005806:	2300      	movne	r3, #0
 8005808:	680e      	ldr	r6, [r1, #0]
 800580a:	bf08      	it	eq
 800580c:	694b      	ldreq	r3, [r1, #20]
 800580e:	1bf6      	subs	r6, r6, r7
 8005810:	600f      	str	r7, [r1, #0]
 8005812:	608b      	str	r3, [r1, #8]
 8005814:	2e00      	cmp	r6, #0
 8005816:	ddeb      	ble.n	80057f0 <__sflush_r+0xac>
 8005818:	4633      	mov	r3, r6
 800581a:	463a      	mov	r2, r7
 800581c:	4628      	mov	r0, r5
 800581e:	6a21      	ldr	r1, [r4, #32]
 8005820:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005824:	47e0      	blx	ip
 8005826:	2800      	cmp	r0, #0
 8005828:	dc07      	bgt.n	800583a <__sflush_r+0xf6>
 800582a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800582e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005832:	f04f 30ff 	mov.w	r0, #4294967295
 8005836:	81a3      	strh	r3, [r4, #12]
 8005838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800583a:	4407      	add	r7, r0
 800583c:	1a36      	subs	r6, r6, r0
 800583e:	e7e9      	b.n	8005814 <__sflush_r+0xd0>
 8005840:	dfbffffe 	.word	0xdfbffffe

08005844 <_fflush_r>:
 8005844:	b538      	push	{r3, r4, r5, lr}
 8005846:	690b      	ldr	r3, [r1, #16]
 8005848:	4605      	mov	r5, r0
 800584a:	460c      	mov	r4, r1
 800584c:	b913      	cbnz	r3, 8005854 <_fflush_r+0x10>
 800584e:	2500      	movs	r5, #0
 8005850:	4628      	mov	r0, r5
 8005852:	bd38      	pop	{r3, r4, r5, pc}
 8005854:	b118      	cbz	r0, 800585e <_fflush_r+0x1a>
 8005856:	6a03      	ldr	r3, [r0, #32]
 8005858:	b90b      	cbnz	r3, 800585e <_fflush_r+0x1a>
 800585a:	f7fe fa07 	bl	8003c6c <__sinit>
 800585e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d0f3      	beq.n	800584e <_fflush_r+0xa>
 8005866:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005868:	07d0      	lsls	r0, r2, #31
 800586a:	d404      	bmi.n	8005876 <_fflush_r+0x32>
 800586c:	0599      	lsls	r1, r3, #22
 800586e:	d402      	bmi.n	8005876 <_fflush_r+0x32>
 8005870:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005872:	f7fe fb12 	bl	8003e9a <__retarget_lock_acquire_recursive>
 8005876:	4628      	mov	r0, r5
 8005878:	4621      	mov	r1, r4
 800587a:	f7ff ff63 	bl	8005744 <__sflush_r>
 800587e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005880:	4605      	mov	r5, r0
 8005882:	07da      	lsls	r2, r3, #31
 8005884:	d4e4      	bmi.n	8005850 <_fflush_r+0xc>
 8005886:	89a3      	ldrh	r3, [r4, #12]
 8005888:	059b      	lsls	r3, r3, #22
 800588a:	d4e1      	bmi.n	8005850 <_fflush_r+0xc>
 800588c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800588e:	f7fe fb05 	bl	8003e9c <__retarget_lock_release_recursive>
 8005892:	e7dd      	b.n	8005850 <_fflush_r+0xc>

08005894 <fiprintf>:
 8005894:	b40e      	push	{r1, r2, r3}
 8005896:	b503      	push	{r0, r1, lr}
 8005898:	4601      	mov	r1, r0
 800589a:	ab03      	add	r3, sp, #12
 800589c:	4805      	ldr	r0, [pc, #20]	@ (80058b4 <fiprintf+0x20>)
 800589e:	f853 2b04 	ldr.w	r2, [r3], #4
 80058a2:	6800      	ldr	r0, [r0, #0]
 80058a4:	9301      	str	r3, [sp, #4]
 80058a6:	f000 f8cf 	bl	8005a48 <_vfiprintf_r>
 80058aa:	b002      	add	sp, #8
 80058ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80058b0:	b003      	add	sp, #12
 80058b2:	4770      	bx	lr
 80058b4:	20000018 	.word	0x20000018

080058b8 <memmove>:
 80058b8:	4288      	cmp	r0, r1
 80058ba:	b510      	push	{r4, lr}
 80058bc:	eb01 0402 	add.w	r4, r1, r2
 80058c0:	d902      	bls.n	80058c8 <memmove+0x10>
 80058c2:	4284      	cmp	r4, r0
 80058c4:	4623      	mov	r3, r4
 80058c6:	d807      	bhi.n	80058d8 <memmove+0x20>
 80058c8:	1e43      	subs	r3, r0, #1
 80058ca:	42a1      	cmp	r1, r4
 80058cc:	d008      	beq.n	80058e0 <memmove+0x28>
 80058ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80058d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80058d6:	e7f8      	b.n	80058ca <memmove+0x12>
 80058d8:	4601      	mov	r1, r0
 80058da:	4402      	add	r2, r0
 80058dc:	428a      	cmp	r2, r1
 80058de:	d100      	bne.n	80058e2 <memmove+0x2a>
 80058e0:	bd10      	pop	{r4, pc}
 80058e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80058e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80058ea:	e7f7      	b.n	80058dc <memmove+0x24>

080058ec <_sbrk_r>:
 80058ec:	b538      	push	{r3, r4, r5, lr}
 80058ee:	2300      	movs	r3, #0
 80058f0:	4d05      	ldr	r5, [pc, #20]	@ (8005908 <_sbrk_r+0x1c>)
 80058f2:	4604      	mov	r4, r0
 80058f4:	4608      	mov	r0, r1
 80058f6:	602b      	str	r3, [r5, #0]
 80058f8:	f7fb fe0c 	bl	8001514 <_sbrk>
 80058fc:	1c43      	adds	r3, r0, #1
 80058fe:	d102      	bne.n	8005906 <_sbrk_r+0x1a>
 8005900:	682b      	ldr	r3, [r5, #0]
 8005902:	b103      	cbz	r3, 8005906 <_sbrk_r+0x1a>
 8005904:	6023      	str	r3, [r4, #0]
 8005906:	bd38      	pop	{r3, r4, r5, pc}
 8005908:	20000b20 	.word	0x20000b20

0800590c <memcpy>:
 800590c:	440a      	add	r2, r1
 800590e:	4291      	cmp	r1, r2
 8005910:	f100 33ff 	add.w	r3, r0, #4294967295
 8005914:	d100      	bne.n	8005918 <memcpy+0xc>
 8005916:	4770      	bx	lr
 8005918:	b510      	push	{r4, lr}
 800591a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800591e:	4291      	cmp	r1, r2
 8005920:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005924:	d1f9      	bne.n	800591a <memcpy+0xe>
 8005926:	bd10      	pop	{r4, pc}

08005928 <abort>:
 8005928:	2006      	movs	r0, #6
 800592a:	b508      	push	{r3, lr}
 800592c:	f000 fa60 	bl	8005df0 <raise>
 8005930:	2001      	movs	r0, #1
 8005932:	f7fb fdcd 	bl	80014d0 <_exit>

08005936 <_calloc_r>:
 8005936:	b570      	push	{r4, r5, r6, lr}
 8005938:	fba1 5402 	umull	r5, r4, r1, r2
 800593c:	b93c      	cbnz	r4, 800594e <_calloc_r+0x18>
 800593e:	4629      	mov	r1, r5
 8005940:	f7ff f99c 	bl	8004c7c <_malloc_r>
 8005944:	4606      	mov	r6, r0
 8005946:	b928      	cbnz	r0, 8005954 <_calloc_r+0x1e>
 8005948:	2600      	movs	r6, #0
 800594a:	4630      	mov	r0, r6
 800594c:	bd70      	pop	{r4, r5, r6, pc}
 800594e:	220c      	movs	r2, #12
 8005950:	6002      	str	r2, [r0, #0]
 8005952:	e7f9      	b.n	8005948 <_calloc_r+0x12>
 8005954:	462a      	mov	r2, r5
 8005956:	4621      	mov	r1, r4
 8005958:	f7fe fa21 	bl	8003d9e <memset>
 800595c:	e7f5      	b.n	800594a <_calloc_r+0x14>

0800595e <__ascii_mbtowc>:
 800595e:	b082      	sub	sp, #8
 8005960:	b901      	cbnz	r1, 8005964 <__ascii_mbtowc+0x6>
 8005962:	a901      	add	r1, sp, #4
 8005964:	b142      	cbz	r2, 8005978 <__ascii_mbtowc+0x1a>
 8005966:	b14b      	cbz	r3, 800597c <__ascii_mbtowc+0x1e>
 8005968:	7813      	ldrb	r3, [r2, #0]
 800596a:	600b      	str	r3, [r1, #0]
 800596c:	7812      	ldrb	r2, [r2, #0]
 800596e:	1e10      	subs	r0, r2, #0
 8005970:	bf18      	it	ne
 8005972:	2001      	movne	r0, #1
 8005974:	b002      	add	sp, #8
 8005976:	4770      	bx	lr
 8005978:	4610      	mov	r0, r2
 800597a:	e7fb      	b.n	8005974 <__ascii_mbtowc+0x16>
 800597c:	f06f 0001 	mvn.w	r0, #1
 8005980:	e7f8      	b.n	8005974 <__ascii_mbtowc+0x16>

08005982 <_realloc_r>:
 8005982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005986:	4680      	mov	r8, r0
 8005988:	4615      	mov	r5, r2
 800598a:	460c      	mov	r4, r1
 800598c:	b921      	cbnz	r1, 8005998 <_realloc_r+0x16>
 800598e:	4611      	mov	r1, r2
 8005990:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005994:	f7ff b972 	b.w	8004c7c <_malloc_r>
 8005998:	b92a      	cbnz	r2, 80059a6 <_realloc_r+0x24>
 800599a:	f7ff f8fd 	bl	8004b98 <_free_r>
 800599e:	2400      	movs	r4, #0
 80059a0:	4620      	mov	r0, r4
 80059a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059a6:	f000 fa3f 	bl	8005e28 <_malloc_usable_size_r>
 80059aa:	4285      	cmp	r5, r0
 80059ac:	4606      	mov	r6, r0
 80059ae:	d802      	bhi.n	80059b6 <_realloc_r+0x34>
 80059b0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80059b4:	d8f4      	bhi.n	80059a0 <_realloc_r+0x1e>
 80059b6:	4629      	mov	r1, r5
 80059b8:	4640      	mov	r0, r8
 80059ba:	f7ff f95f 	bl	8004c7c <_malloc_r>
 80059be:	4607      	mov	r7, r0
 80059c0:	2800      	cmp	r0, #0
 80059c2:	d0ec      	beq.n	800599e <_realloc_r+0x1c>
 80059c4:	42b5      	cmp	r5, r6
 80059c6:	462a      	mov	r2, r5
 80059c8:	4621      	mov	r1, r4
 80059ca:	bf28      	it	cs
 80059cc:	4632      	movcs	r2, r6
 80059ce:	f7ff ff9d 	bl	800590c <memcpy>
 80059d2:	4621      	mov	r1, r4
 80059d4:	4640      	mov	r0, r8
 80059d6:	f7ff f8df 	bl	8004b98 <_free_r>
 80059da:	463c      	mov	r4, r7
 80059dc:	e7e0      	b.n	80059a0 <_realloc_r+0x1e>

080059de <__ascii_wctomb>:
 80059de:	4603      	mov	r3, r0
 80059e0:	4608      	mov	r0, r1
 80059e2:	b141      	cbz	r1, 80059f6 <__ascii_wctomb+0x18>
 80059e4:	2aff      	cmp	r2, #255	@ 0xff
 80059e6:	d904      	bls.n	80059f2 <__ascii_wctomb+0x14>
 80059e8:	228a      	movs	r2, #138	@ 0x8a
 80059ea:	f04f 30ff 	mov.w	r0, #4294967295
 80059ee:	601a      	str	r2, [r3, #0]
 80059f0:	4770      	bx	lr
 80059f2:	2001      	movs	r0, #1
 80059f4:	700a      	strb	r2, [r1, #0]
 80059f6:	4770      	bx	lr

080059f8 <__sfputc_r>:
 80059f8:	6893      	ldr	r3, [r2, #8]
 80059fa:	b410      	push	{r4}
 80059fc:	3b01      	subs	r3, #1
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	6093      	str	r3, [r2, #8]
 8005a02:	da07      	bge.n	8005a14 <__sfputc_r+0x1c>
 8005a04:	6994      	ldr	r4, [r2, #24]
 8005a06:	42a3      	cmp	r3, r4
 8005a08:	db01      	blt.n	8005a0e <__sfputc_r+0x16>
 8005a0a:	290a      	cmp	r1, #10
 8005a0c:	d102      	bne.n	8005a14 <__sfputc_r+0x1c>
 8005a0e:	bc10      	pop	{r4}
 8005a10:	f000 b932 	b.w	8005c78 <__swbuf_r>
 8005a14:	6813      	ldr	r3, [r2, #0]
 8005a16:	1c58      	adds	r0, r3, #1
 8005a18:	6010      	str	r0, [r2, #0]
 8005a1a:	7019      	strb	r1, [r3, #0]
 8005a1c:	4608      	mov	r0, r1
 8005a1e:	bc10      	pop	{r4}
 8005a20:	4770      	bx	lr

08005a22 <__sfputs_r>:
 8005a22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a24:	4606      	mov	r6, r0
 8005a26:	460f      	mov	r7, r1
 8005a28:	4614      	mov	r4, r2
 8005a2a:	18d5      	adds	r5, r2, r3
 8005a2c:	42ac      	cmp	r4, r5
 8005a2e:	d101      	bne.n	8005a34 <__sfputs_r+0x12>
 8005a30:	2000      	movs	r0, #0
 8005a32:	e007      	b.n	8005a44 <__sfputs_r+0x22>
 8005a34:	463a      	mov	r2, r7
 8005a36:	4630      	mov	r0, r6
 8005a38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a3c:	f7ff ffdc 	bl	80059f8 <__sfputc_r>
 8005a40:	1c43      	adds	r3, r0, #1
 8005a42:	d1f3      	bne.n	8005a2c <__sfputs_r+0xa>
 8005a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005a48 <_vfiprintf_r>:
 8005a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a4c:	460d      	mov	r5, r1
 8005a4e:	4614      	mov	r4, r2
 8005a50:	4698      	mov	r8, r3
 8005a52:	4606      	mov	r6, r0
 8005a54:	b09d      	sub	sp, #116	@ 0x74
 8005a56:	b118      	cbz	r0, 8005a60 <_vfiprintf_r+0x18>
 8005a58:	6a03      	ldr	r3, [r0, #32]
 8005a5a:	b90b      	cbnz	r3, 8005a60 <_vfiprintf_r+0x18>
 8005a5c:	f7fe f906 	bl	8003c6c <__sinit>
 8005a60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005a62:	07d9      	lsls	r1, r3, #31
 8005a64:	d405      	bmi.n	8005a72 <_vfiprintf_r+0x2a>
 8005a66:	89ab      	ldrh	r3, [r5, #12]
 8005a68:	059a      	lsls	r2, r3, #22
 8005a6a:	d402      	bmi.n	8005a72 <_vfiprintf_r+0x2a>
 8005a6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005a6e:	f7fe fa14 	bl	8003e9a <__retarget_lock_acquire_recursive>
 8005a72:	89ab      	ldrh	r3, [r5, #12]
 8005a74:	071b      	lsls	r3, r3, #28
 8005a76:	d501      	bpl.n	8005a7c <_vfiprintf_r+0x34>
 8005a78:	692b      	ldr	r3, [r5, #16]
 8005a7a:	b99b      	cbnz	r3, 8005aa4 <_vfiprintf_r+0x5c>
 8005a7c:	4629      	mov	r1, r5
 8005a7e:	4630      	mov	r0, r6
 8005a80:	f000 f938 	bl	8005cf4 <__swsetup_r>
 8005a84:	b170      	cbz	r0, 8005aa4 <_vfiprintf_r+0x5c>
 8005a86:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005a88:	07dc      	lsls	r4, r3, #31
 8005a8a:	d504      	bpl.n	8005a96 <_vfiprintf_r+0x4e>
 8005a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a90:	b01d      	add	sp, #116	@ 0x74
 8005a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a96:	89ab      	ldrh	r3, [r5, #12]
 8005a98:	0598      	lsls	r0, r3, #22
 8005a9a:	d4f7      	bmi.n	8005a8c <_vfiprintf_r+0x44>
 8005a9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005a9e:	f7fe f9fd 	bl	8003e9c <__retarget_lock_release_recursive>
 8005aa2:	e7f3      	b.n	8005a8c <_vfiprintf_r+0x44>
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	9309      	str	r3, [sp, #36]	@ 0x24
 8005aa8:	2320      	movs	r3, #32
 8005aaa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005aae:	2330      	movs	r3, #48	@ 0x30
 8005ab0:	f04f 0901 	mov.w	r9, #1
 8005ab4:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ab8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005c64 <_vfiprintf_r+0x21c>
 8005abc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005ac0:	4623      	mov	r3, r4
 8005ac2:	469a      	mov	sl, r3
 8005ac4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ac8:	b10a      	cbz	r2, 8005ace <_vfiprintf_r+0x86>
 8005aca:	2a25      	cmp	r2, #37	@ 0x25
 8005acc:	d1f9      	bne.n	8005ac2 <_vfiprintf_r+0x7a>
 8005ace:	ebba 0b04 	subs.w	fp, sl, r4
 8005ad2:	d00b      	beq.n	8005aec <_vfiprintf_r+0xa4>
 8005ad4:	465b      	mov	r3, fp
 8005ad6:	4622      	mov	r2, r4
 8005ad8:	4629      	mov	r1, r5
 8005ada:	4630      	mov	r0, r6
 8005adc:	f7ff ffa1 	bl	8005a22 <__sfputs_r>
 8005ae0:	3001      	adds	r0, #1
 8005ae2:	f000 80a7 	beq.w	8005c34 <_vfiprintf_r+0x1ec>
 8005ae6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ae8:	445a      	add	r2, fp
 8005aea:	9209      	str	r2, [sp, #36]	@ 0x24
 8005aec:	f89a 3000 	ldrb.w	r3, [sl]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f000 809f 	beq.w	8005c34 <_vfiprintf_r+0x1ec>
 8005af6:	2300      	movs	r3, #0
 8005af8:	f04f 32ff 	mov.w	r2, #4294967295
 8005afc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b00:	f10a 0a01 	add.w	sl, sl, #1
 8005b04:	9304      	str	r3, [sp, #16]
 8005b06:	9307      	str	r3, [sp, #28]
 8005b08:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005b0c:	931a      	str	r3, [sp, #104]	@ 0x68
 8005b0e:	4654      	mov	r4, sl
 8005b10:	2205      	movs	r2, #5
 8005b12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b16:	4853      	ldr	r0, [pc, #332]	@ (8005c64 <_vfiprintf_r+0x21c>)
 8005b18:	f7fe f9c1 	bl	8003e9e <memchr>
 8005b1c:	9a04      	ldr	r2, [sp, #16]
 8005b1e:	b9d8      	cbnz	r0, 8005b58 <_vfiprintf_r+0x110>
 8005b20:	06d1      	lsls	r1, r2, #27
 8005b22:	bf44      	itt	mi
 8005b24:	2320      	movmi	r3, #32
 8005b26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b2a:	0713      	lsls	r3, r2, #28
 8005b2c:	bf44      	itt	mi
 8005b2e:	232b      	movmi	r3, #43	@ 0x2b
 8005b30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b34:	f89a 3000 	ldrb.w	r3, [sl]
 8005b38:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b3a:	d015      	beq.n	8005b68 <_vfiprintf_r+0x120>
 8005b3c:	4654      	mov	r4, sl
 8005b3e:	2000      	movs	r0, #0
 8005b40:	f04f 0c0a 	mov.w	ip, #10
 8005b44:	9a07      	ldr	r2, [sp, #28]
 8005b46:	4621      	mov	r1, r4
 8005b48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b4c:	3b30      	subs	r3, #48	@ 0x30
 8005b4e:	2b09      	cmp	r3, #9
 8005b50:	d94b      	bls.n	8005bea <_vfiprintf_r+0x1a2>
 8005b52:	b1b0      	cbz	r0, 8005b82 <_vfiprintf_r+0x13a>
 8005b54:	9207      	str	r2, [sp, #28]
 8005b56:	e014      	b.n	8005b82 <_vfiprintf_r+0x13a>
 8005b58:	eba0 0308 	sub.w	r3, r0, r8
 8005b5c:	fa09 f303 	lsl.w	r3, r9, r3
 8005b60:	4313      	orrs	r3, r2
 8005b62:	46a2      	mov	sl, r4
 8005b64:	9304      	str	r3, [sp, #16]
 8005b66:	e7d2      	b.n	8005b0e <_vfiprintf_r+0xc6>
 8005b68:	9b03      	ldr	r3, [sp, #12]
 8005b6a:	1d19      	adds	r1, r3, #4
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	9103      	str	r1, [sp, #12]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	bfbb      	ittet	lt
 8005b74:	425b      	neglt	r3, r3
 8005b76:	f042 0202 	orrlt.w	r2, r2, #2
 8005b7a:	9307      	strge	r3, [sp, #28]
 8005b7c:	9307      	strlt	r3, [sp, #28]
 8005b7e:	bfb8      	it	lt
 8005b80:	9204      	strlt	r2, [sp, #16]
 8005b82:	7823      	ldrb	r3, [r4, #0]
 8005b84:	2b2e      	cmp	r3, #46	@ 0x2e
 8005b86:	d10a      	bne.n	8005b9e <_vfiprintf_r+0x156>
 8005b88:	7863      	ldrb	r3, [r4, #1]
 8005b8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b8c:	d132      	bne.n	8005bf4 <_vfiprintf_r+0x1ac>
 8005b8e:	9b03      	ldr	r3, [sp, #12]
 8005b90:	3402      	adds	r4, #2
 8005b92:	1d1a      	adds	r2, r3, #4
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	9203      	str	r2, [sp, #12]
 8005b98:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005b9c:	9305      	str	r3, [sp, #20]
 8005b9e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8005c68 <_vfiprintf_r+0x220>
 8005ba2:	2203      	movs	r2, #3
 8005ba4:	4650      	mov	r0, sl
 8005ba6:	7821      	ldrb	r1, [r4, #0]
 8005ba8:	f7fe f979 	bl	8003e9e <memchr>
 8005bac:	b138      	cbz	r0, 8005bbe <_vfiprintf_r+0x176>
 8005bae:	2240      	movs	r2, #64	@ 0x40
 8005bb0:	9b04      	ldr	r3, [sp, #16]
 8005bb2:	eba0 000a 	sub.w	r0, r0, sl
 8005bb6:	4082      	lsls	r2, r0
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	3401      	adds	r4, #1
 8005bbc:	9304      	str	r3, [sp, #16]
 8005bbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bc2:	2206      	movs	r2, #6
 8005bc4:	4829      	ldr	r0, [pc, #164]	@ (8005c6c <_vfiprintf_r+0x224>)
 8005bc6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005bca:	f7fe f968 	bl	8003e9e <memchr>
 8005bce:	2800      	cmp	r0, #0
 8005bd0:	d03f      	beq.n	8005c52 <_vfiprintf_r+0x20a>
 8005bd2:	4b27      	ldr	r3, [pc, #156]	@ (8005c70 <_vfiprintf_r+0x228>)
 8005bd4:	bb1b      	cbnz	r3, 8005c1e <_vfiprintf_r+0x1d6>
 8005bd6:	9b03      	ldr	r3, [sp, #12]
 8005bd8:	3307      	adds	r3, #7
 8005bda:	f023 0307 	bic.w	r3, r3, #7
 8005bde:	3308      	adds	r3, #8
 8005be0:	9303      	str	r3, [sp, #12]
 8005be2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005be4:	443b      	add	r3, r7
 8005be6:	9309      	str	r3, [sp, #36]	@ 0x24
 8005be8:	e76a      	b.n	8005ac0 <_vfiprintf_r+0x78>
 8005bea:	460c      	mov	r4, r1
 8005bec:	2001      	movs	r0, #1
 8005bee:	fb0c 3202 	mla	r2, ip, r2, r3
 8005bf2:	e7a8      	b.n	8005b46 <_vfiprintf_r+0xfe>
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	f04f 0c0a 	mov.w	ip, #10
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	3401      	adds	r4, #1
 8005bfe:	9305      	str	r3, [sp, #20]
 8005c00:	4620      	mov	r0, r4
 8005c02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c06:	3a30      	subs	r2, #48	@ 0x30
 8005c08:	2a09      	cmp	r2, #9
 8005c0a:	d903      	bls.n	8005c14 <_vfiprintf_r+0x1cc>
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d0c6      	beq.n	8005b9e <_vfiprintf_r+0x156>
 8005c10:	9105      	str	r1, [sp, #20]
 8005c12:	e7c4      	b.n	8005b9e <_vfiprintf_r+0x156>
 8005c14:	4604      	mov	r4, r0
 8005c16:	2301      	movs	r3, #1
 8005c18:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c1c:	e7f0      	b.n	8005c00 <_vfiprintf_r+0x1b8>
 8005c1e:	ab03      	add	r3, sp, #12
 8005c20:	9300      	str	r3, [sp, #0]
 8005c22:	462a      	mov	r2, r5
 8005c24:	4630      	mov	r0, r6
 8005c26:	4b13      	ldr	r3, [pc, #76]	@ (8005c74 <_vfiprintf_r+0x22c>)
 8005c28:	a904      	add	r1, sp, #16
 8005c2a:	f7fd fbd5 	bl	80033d8 <_printf_float>
 8005c2e:	4607      	mov	r7, r0
 8005c30:	1c78      	adds	r0, r7, #1
 8005c32:	d1d6      	bne.n	8005be2 <_vfiprintf_r+0x19a>
 8005c34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c36:	07d9      	lsls	r1, r3, #31
 8005c38:	d405      	bmi.n	8005c46 <_vfiprintf_r+0x1fe>
 8005c3a:	89ab      	ldrh	r3, [r5, #12]
 8005c3c:	059a      	lsls	r2, r3, #22
 8005c3e:	d402      	bmi.n	8005c46 <_vfiprintf_r+0x1fe>
 8005c40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c42:	f7fe f92b 	bl	8003e9c <__retarget_lock_release_recursive>
 8005c46:	89ab      	ldrh	r3, [r5, #12]
 8005c48:	065b      	lsls	r3, r3, #25
 8005c4a:	f53f af1f 	bmi.w	8005a8c <_vfiprintf_r+0x44>
 8005c4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005c50:	e71e      	b.n	8005a90 <_vfiprintf_r+0x48>
 8005c52:	ab03      	add	r3, sp, #12
 8005c54:	9300      	str	r3, [sp, #0]
 8005c56:	462a      	mov	r2, r5
 8005c58:	4630      	mov	r0, r6
 8005c5a:	4b06      	ldr	r3, [pc, #24]	@ (8005c74 <_vfiprintf_r+0x22c>)
 8005c5c:	a904      	add	r1, sp, #16
 8005c5e:	f7fd fe59 	bl	8003914 <_printf_i>
 8005c62:	e7e4      	b.n	8005c2e <_vfiprintf_r+0x1e6>
 8005c64:	08006760 	.word	0x08006760
 8005c68:	08006766 	.word	0x08006766
 8005c6c:	0800676a 	.word	0x0800676a
 8005c70:	080033d9 	.word	0x080033d9
 8005c74:	08005a23 	.word	0x08005a23

08005c78 <__swbuf_r>:
 8005c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c7a:	460e      	mov	r6, r1
 8005c7c:	4614      	mov	r4, r2
 8005c7e:	4605      	mov	r5, r0
 8005c80:	b118      	cbz	r0, 8005c8a <__swbuf_r+0x12>
 8005c82:	6a03      	ldr	r3, [r0, #32]
 8005c84:	b90b      	cbnz	r3, 8005c8a <__swbuf_r+0x12>
 8005c86:	f7fd fff1 	bl	8003c6c <__sinit>
 8005c8a:	69a3      	ldr	r3, [r4, #24]
 8005c8c:	60a3      	str	r3, [r4, #8]
 8005c8e:	89a3      	ldrh	r3, [r4, #12]
 8005c90:	071a      	lsls	r2, r3, #28
 8005c92:	d501      	bpl.n	8005c98 <__swbuf_r+0x20>
 8005c94:	6923      	ldr	r3, [r4, #16]
 8005c96:	b943      	cbnz	r3, 8005caa <__swbuf_r+0x32>
 8005c98:	4621      	mov	r1, r4
 8005c9a:	4628      	mov	r0, r5
 8005c9c:	f000 f82a 	bl	8005cf4 <__swsetup_r>
 8005ca0:	b118      	cbz	r0, 8005caa <__swbuf_r+0x32>
 8005ca2:	f04f 37ff 	mov.w	r7, #4294967295
 8005ca6:	4638      	mov	r0, r7
 8005ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005caa:	6823      	ldr	r3, [r4, #0]
 8005cac:	6922      	ldr	r2, [r4, #16]
 8005cae:	b2f6      	uxtb	r6, r6
 8005cb0:	1a98      	subs	r0, r3, r2
 8005cb2:	6963      	ldr	r3, [r4, #20]
 8005cb4:	4637      	mov	r7, r6
 8005cb6:	4283      	cmp	r3, r0
 8005cb8:	dc05      	bgt.n	8005cc6 <__swbuf_r+0x4e>
 8005cba:	4621      	mov	r1, r4
 8005cbc:	4628      	mov	r0, r5
 8005cbe:	f7ff fdc1 	bl	8005844 <_fflush_r>
 8005cc2:	2800      	cmp	r0, #0
 8005cc4:	d1ed      	bne.n	8005ca2 <__swbuf_r+0x2a>
 8005cc6:	68a3      	ldr	r3, [r4, #8]
 8005cc8:	3b01      	subs	r3, #1
 8005cca:	60a3      	str	r3, [r4, #8]
 8005ccc:	6823      	ldr	r3, [r4, #0]
 8005cce:	1c5a      	adds	r2, r3, #1
 8005cd0:	6022      	str	r2, [r4, #0]
 8005cd2:	701e      	strb	r6, [r3, #0]
 8005cd4:	6962      	ldr	r2, [r4, #20]
 8005cd6:	1c43      	adds	r3, r0, #1
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d004      	beq.n	8005ce6 <__swbuf_r+0x6e>
 8005cdc:	89a3      	ldrh	r3, [r4, #12]
 8005cde:	07db      	lsls	r3, r3, #31
 8005ce0:	d5e1      	bpl.n	8005ca6 <__swbuf_r+0x2e>
 8005ce2:	2e0a      	cmp	r6, #10
 8005ce4:	d1df      	bne.n	8005ca6 <__swbuf_r+0x2e>
 8005ce6:	4621      	mov	r1, r4
 8005ce8:	4628      	mov	r0, r5
 8005cea:	f7ff fdab 	bl	8005844 <_fflush_r>
 8005cee:	2800      	cmp	r0, #0
 8005cf0:	d0d9      	beq.n	8005ca6 <__swbuf_r+0x2e>
 8005cf2:	e7d6      	b.n	8005ca2 <__swbuf_r+0x2a>

08005cf4 <__swsetup_r>:
 8005cf4:	b538      	push	{r3, r4, r5, lr}
 8005cf6:	4b29      	ldr	r3, [pc, #164]	@ (8005d9c <__swsetup_r+0xa8>)
 8005cf8:	4605      	mov	r5, r0
 8005cfa:	6818      	ldr	r0, [r3, #0]
 8005cfc:	460c      	mov	r4, r1
 8005cfe:	b118      	cbz	r0, 8005d08 <__swsetup_r+0x14>
 8005d00:	6a03      	ldr	r3, [r0, #32]
 8005d02:	b90b      	cbnz	r3, 8005d08 <__swsetup_r+0x14>
 8005d04:	f7fd ffb2 	bl	8003c6c <__sinit>
 8005d08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d0c:	0719      	lsls	r1, r3, #28
 8005d0e:	d422      	bmi.n	8005d56 <__swsetup_r+0x62>
 8005d10:	06da      	lsls	r2, r3, #27
 8005d12:	d407      	bmi.n	8005d24 <__swsetup_r+0x30>
 8005d14:	2209      	movs	r2, #9
 8005d16:	602a      	str	r2, [r5, #0]
 8005d18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d20:	81a3      	strh	r3, [r4, #12]
 8005d22:	e033      	b.n	8005d8c <__swsetup_r+0x98>
 8005d24:	0758      	lsls	r0, r3, #29
 8005d26:	d512      	bpl.n	8005d4e <__swsetup_r+0x5a>
 8005d28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005d2a:	b141      	cbz	r1, 8005d3e <__swsetup_r+0x4a>
 8005d2c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005d30:	4299      	cmp	r1, r3
 8005d32:	d002      	beq.n	8005d3a <__swsetup_r+0x46>
 8005d34:	4628      	mov	r0, r5
 8005d36:	f7fe ff2f 	bl	8004b98 <_free_r>
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	6363      	str	r3, [r4, #52]	@ 0x34
 8005d3e:	89a3      	ldrh	r3, [r4, #12]
 8005d40:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005d44:	81a3      	strh	r3, [r4, #12]
 8005d46:	2300      	movs	r3, #0
 8005d48:	6063      	str	r3, [r4, #4]
 8005d4a:	6923      	ldr	r3, [r4, #16]
 8005d4c:	6023      	str	r3, [r4, #0]
 8005d4e:	89a3      	ldrh	r3, [r4, #12]
 8005d50:	f043 0308 	orr.w	r3, r3, #8
 8005d54:	81a3      	strh	r3, [r4, #12]
 8005d56:	6923      	ldr	r3, [r4, #16]
 8005d58:	b94b      	cbnz	r3, 8005d6e <__swsetup_r+0x7a>
 8005d5a:	89a3      	ldrh	r3, [r4, #12]
 8005d5c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005d60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d64:	d003      	beq.n	8005d6e <__swsetup_r+0x7a>
 8005d66:	4621      	mov	r1, r4
 8005d68:	4628      	mov	r0, r5
 8005d6a:	f000 f88a 	bl	8005e82 <__smakebuf_r>
 8005d6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d72:	f013 0201 	ands.w	r2, r3, #1
 8005d76:	d00a      	beq.n	8005d8e <__swsetup_r+0x9a>
 8005d78:	2200      	movs	r2, #0
 8005d7a:	60a2      	str	r2, [r4, #8]
 8005d7c:	6962      	ldr	r2, [r4, #20]
 8005d7e:	4252      	negs	r2, r2
 8005d80:	61a2      	str	r2, [r4, #24]
 8005d82:	6922      	ldr	r2, [r4, #16]
 8005d84:	b942      	cbnz	r2, 8005d98 <__swsetup_r+0xa4>
 8005d86:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005d8a:	d1c5      	bne.n	8005d18 <__swsetup_r+0x24>
 8005d8c:	bd38      	pop	{r3, r4, r5, pc}
 8005d8e:	0799      	lsls	r1, r3, #30
 8005d90:	bf58      	it	pl
 8005d92:	6962      	ldrpl	r2, [r4, #20]
 8005d94:	60a2      	str	r2, [r4, #8]
 8005d96:	e7f4      	b.n	8005d82 <__swsetup_r+0x8e>
 8005d98:	2000      	movs	r0, #0
 8005d9a:	e7f7      	b.n	8005d8c <__swsetup_r+0x98>
 8005d9c:	20000018 	.word	0x20000018

08005da0 <_raise_r>:
 8005da0:	291f      	cmp	r1, #31
 8005da2:	b538      	push	{r3, r4, r5, lr}
 8005da4:	4605      	mov	r5, r0
 8005da6:	460c      	mov	r4, r1
 8005da8:	d904      	bls.n	8005db4 <_raise_r+0x14>
 8005daa:	2316      	movs	r3, #22
 8005dac:	6003      	str	r3, [r0, #0]
 8005dae:	f04f 30ff 	mov.w	r0, #4294967295
 8005db2:	bd38      	pop	{r3, r4, r5, pc}
 8005db4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005db6:	b112      	cbz	r2, 8005dbe <_raise_r+0x1e>
 8005db8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005dbc:	b94b      	cbnz	r3, 8005dd2 <_raise_r+0x32>
 8005dbe:	4628      	mov	r0, r5
 8005dc0:	f000 f830 	bl	8005e24 <_getpid_r>
 8005dc4:	4622      	mov	r2, r4
 8005dc6:	4601      	mov	r1, r0
 8005dc8:	4628      	mov	r0, r5
 8005dca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005dce:	f000 b817 	b.w	8005e00 <_kill_r>
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d00a      	beq.n	8005dec <_raise_r+0x4c>
 8005dd6:	1c59      	adds	r1, r3, #1
 8005dd8:	d103      	bne.n	8005de2 <_raise_r+0x42>
 8005dda:	2316      	movs	r3, #22
 8005ddc:	6003      	str	r3, [r0, #0]
 8005dde:	2001      	movs	r0, #1
 8005de0:	e7e7      	b.n	8005db2 <_raise_r+0x12>
 8005de2:	2100      	movs	r1, #0
 8005de4:	4620      	mov	r0, r4
 8005de6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005dea:	4798      	blx	r3
 8005dec:	2000      	movs	r0, #0
 8005dee:	e7e0      	b.n	8005db2 <_raise_r+0x12>

08005df0 <raise>:
 8005df0:	4b02      	ldr	r3, [pc, #8]	@ (8005dfc <raise+0xc>)
 8005df2:	4601      	mov	r1, r0
 8005df4:	6818      	ldr	r0, [r3, #0]
 8005df6:	f7ff bfd3 	b.w	8005da0 <_raise_r>
 8005dfa:	bf00      	nop
 8005dfc:	20000018 	.word	0x20000018

08005e00 <_kill_r>:
 8005e00:	b538      	push	{r3, r4, r5, lr}
 8005e02:	2300      	movs	r3, #0
 8005e04:	4d06      	ldr	r5, [pc, #24]	@ (8005e20 <_kill_r+0x20>)
 8005e06:	4604      	mov	r4, r0
 8005e08:	4608      	mov	r0, r1
 8005e0a:	4611      	mov	r1, r2
 8005e0c:	602b      	str	r3, [r5, #0]
 8005e0e:	f7fb fb55 	bl	80014bc <_kill>
 8005e12:	1c43      	adds	r3, r0, #1
 8005e14:	d102      	bne.n	8005e1c <_kill_r+0x1c>
 8005e16:	682b      	ldr	r3, [r5, #0]
 8005e18:	b103      	cbz	r3, 8005e1c <_kill_r+0x1c>
 8005e1a:	6023      	str	r3, [r4, #0]
 8005e1c:	bd38      	pop	{r3, r4, r5, pc}
 8005e1e:	bf00      	nop
 8005e20:	20000b20 	.word	0x20000b20

08005e24 <_getpid_r>:
 8005e24:	f7fb bb48 	b.w	80014b8 <_getpid>

08005e28 <_malloc_usable_size_r>:
 8005e28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e2c:	1f18      	subs	r0, r3, #4
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	bfbc      	itt	lt
 8005e32:	580b      	ldrlt	r3, [r1, r0]
 8005e34:	18c0      	addlt	r0, r0, r3
 8005e36:	4770      	bx	lr

08005e38 <__swhatbuf_r>:
 8005e38:	b570      	push	{r4, r5, r6, lr}
 8005e3a:	460c      	mov	r4, r1
 8005e3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e40:	4615      	mov	r5, r2
 8005e42:	2900      	cmp	r1, #0
 8005e44:	461e      	mov	r6, r3
 8005e46:	b096      	sub	sp, #88	@ 0x58
 8005e48:	da0c      	bge.n	8005e64 <__swhatbuf_r+0x2c>
 8005e4a:	89a3      	ldrh	r3, [r4, #12]
 8005e4c:	2100      	movs	r1, #0
 8005e4e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005e52:	bf14      	ite	ne
 8005e54:	2340      	movne	r3, #64	@ 0x40
 8005e56:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005e5a:	2000      	movs	r0, #0
 8005e5c:	6031      	str	r1, [r6, #0]
 8005e5e:	602b      	str	r3, [r5, #0]
 8005e60:	b016      	add	sp, #88	@ 0x58
 8005e62:	bd70      	pop	{r4, r5, r6, pc}
 8005e64:	466a      	mov	r2, sp
 8005e66:	f000 f849 	bl	8005efc <_fstat_r>
 8005e6a:	2800      	cmp	r0, #0
 8005e6c:	dbed      	blt.n	8005e4a <__swhatbuf_r+0x12>
 8005e6e:	9901      	ldr	r1, [sp, #4]
 8005e70:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005e74:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005e78:	4259      	negs	r1, r3
 8005e7a:	4159      	adcs	r1, r3
 8005e7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005e80:	e7eb      	b.n	8005e5a <__swhatbuf_r+0x22>

08005e82 <__smakebuf_r>:
 8005e82:	898b      	ldrh	r3, [r1, #12]
 8005e84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e86:	079d      	lsls	r5, r3, #30
 8005e88:	4606      	mov	r6, r0
 8005e8a:	460c      	mov	r4, r1
 8005e8c:	d507      	bpl.n	8005e9e <__smakebuf_r+0x1c>
 8005e8e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005e92:	6023      	str	r3, [r4, #0]
 8005e94:	6123      	str	r3, [r4, #16]
 8005e96:	2301      	movs	r3, #1
 8005e98:	6163      	str	r3, [r4, #20]
 8005e9a:	b003      	add	sp, #12
 8005e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e9e:	466a      	mov	r2, sp
 8005ea0:	ab01      	add	r3, sp, #4
 8005ea2:	f7ff ffc9 	bl	8005e38 <__swhatbuf_r>
 8005ea6:	9f00      	ldr	r7, [sp, #0]
 8005ea8:	4605      	mov	r5, r0
 8005eaa:	4639      	mov	r1, r7
 8005eac:	4630      	mov	r0, r6
 8005eae:	f7fe fee5 	bl	8004c7c <_malloc_r>
 8005eb2:	b948      	cbnz	r0, 8005ec8 <__smakebuf_r+0x46>
 8005eb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005eb8:	059a      	lsls	r2, r3, #22
 8005eba:	d4ee      	bmi.n	8005e9a <__smakebuf_r+0x18>
 8005ebc:	f023 0303 	bic.w	r3, r3, #3
 8005ec0:	f043 0302 	orr.w	r3, r3, #2
 8005ec4:	81a3      	strh	r3, [r4, #12]
 8005ec6:	e7e2      	b.n	8005e8e <__smakebuf_r+0xc>
 8005ec8:	89a3      	ldrh	r3, [r4, #12]
 8005eca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005ece:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ed2:	81a3      	strh	r3, [r4, #12]
 8005ed4:	9b01      	ldr	r3, [sp, #4]
 8005ed6:	6020      	str	r0, [r4, #0]
 8005ed8:	b15b      	cbz	r3, 8005ef2 <__smakebuf_r+0x70>
 8005eda:	4630      	mov	r0, r6
 8005edc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ee0:	f000 f81e 	bl	8005f20 <_isatty_r>
 8005ee4:	b128      	cbz	r0, 8005ef2 <__smakebuf_r+0x70>
 8005ee6:	89a3      	ldrh	r3, [r4, #12]
 8005ee8:	f023 0303 	bic.w	r3, r3, #3
 8005eec:	f043 0301 	orr.w	r3, r3, #1
 8005ef0:	81a3      	strh	r3, [r4, #12]
 8005ef2:	89a3      	ldrh	r3, [r4, #12]
 8005ef4:	431d      	orrs	r5, r3
 8005ef6:	81a5      	strh	r5, [r4, #12]
 8005ef8:	e7cf      	b.n	8005e9a <__smakebuf_r+0x18>
	...

08005efc <_fstat_r>:
 8005efc:	b538      	push	{r3, r4, r5, lr}
 8005efe:	2300      	movs	r3, #0
 8005f00:	4d06      	ldr	r5, [pc, #24]	@ (8005f1c <_fstat_r+0x20>)
 8005f02:	4604      	mov	r4, r0
 8005f04:	4608      	mov	r0, r1
 8005f06:	4611      	mov	r1, r2
 8005f08:	602b      	str	r3, [r5, #0]
 8005f0a:	f7fb faf9 	bl	8001500 <_fstat>
 8005f0e:	1c43      	adds	r3, r0, #1
 8005f10:	d102      	bne.n	8005f18 <_fstat_r+0x1c>
 8005f12:	682b      	ldr	r3, [r5, #0]
 8005f14:	b103      	cbz	r3, 8005f18 <_fstat_r+0x1c>
 8005f16:	6023      	str	r3, [r4, #0]
 8005f18:	bd38      	pop	{r3, r4, r5, pc}
 8005f1a:	bf00      	nop
 8005f1c:	20000b20 	.word	0x20000b20

08005f20 <_isatty_r>:
 8005f20:	b538      	push	{r3, r4, r5, lr}
 8005f22:	2300      	movs	r3, #0
 8005f24:	4d05      	ldr	r5, [pc, #20]	@ (8005f3c <_isatty_r+0x1c>)
 8005f26:	4604      	mov	r4, r0
 8005f28:	4608      	mov	r0, r1
 8005f2a:	602b      	str	r3, [r5, #0]
 8005f2c:	f7fb faee 	bl	800150c <_isatty>
 8005f30:	1c43      	adds	r3, r0, #1
 8005f32:	d102      	bne.n	8005f3a <_isatty_r+0x1a>
 8005f34:	682b      	ldr	r3, [r5, #0]
 8005f36:	b103      	cbz	r3, 8005f3a <_isatty_r+0x1a>
 8005f38:	6023      	str	r3, [r4, #0]
 8005f3a:	bd38      	pop	{r3, r4, r5, pc}
 8005f3c:	20000b20 	.word	0x20000b20

08005f40 <_init>:
 8005f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f42:	bf00      	nop
 8005f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f46:	bc08      	pop	{r3}
 8005f48:	469e      	mov	lr, r3
 8005f4a:	4770      	bx	lr

08005f4c <_fini>:
 8005f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f4e:	bf00      	nop
 8005f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f52:	bc08      	pop	{r3}
 8005f54:	469e      	mov	lr, r3
 8005f56:	4770      	bx	lr
